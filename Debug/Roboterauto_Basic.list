
Roboterauto_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018418  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030a0  080185b8  080185b8  000285b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b658  0801b658  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b658  0801b658  0002b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b660  0801b660  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b660  0801b660  0002b660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b664  0801b664  0002b664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801b668  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032ec  200000b8  0801b71c  000300b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200033a4  0801b71c  000333a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d224  00000000  00000000  00030127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005972  00000000  00000000  0007d34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  00082cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018fc  00000000  00000000  00084ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002183c  00000000  00000000  000865dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa20  00000000  00000000  000a7e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf5b9  00000000  00000000  000d7838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009370  00000000  00000000  00196df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001a0164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080185a0 	.word	0x080185a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	080185a0 	.word	0x080185a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_ldivmod>:
 8000a2c:	b97b      	cbnz	r3, 8000a4e <__aeabi_ldivmod+0x22>
 8000a2e:	b972      	cbnz	r2, 8000a4e <__aeabi_ldivmod+0x22>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bfbe      	ittt	lt
 8000a34:	2000      	movlt	r0, #0
 8000a36:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a3a:	e006      	blt.n	8000a4a <__aeabi_ldivmod+0x1e>
 8000a3c:	bf08      	it	eq
 8000a3e:	2800      	cmpeq	r0, #0
 8000a40:	bf1c      	itt	ne
 8000a42:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a46:	f04f 30ff 	movne.w	r0, #4294967295
 8000a4a:	f000 b9bb 	b.w	8000dc4 <__aeabi_idiv0>
 8000a4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a56:	2900      	cmp	r1, #0
 8000a58:	db09      	blt.n	8000a6e <__aeabi_ldivmod+0x42>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db1a      	blt.n	8000a94 <__aeabi_ldivmod+0x68>
 8000a5e:	f000 f84d 	bl	8000afc <__udivmoddi4>
 8000a62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6a:	b004      	add	sp, #16
 8000a6c:	4770      	bx	lr
 8000a6e:	4240      	negs	r0, r0
 8000a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db1b      	blt.n	8000ab0 <__aeabi_ldivmod+0x84>
 8000a78:	f000 f840 	bl	8000afc <__udivmoddi4>
 8000a7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a84:	b004      	add	sp, #16
 8000a86:	4240      	negs	r0, r0
 8000a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a92:	4770      	bx	lr
 8000a94:	4252      	negs	r2, r2
 8000a96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a9a:	f000 f82f 	bl	8000afc <__udivmoddi4>
 8000a9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa6:	b004      	add	sp, #16
 8000aa8:	4240      	negs	r0, r0
 8000aaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aae:	4770      	bx	lr
 8000ab0:	4252      	negs	r2, r2
 8000ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab6:	f000 f821 	bl	8000afc <__udivmoddi4>
 8000aba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac2:	b004      	add	sp, #16
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b970 	b.w	8000dc4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	460d      	mov	r5, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4694      	mov	ip, r2
 8000b10:	d965      	bls.n	8000bde <__udivmoddi4+0xe2>
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	b143      	cbz	r3, 8000b2a <__udivmoddi4+0x2e>
 8000b18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b1c:	f1c3 0220 	rsb	r2, r3, #32
 8000b20:	409f      	lsls	r7, r3
 8000b22:	fa20 f202 	lsr.w	r2, r0, r2
 8000b26:	4317      	orrs	r7, r2
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b2e:	fa1f f58c 	uxth.w	r5, ip
 8000b32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b36:	0c22      	lsrs	r2, r4, #16
 8000b38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b40:	fb01 f005 	mul.w	r0, r1, r5
 8000b44:	4290      	cmp	r0, r2
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b48:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b50:	f080 811c 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b54:	4290      	cmp	r0, r2
 8000b56:	f240 8119 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	4462      	add	r2, ip
 8000b5e:	1a12      	subs	r2, r2, r0
 8000b60:	b2a4      	uxth	r4, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b6e:	fb00 f505 	mul.w	r5, r0, r5
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x90>
 8000b76:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7e:	f080 8107 	bcs.w	8000d90 <__udivmoddi4+0x294>
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	f240 8104 	bls.w	8000d90 <__udivmoddi4+0x294>
 8000b88:	4464      	add	r4, ip
 8000b8a:	3802      	subs	r0, #2
 8000b8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b90:	1b64      	subs	r4, r4, r5
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11e      	cbz	r6, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40dc      	lsrs	r4, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0xbc>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80ed 	beq.w	8000d86 <__udivmoddi4+0x28a>
 8000bac:	2100      	movs	r1, #0
 8000bae:	e9c6 0500 	strd	r0, r5, [r6]
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	fab3 f183 	clz	r1, r3
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	d149      	bne.n	8000c54 <__udivmoddi4+0x158>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xce>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80f8 	bhi.w	8000dba <__udivmoddi4+0x2be>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d0e2      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bdc:	e7df      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bde:	b902      	cbnz	r2, 8000be2 <__udivmoddi4+0xe6>
 8000be0:	deff      	udf	#255	; 0xff
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8090 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000c00:	0c22      	lsrs	r2, r4, #16
 8000c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c06:	fb0e f005 	mul.w	r0, lr, r5
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2b8>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c28:	fb07 2210 	mls	r2, r7, r0, r2
 8000c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x14e>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x14c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2c2>
 8000c48:	4610      	mov	r0, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c52:	e79f      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c54:	f1c1 0720 	rsb	r7, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa05 f401 	lsl.w	r4, r5, r1
 8000c66:	fa20 f307 	lsr.w	r3, r0, r7
 8000c6a:	40fd      	lsrs	r5, r7
 8000c6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c70:	4323      	orrs	r3, r4
 8000c72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c7e:	0c1c      	lsrs	r4, r3, #16
 8000c80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c84:	fb08 f50e 	mul.w	r5, r8, lr
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca0:	42a5      	cmp	r5, r4
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2b4>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4464      	add	r4, ip
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	b29d      	uxth	r5, r3
 8000cb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2ac>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2ac>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fba3 9502 	umull	r9, r5, r3, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	42ac      	cmp	r4, r5
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46ae      	mov	lr, r5
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x29c>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x298>
 8000cec:	b156      	cbz	r6, 8000d04 <__udivmoddi4+0x208>
 8000cee:	ebb0 0208 	subs.w	r2, r0, r8
 8000cf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	40cc      	lsrs	r4, r1
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	e9c6 7400 	strd	r7, r4, [r6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	f1c3 0120 	rsb	r1, r3, #32
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	fa20 f201 	lsr.w	r2, r0, r1
 8000d18:	fa25 f101 	lsr.w	r1, r5, r1
 8000d1c:	409d      	lsls	r5, r3
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d36:	fb00 f50e 	mul.w	r5, r0, lr
 8000d3a:	428d      	cmp	r5, r1
 8000d3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x258>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d4c:	428d      	cmp	r5, r1
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1b49      	subs	r1, r1, r5
 8000d56:	b292      	uxth	r2, r2
 8000d58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d64:	fb05 f10e 	mul.w	r1, r5, lr
 8000d68:	4291      	cmp	r1, r2
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x282>
 8000d6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2a8>
 8000d76:	4291      	cmp	r1, r2
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2a8>
 8000d7a:	3d02      	subs	r5, #2
 8000d7c:	4462      	add	r2, ip
 8000d7e:	1a52      	subs	r2, r2, r1
 8000d80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0xfc>
 8000d86:	4631      	mov	r1, r6
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	e6e6      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d90:	4610      	mov	r0, r2
 8000d92:	e6fb      	b.n	8000b8c <__udivmoddi4+0x90>
 8000d94:	4548      	cmp	r0, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000da0:	3b01      	subs	r3, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da4:	4645      	mov	r5, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x282>
 8000da8:	462b      	mov	r3, r5
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x258>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db4:	3d02      	subs	r5, #2
 8000db6:	4462      	add	r2, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e70a      	b.n	8000bd4 <__udivmoddi4+0xd8>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x14e>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <I2C_Scanner>:

// This Function scans the I2c bus for connected devices
// Parameters: None
// Return: None
uint8_t I2C_Scanner(uint8_t i2cAddrBuf[])
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	printf("Scanning I2C bus:\r\n"); // Output to the serial console
 8000dd0:	481b      	ldr	r0, [pc, #108]	; (8000e40 <I2C_Scanner+0x78>)
 8000dd2:	f016 fb55 	bl	8017480 <puts>
	// Scan all addresses
   	uint8_t i;
   	uint8_t devCnt=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73bb      	strb	r3, [r7, #14]
   	for (i=1; i<128; i++)
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e023      	b.n	8000e28 <I2C_Scanner+0x60>
   	{
   		// Check if there is a response on the corresponding address
   		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b299      	uxth	r1, r3
 8000de8:	2302      	movs	r3, #2
 8000dea:	2202      	movs	r2, #2
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <I2C_Scanner+0x7c>)
 8000dee:	f003 fb4b 	bl	8004488 <HAL_I2C_IsDeviceReady>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <I2C_Scanner+0x80>)
 8000df8:	701a      	strb	r2, [r3, #0]
   		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
   		{
   			//printf(".\r"); // No ACK received at that address
   		}
   		if (result == HAL_OK)
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <I2C_Scanner+0x80>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <I2C_Scanner+0x54>
   		{
   			printf("\nDevice found at address : 0x%X\r\n", i); // Received an ACK at that address
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <I2C_Scanner+0x84>)
 8000e08:	f016 fad4 	bl	80173b4 <iprintf>
   			i2cAddrBuf[devCnt] = i;
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	701a      	strb	r2, [r3, #0]
   			devCnt++;
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	73bb      	strb	r3, [r7, #14]
   		}
   		HAL_Delay(50); // Delay of 50ms
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f001 ffdd 	bl	8002ddc <HAL_Delay>
   	for (i=1; i<128; i++)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	3301      	adds	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dad7      	bge.n	8000de0 <I2C_Scanner+0x18>
   	}
   	printf("\r\n");
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <I2C_Scanner+0x88>)
 8000e32:	f016 fb25 	bl	8017480 <puts>
   	return devCnt;
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	080185b8 	.word	0x080185b8
 8000e44:	200000d8 	.word	0x200000d8
 8000e48:	200000d4 	.word	0x200000d4
 8000e4c:	080185cc 	.word	0x080185cc
 8000e50:	080185f0 	.word	0x080185f0

08000e54 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin==ST_TOF_INT_Pin)
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b10      	cmp	r3, #16
 8000e62:	d104      	bne.n	8000e6e <HAL_GPIO_EXTI_Callback+0x1a>
  {
    IntCount++;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_GPIO_EXTI_Callback+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_GPIO_EXTI_Callback+0x28>)
 8000e6c:	6013      	str	r3, [r2, #0]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200002a4 	.word	0x200002a4

08000e80 <handle_buttons>:

void handle_buttons(int number, int is_pressed)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	DEBUG_LOG("Bluefruit controller: Button %i was %s\r\n",
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d101      	bne.n	8000e94 <handle_buttons+0x14>
 8000e90:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <handle_buttons+0x144>)
 8000e92:	e000      	b.n	8000e96 <handle_buttons+0x16>
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <handle_buttons+0x148>)
 8000e96:	461a      	mov	r2, r3
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	484c      	ldr	r0, [pc, #304]	; (8000fcc <handle_buttons+0x14c>)
 8000e9c:	f001 f99e 	bl	80021dc <debug_log>
			number, (is_pressed == 1) ? "pressed" : "released");

	switch (number)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	f200 8088 	bhi.w	8000fba <handle_buttons+0x13a>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <handle_buttons+0x30>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000f9d 	.word	0x08000f9d
 8000eb4:	08000fa9 	.word	0x08000fa9
 8000eb8:	08000fbb 	.word	0x08000fbb
 8000ebc:	08000fbb 	.word	0x08000fbb
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000f1d 	.word	0x08000f1d
 8000ec8:	08000f83 	.word	0x08000f83
 8000ecc:	08000f69 	.word	0x08000f69
	{
		case 5:
			if (is_pressed)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01b      	beq.n	8000f0e <handle_buttons+0x8e>
			{
				if (motorDirection == 1)
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <handle_buttons+0x150>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10e      	bne.n	8000efc <handle_buttons+0x7c>
				{
					motorSpeed += 10;
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <handle_buttons+0x154>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	330a      	adds	r3, #10
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <handle_buttons+0x154>)
 8000ee8:	701a      	strb	r2, [r3, #0]
					setMotorSpeed(motorSpeed,motorDirection);
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <handle_buttons+0x154>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <handle_buttons+0x150>)
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fe7b 	bl	8002bf0 <setMotorSpeed>
			}
			else
			{
				setMotorSpeed(motorSpeed,1);
			}
			break;
 8000efa:	e05e      	b.n	8000fba <handle_buttons+0x13a>
					stopMotor();
 8000efc:	f001 fede 	bl	8002cbc <stopMotor>
					motorSpeed = 0;
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <handle_buttons+0x154>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
					motorDirection = 1;
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <handle_buttons+0x150>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	e055      	b.n	8000fba <handle_buttons+0x13a>
				setMotorSpeed(motorSpeed,1);
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <handle_buttons+0x154>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2101      	movs	r1, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fe6b 	bl	8002bf0 <setMotorSpeed>
			break;
 8000f1a:	e04e      	b.n	8000fba <handle_buttons+0x13a>

		case 6:
			if (is_pressed)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01b      	beq.n	8000f5a <handle_buttons+0xda>
			{
				if (motorDirection == 0)
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <handle_buttons+0x150>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10e      	bne.n	8000f48 <handle_buttons+0xc8>
				{
					motorSpeed += 10;
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <handle_buttons+0x154>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	330a      	adds	r3, #10
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <handle_buttons+0x154>)
 8000f34:	701a      	strb	r2, [r3, #0]
					setMotorSpeed(motorSpeed,motorDirection);
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <handle_buttons+0x154>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <handle_buttons+0x150>)
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fe55 	bl	8002bf0 <setMotorSpeed>
			}
			else
			{
				setMotorSpeed(motorSpeed,0);
			}
			break;
 8000f46:	e038      	b.n	8000fba <handle_buttons+0x13a>
					stopMotor();
 8000f48:	f001 feb8 	bl	8002cbc <stopMotor>
					motorSpeed = 0;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <handle_buttons+0x154>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
					motorDirection = 0;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <handle_buttons+0x150>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			break;
 8000f58:	e02f      	b.n	8000fba <handle_buttons+0x13a>
				setMotorSpeed(motorSpeed,0);
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <handle_buttons+0x154>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fe45 	bl	8002bf0 <setMotorSpeed>
			break;
 8000f66:	e028      	b.n	8000fba <handle_buttons+0x13a>
		case 8:
			if (is_pressed)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <handle_buttons+0xf8>
			{
				htim3.Instance->CCR2 = 90;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <handle_buttons+0x158>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	225a      	movs	r2, #90	; 0x5a
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
			}
			else
			{
				htim3.Instance->CCR2 = 72;
			}
			break;
 8000f76:	e020      	b.n	8000fba <handle_buttons+0x13a>
				htim3.Instance->CCR2 = 72;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <handle_buttons+0x158>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2248      	movs	r2, #72	; 0x48
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000f80:	e01b      	b.n	8000fba <handle_buttons+0x13a>
		case 7:
			if (is_pressed)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <handle_buttons+0x112>
			{
				htim3.Instance->CCR2 = 47;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <handle_buttons+0x158>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	222f      	movs	r2, #47	; 0x2f
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
			}
			else
			{
				htim3.Instance->CCR2 = 72;
			}
			break;
 8000f90:	e013      	b.n	8000fba <handle_buttons+0x13a>
				htim3.Instance->CCR2 = 72;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <handle_buttons+0x158>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2248      	movs	r2, #72	; 0x48
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000f9a:	e00e      	b.n	8000fba <handle_buttons+0x13a>
		case 1:
			if (is_pressed)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <handle_buttons+0x134>
			{
				toggleFrontLEDs();
 8000fa2:	f001 fdd5 	bl	8002b50 <toggleFrontLEDs>
			}
			break;
 8000fa6:	e005      	b.n	8000fb4 <handle_buttons+0x134>
		case 2:
			if (is_pressed)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <handle_buttons+0x138>
			{
				toggleRearLEDs();
 8000fae:	f001 fdf7 	bl	8002ba0 <toggleRearLEDs>
			}
			break;
 8000fb2:	e001      	b.n	8000fb8 <handle_buttons+0x138>
			break;
 8000fb4:	bf00      	nop
 8000fb6:	e000      	b.n	8000fba <handle_buttons+0x13a>
			break;
 8000fb8:	bf00      	nop
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0801860c 	.word	0x0801860c
 8000fc8:	08018614 	.word	0x08018614
 8000fcc:	08018620 	.word	0x08018620
 8000fd0:	200002c7 	.word	0x200002c7
 8000fd4:	200002c6 	.word	0x200002c6
 8000fd8:	2000012c 	.word	0x2000012c

08000fdc <handle_gyroscope>:

void handle_gyroscope(float x, float y, float z)
{
 8000fdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fe0:	b088      	sub	sp, #32
 8000fe2:	af04      	add	r7, sp, #16
 8000fe4:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fe8:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fec:	ed87 1a01 	vstr	s2, [r7, #4]
	DEBUG_LOG("Bluefruit controller: Gyroscope event (%f, %f, %f)\r\n",
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f7ff fab1 	bl	8000558 <__aeabi_f2d>
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	4689      	mov	r9, r1
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff faa7 	bl	8000558 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001012:	e9cd 4500 	strd	r4, r5, [sp]
 8001016:	4642      	mov	r2, r8
 8001018:	464b      	mov	r3, r9
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <handle_gyroscope+0x50>)
 800101c:	f001 f8de 	bl	80021dc <debug_log>
			x, y, z);
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800102a:	bf00      	nop
 800102c:	0801864c 	.word	0x0801864c

08001030 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]

	rxIntCount++;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_UARTEx_RxEventCallback+0x24>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_UARTEx_RxEventCallback+0x24>)
 8001046:	701a      	strb	r2, [r3, #0]
	//memcpy (MainBuf, RxBuf, Size);
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
	//free(RxBuf);
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200002a8 	.word	0x200002a8

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	; 0x40
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t devCnt=0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f001 fe48 	bl	8002cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f97a 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fb74 	bl	8001758 <MX_GPIO_Init>
  MX_DMA_Init();
 8001070:	f000 fb52 	bl	8001718 <MX_DMA_Init>
  MX_TIM3_Init();
 8001074:	f000 fa0e 	bl	8001494 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001078:	f000 fb24 	bl	80016c4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800107c:	f000 fa82 	bl	8001584 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001080:	f000 f9da 	bl	8001438 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001084:	f000 faf4 	bl	8001670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8001088:	220a      	movs	r2, #10
 800108a:	4999      	ldr	r1, [pc, #612]	; (80012f0 <main+0x298>)
 800108c:	4899      	ldr	r0, [pc, #612]	; (80012f4 <main+0x29c>)
 800108e:	f005 f9ea 	bl	8006466 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001092:	4b99      	ldr	r3, [pc, #612]	; (80012f8 <main+0x2a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b97      	ldr	r3, [pc, #604]	; (80012f8 <main+0x2a0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0208 	bic.w	r2, r2, #8
 80010a0:	601a      	str	r2, [r3, #0]


  //bluefruit_plotter_huart = &huart1;
  debug_log_huart = &huart2;
 80010a2:	4b96      	ldr	r3, [pc, #600]	; (80012fc <main+0x2a4>)
 80010a4:	4a96      	ldr	r2, [pc, #600]	; (8001300 <main+0x2a8>)
 80010a6:	601a      	str	r2, [r3, #0]

  bluefruit_controller ctrl;
  bluefruit_controller_init(&ctrl, &huart1);
 80010a8:	463b      	mov	r3, r7
 80010aa:	4992      	ldr	r1, [pc, #584]	; (80012f4 <main+0x29c>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 ff8d 	bl	8001fcc <bluefruit_controller_init>
  ctrl.handlers.handle_buttons = handle_buttons;
 80010b2:	4b94      	ldr	r3, [pc, #592]	; (8001304 <main+0x2ac>)
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  ctrl.handlers.handle_gyroscope = handle_gyroscope;
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <main+0x2b0>)
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c


  printf("---------------------------------------\r\n");
 80010ba:	4894      	ldr	r0, [pc, #592]	; (800130c <main+0x2b4>)
 80010bc:	f016 f9e0 	bl	8017480 <puts>
  printf("Scanning for I2C Devices\r\n");
 80010c0:	4893      	ldr	r0, [pc, #588]	; (8001310 <main+0x2b8>)
 80010c2:	f016 f9dd 	bl	8017480 <puts>
  printf("---------------------------------------\r\n");
 80010c6:	4891      	ldr	r0, [pc, #580]	; (800130c <main+0x2b4>)
 80010c8:	f016 f9da 	bl	8017480 <puts>
  printf("\r\n");
 80010cc:	4891      	ldr	r0, [pc, #580]	; (8001314 <main+0x2bc>)
 80010ce:	f016 f9d7 	bl	8017480 <puts>
  devCnt = I2C_Scanner(i2cAddrBuf);
 80010d2:	4891      	ldr	r0, [pc, #580]	; (8001318 <main+0x2c0>)
 80010d4:	f7ff fe78 	bl	8000dc8 <I2C_Scanner>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  printf("%d Devices found\r\n", devCnt);
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010e2:	4619      	mov	r1, r3
 80010e4:	488d      	ldr	r0, [pc, #564]	; (800131c <main+0x2c4>)
 80010e6:	f016 f965 	bl	80173b4 <iprintf>

  for (int i=0; i<devCnt; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
 80010ee:	e077      	b.n	80011e0 <main+0x188>
  {
	  switch (i2cAddrBuf[i])
 80010f0:	4a89      	ldr	r2, [pc, #548]	; (8001318 <main+0x2c0>)
 80010f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b3d      	cmp	r3, #61	; 0x3d
 80010fa:	dc53      	bgt.n	80011a4 <main+0x14c>
 80010fc:	2b18      	cmp	r3, #24
 80010fe:	db6c      	blt.n	80011da <main+0x182>
 8001100:	3b18      	subs	r3, #24
 8001102:	2b25      	cmp	r3, #37	; 0x25
 8001104:	d869      	bhi.n	80011da <main+0x182>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <main+0xb4>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	080011b3 	.word	0x080011b3
 8001110:	080011db 	.word	0x080011db
 8001114:	080011db 	.word	0x080011db
 8001118:	080011db 	.word	0x080011db
 800111c:	080011cb 	.word	0x080011cb
 8001120:	080011db 	.word	0x080011db
 8001124:	080011db 	.word	0x080011db
 8001128:	080011db 	.word	0x080011db
 800112c:	080011bb 	.word	0x080011bb
 8001130:	080011db 	.word	0x080011db
 8001134:	080011db 	.word	0x080011db
 8001138:	080011db 	.word	0x080011db
 800113c:	080011db 	.word	0x080011db
 8001140:	080011db 	.word	0x080011db
 8001144:	080011db 	.word	0x080011db
 8001148:	080011db 	.word	0x080011db
 800114c:	080011db 	.word	0x080011db
 8001150:	080011ab 	.word	0x080011ab
 8001154:	080011db 	.word	0x080011db
 8001158:	080011db 	.word	0x080011db
 800115c:	080011db 	.word	0x080011db
 8001160:	080011db 	.word	0x080011db
 8001164:	080011db 	.word	0x080011db
 8001168:	080011db 	.word	0x080011db
 800116c:	080011db 	.word	0x080011db
 8001170:	080011db 	.word	0x080011db
 8001174:	080011db 	.word	0x080011db
 8001178:	080011db 	.word	0x080011db
 800117c:	080011db 	.word	0x080011db
 8001180:	080011db 	.word	0x080011db
 8001184:	080011db 	.word	0x080011db
 8001188:	080011db 	.word	0x080011db
 800118c:	080011db 	.word	0x080011db
 8001190:	080011db 	.word	0x080011db
 8001194:	080011db 	.word	0x080011db
 8001198:	080011db 	.word	0x080011db
 800119c:	080011db 	.word	0x080011db
 80011a0:	080011c3 	.word	0x080011c3
 80011a4:	2b6a      	cmp	r3, #106	; 0x6a
 80011a6:	d014      	beq.n	80011d2 <main+0x17a>
 80011a8:	e017      	b.n	80011da <main+0x182>
	  {
	  	  case 0x29:
	  		printf("TOF sensor found!\r\n");
 80011aa:	485d      	ldr	r0, [pc, #372]	; (8001320 <main+0x2c8>)
 80011ac:	f016 f968 	bl	8017480 <puts>
	  		break;
 80011b0:	e013      	b.n	80011da <main+0x182>
	  	  case 0x18:
	  		printf("Temperature sensor found!\r\n");
 80011b2:	485c      	ldr	r0, [pc, #368]	; (8001324 <main+0x2cc>)
 80011b4:	f016 f964 	bl	8017480 <puts>
	  		break;
 80011b8:	e00f      	b.n	80011da <main+0x182>
	  	  case 0x20:
	  		printf("IO Expander found!\r\n");
 80011ba:	485b      	ldr	r0, [pc, #364]	; (8001328 <main+0x2d0>)
 80011bc:	f016 f960 	bl	8017480 <puts>
	  		break;
 80011c0:	e00b      	b.n	80011da <main+0x182>
	  	  case 0x3D:
	  		printf("OLED Display found!\r\n");
 80011c2:	485a      	ldr	r0, [pc, #360]	; (800132c <main+0x2d4>)
 80011c4:	f016 f95c 	bl	8017480 <puts>
	  		break;
 80011c8:	e007      	b.n	80011da <main+0x182>
	  	  case 0x1C:
	  		printf("Gyroscope sensor found!\r\n");
 80011ca:	4859      	ldr	r0, [pc, #356]	; (8001330 <main+0x2d8>)
 80011cc:	f016 f958 	bl	8017480 <puts>
	  		break;
 80011d0:	e003      	b.n	80011da <main+0x182>
	  	  case 0x6A:
	  		printf("Magnet sensor found!\r\n");
 80011d2:	4858      	ldr	r0, [pc, #352]	; (8001334 <main+0x2dc>)
 80011d4:	f016 f954 	bl	8017480 <puts>
	  		break;
 80011d8:	bf00      	nop
  for (int i=0; i<devCnt; i++)
 80011da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011dc:	3301      	adds	r3, #1
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
 80011e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e6:	429a      	cmp	r2, r3
 80011e8:	db82      	blt.n	80010f0 <main+0x98>
	  }

  }
  printf("\r\n");
 80011ea:	484a      	ldr	r0, [pc, #296]	; (8001314 <main+0x2bc>)
 80011ec:	f016 f948 	bl	8017480 <puts>

  SSD1306_Init();
 80011f0:	f001 f88c 	bl	800230c <SSD1306_Init>
  //init_adxl343();

  //init_vl53l3cx();

  // Print the FHGR logo to the Display
  SSD1306_DrawBitmap(32, 0,FHGR_LOGO_SW, 64, 64, 1); // Print the logo to the left
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2340      	movs	r3, #64	; 0x40
 80011fe:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <main+0x2e0>)
 8001200:	2100      	movs	r1, #0
 8001202:	2020      	movs	r0, #32
 8001204:	f001 f81a 	bl	800223c <SSD1306_DrawBitmap>
  //SSD1306_DrawBitmap(64, 0,HERZ_PULS, 64, 64, 1);	// Pront the heart to the right
  SSD1306_UpdateScreen();							// Update the screen
 8001208:	f001 f944 	bl	8002494 <SSD1306_UpdateScreen>
  //HAL_Delay(2000);
  //SSD1306_Clear();
  //HAL_Delay(5000);


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800120c:	2104      	movs	r1, #4
 800120e:	484b      	ldr	r0, [pc, #300]	; (800133c <main+0x2e4>)
 8001210:	f004 fad6 	bl	80057c0 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001214:	2100      	movs	r1, #0
 8001216:	484a      	ldr	r0, [pc, #296]	; (8001340 <main+0x2e8>)
 8001218:	f004 fad2 	bl	80057c0 <HAL_TIM_PWM_Start>
  //VL53LX_RdWord(Dev2, 0x010F, &wordData);
  //printf("VL53LX: %02X\n\r", wordData);



  accelMotor(100,1);
 800121c:	2101      	movs	r1, #1
 800121e:	2064      	movs	r0, #100	; 0x64
 8001220:	f001 fd12 	bl	8002c48 <accelMotor>

  HAL_Delay(2000);
 8001224:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001228:	f001 fdd8 	bl	8002ddc <HAL_Delay>

  stopMotor();
 800122c:	f001 fd46 	bl	8002cbc <stopMotor>

  htim3.Instance->CCR2 = 47;
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <main+0x2e4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	222f      	movs	r2, #47	; 0x2f
 8001236:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_Delay(2000);
 8001238:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800123c:	f001 fdce 	bl	8002ddc <HAL_Delay>

  htim3.Instance->CCR2 = 90;
 8001240:	4b3e      	ldr	r3, [pc, #248]	; (800133c <main+0x2e4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	225a      	movs	r2, #90	; 0x5a
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
  //htim1.Instance->CCR2 = 90;

  HAL_Delay(2000);
 8001248:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800124c:	f001 fdc6 	bl	8002ddc <HAL_Delay>

  htim3.Instance->CCR2 = 72;
 8001250:	4b3a      	ldr	r3, [pc, #232]	; (800133c <main+0x2e4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2248      	movs	r2, #72	; 0x48
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
  //RangingLoop();

  TOF_SensorInit();
 8001258:	f015 fbfe 	bl	8016a58 <TOF_SensorInit>

  ioExp_init();
 800125c:	f001 fbfc 	bl	8002a58 <ioExp_init>

  printf("Press the User Button to start!!\r\n");
 8001260:	4838      	ldr	r0, [pc, #224]	; (8001344 <main+0x2ec>)
 8001262:	f016 f90d 	bl	8017480 <puts>

  SSD1306_Clear();
 8001266:	f001 fa76 	bl	8002756 <SSD1306_Clear>
  SSD1306_DrawBitmap(0, 0,FINGER, 64, 64, 1);
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2340      	movs	r3, #64	; 0x40
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <main+0x2f0>)
 8001276:	2100      	movs	r1, #0
 8001278:	2000      	movs	r0, #0
 800127a:	f000 ffdf 	bl	800223c <SSD1306_DrawBitmap>
  SSD1306_GotoXY(64, 5);
 800127e:	2105      	movs	r1, #5
 8001280:	2040      	movs	r0, #64	; 0x40
 8001282:	f001 f9ad 	bl	80025e0 <SSD1306_GotoXY>
  SSD1306_Puts("PLEASE", &Font_7x10, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	4930      	ldr	r1, [pc, #192]	; (800134c <main+0x2f4>)
 800128a:	4831      	ldr	r0, [pc, #196]	; (8001350 <main+0x2f8>)
 800128c:	f001 fa3e 	bl	800270c <SSD1306_Puts>
  SSD1306_GotoXY(64, 20);
 8001290:	2114      	movs	r1, #20
 8001292:	2040      	movs	r0, #64	; 0x40
 8001294:	f001 f9a4 	bl	80025e0 <SSD1306_GotoXY>
  SSD1306_Puts("PRESS", &Font_7x10, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	492c      	ldr	r1, [pc, #176]	; (800134c <main+0x2f4>)
 800129c:	482d      	ldr	r0, [pc, #180]	; (8001354 <main+0x2fc>)
 800129e:	f001 fa35 	bl	800270c <SSD1306_Puts>
  SSD1306_GotoXY(64, 35);
 80012a2:	2123      	movs	r1, #35	; 0x23
 80012a4:	2040      	movs	r0, #64	; 0x40
 80012a6:	f001 f99b 	bl	80025e0 <SSD1306_GotoXY>
  SSD1306_Puts("USER!", &Font_7x10, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	4927      	ldr	r1, [pc, #156]	; (800134c <main+0x2f4>)
 80012ae:	482a      	ldr	r0, [pc, #168]	; (8001358 <main+0x300>)
 80012b0:	f001 fa2c 	bl	800270c <SSD1306_Puts>
  SSD1306_GotoXY(64, 50);
 80012b4:	2132      	movs	r1, #50	; 0x32
 80012b6:	2040      	movs	r0, #64	; 0x40
 80012b8:	f001 f992 	bl	80025e0 <SSD1306_GotoXY>
  SSD1306_Puts("BUTTON!", &Font_7x10, 1);
 80012bc:	2201      	movs	r2, #1
 80012be:	4923      	ldr	r1, [pc, #140]	; (800134c <main+0x2f4>)
 80012c0:	4826      	ldr	r0, [pc, #152]	; (800135c <main+0x304>)
 80012c2:	f001 fa23 	bl	800270c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80012c6:	f001 f8e5 	bl	8002494 <SSD1306_UpdateScreen>

  while(ioExp_readPin(B1)==1)
 80012ca:	bf00      	nop
 80012cc:	2307      	movs	r3, #7
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fb9a 	bl	8002a08 <ioExp_readPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d0f8      	beq.n	80012cc <main+0x274>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	bluefruit_controller_update(&ctrl);
 80012da:	463b      	mov	r3, r7
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 ff17 	bl	8002110 <bluefruit_controller_update>

	//htim5.Instance->CCR1 = 0;



	TOF_Measurement();
 80012e2:	f015 fc23 	bl	8016b2c <TOF_Measurement>
	HAL_Delay(30);
 80012e6:	201e      	movs	r0, #30
 80012e8:	f001 fd78 	bl	8002ddc <HAL_Delay>
	bluefruit_controller_update(&ctrl);
 80012ec:	e7f5      	b.n	80012da <main+0x282>
 80012ee:	bf00      	nop
 80012f0:	200002bc 	.word	0x200002bc
 80012f4:	200001bc 	.word	0x200001bc
 80012f8:	20000244 	.word	0x20000244
 80012fc:	200002b8 	.word	0x200002b8
 8001300:	20000200 	.word	0x20000200
 8001304:	08000e81 	.word	0x08000e81
 8001308:	08000fdd 	.word	0x08000fdd
 800130c:	08018684 	.word	0x08018684
 8001310:	080186b0 	.word	0x080186b0
 8001314:	080186cc 	.word	0x080186cc
 8001318:	200002ac 	.word	0x200002ac
 800131c:	080186d0 	.word	0x080186d0
 8001320:	080186e4 	.word	0x080186e4
 8001324:	080186f8 	.word	0x080186f8
 8001328:	08018714 	.word	0x08018714
 800132c:	08018728 	.word	0x08018728
 8001330:	08018740 	.word	0x08018740
 8001334:	0801875c 	.word	0x0801875c
 8001338:	08018a08 	.word	0x08018a08
 800133c:	2000012c 	.word	0x2000012c
 8001340:	20000174 	.word	0x20000174
 8001344:	08018774 	.word	0x08018774
 8001348:	08018c08 	.word	0x08018c08
 800134c:	20000004 	.word	0x20000004
 8001350:	08018798 	.word	0x08018798
 8001354:	080187a0 	.word	0x080187a0
 8001358:	080187a8 	.word	0x080187a8
 800135c:	080187b0 	.word	0x080187b0

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f016 f9c0 	bl	80176f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <SystemClock_Config+0xd0>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a28      	ldr	r2, [pc, #160]	; (8001430 <SystemClock_Config+0xd0>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <SystemClock_Config+0xd0>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <SystemClock_Config+0xd4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <SystemClock_Config+0xd4>)
 80013ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <SystemClock_Config+0xd4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d4:	2310      	movs	r3, #16
 80013d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013de:	2304      	movs	r3, #4
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fca8 	bl	8004d40 <HAL_RCC_OscConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013f6:	f000 fa45 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	230f      	movs	r3, #15
 80013fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2302      	movs	r3, #2
 8001400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f003 ff0a 	bl	8005230 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001422:	f000 fa2f 	bl	8001884 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3750      	adds	r7, #80	; 0x50
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f002 fb9f 	bl	8003bb8 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 fa00 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000d8 	.word	0x200000d8
 800148c:	40005400 	.word	0x40005400
 8001490:	00061a80 	.word	0x00061a80

08001494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_TIM3_Init+0xe8>)
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <MX_TIM3_Init+0xec>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_TIM3_Init+0xe8>)
 80014cc:	f240 628f 	movw	r2, #1679	; 0x68f
 80014d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_TIM3_Init+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_TIM3_Init+0xe8>)
 80014da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_TIM3_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_TIM3_Init+0xe8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ec:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM3_Init+0xe8>)
 80014ee:	f004 f8bf 	bl	8005670 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014f8:	f000 f9c4 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM3_Init+0xe8>)
 800150a:	f004 facb 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001514:	f000 f9b6 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001518:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM3_Init+0xe8>)
 800151a:	f004 f8f8 	bl	800570e <HAL_TIM_PWM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001524:	f000 f9ae 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_TIM3_Init+0xe8>)
 8001538:	f004 fe48 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 f99f 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2204      	movs	r2, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM3_Init+0xe8>)
 800155e:	f004 f9df 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001568:	f000 f98c 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM3_Init+0xe8>)
 800156e:	f000 fa37 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000012c 	.word	0x2000012c
 8001580:	40000400 	.word	0x40000400

08001584 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <MX_TIM5_Init+0xe8>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42-1;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015bc:	2229      	movs	r2, #41	; 0x29
 80015be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015da:	4823      	ldr	r0, [pc, #140]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015dc:	f004 f848 	bl	8005670 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80015e6:	f000 f94d 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f4:	4619      	mov	r1, r3
 80015f6:	481c      	ldr	r0, [pc, #112]	; (8001668 <MX_TIM5_Init+0xe4>)
 80015f8:	f004 fa54 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001602:	f000 f93f 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <MX_TIM5_Init+0xe4>)
 8001608:	f004 f881 	bl	800570e <HAL_TIM_PWM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001612:	f000 f937 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <MX_TIM5_Init+0xe4>)
 8001626:	f004 fdd1 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001630:	f000 f928 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	; 0x60
 8001636:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <MX_TIM5_Init+0xe4>)
 800164c:	f004 f968 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001656:	f000 f915 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800165a:	4803      	ldr	r0, [pc, #12]	; (8001668 <MX_TIM5_Init+0xe4>)
 800165c:	f000 f9c0 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001660:	bf00      	nop
 8001662:	3738      	adds	r7, #56	; 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000174 	.word	0x20000174
 800166c:	40000c00 	.word	0x40000c00

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART1_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART1_UART_Init+0x4c>)
 80016a8:	f004 fdfe 	bl	80062a8 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f8e7 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001bc 	.word	0x200001bc
 80016c0:	40011000 	.word	0x40011000

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART2_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART2_UART_Init+0x4c>)
 80016fc:	f004 fdd4 	bl	80062a8 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f8bd 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000200 	.word	0x20000200
 8001714:	40004400 	.word	0x40004400

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_DMA_Init+0x3c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <MX_DMA_Init+0x3c>)
 8001728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_DMA_Init+0x3c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	203a      	movs	r0, #58	; 0x3a
 8001740:	f001 fc4b 	bl	8002fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001744:	203a      	movs	r0, #58	; 0x3a
 8001746:	f001 fc64 	bl	8003012 <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <MX_GPIO_Init+0xfc>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a37      	ldr	r2, [pc, #220]	; (8001854 <MX_GPIO_Init+0xfc>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <MX_GPIO_Init+0xfc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_GPIO_Init+0xfc>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <MX_GPIO_Init+0xfc>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_GPIO_Init+0xfc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_GPIO_Init+0xfc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|M3_IN2_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2103      	movs	r1, #3
 80017e2:	481d      	ldr	r0, [pc, #116]	; (8001858 <MX_GPIO_Init+0x100>)
 80017e4:	f002 f9b6 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <MX_GPIO_Init+0x100>)
 8001800:	f002 f824 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 M3_IN2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|M3_IN2_Pin;
 8001804:	2303      	movs	r3, #3
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <MX_GPIO_Init+0x100>)
 800181c:	f002 f816 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_TOF_INT_Pin */
  GPIO_InitStruct.Pin = ST_TOF_INT_Pin;
 8001820:	2310      	movs	r3, #16
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001824:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_TOF_INT_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <MX_GPIO_Init+0x104>)
 8001836:	f002 f809 	bl	800384c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	200a      	movs	r0, #10
 8001840:	f001 fbcb 	bl	8002fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001844:	200a      	movs	r0, #10
 8001846:	f001 fbe4 	bl	8003012 <HAL_NVIC_EnableIRQ>

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40020000 	.word	0x40020000

08001860 <__io_putchar>:
* @brief Retargets the C library printf function to the USART.
* @param None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
{
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
}
else
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001868:	1d39      	adds	r1, r7, #4
 800186a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186e:	2201      	movs	r2, #1
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <__io_putchar+0x20>)
 8001872:	f004 fd66 	bl	8006342 <HAL_UART_Transmit>
}

return ch;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000200 	.word	0x20000200

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ce:	2007      	movs	r0, #7
 80018d0:	f001 fb78 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_I2C_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12c      	bne.n	800195c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_I2C_MspInit+0x88>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001930:	2304      	movs	r3, #4
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <HAL_I2C_MspInit+0x8c>)
 800193c:	f001 ff86 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_I2C_MspInit+0x88>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10e      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800199e:	e012      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_TIM_Base_MspInit+0x6c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40000c00 	.word	0x40000c00

080019e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <HAL_TIM_MspPostInit+0xb0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4817      	ldr	r0, [pc, #92]	; (8001a98 <HAL_TIM_MspPostInit+0xb8>)
 8001a3a:	f001 ff07 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a3e:	e022      	b.n	8001a86 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIM_MspPostInit+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d11d      	bne.n	8001a86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a66:	2301      	movs	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a76:	2302      	movs	r3, #2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_TIM_MspPostInit+0xb8>)
 8001a82:	f001 fee3 	bl	800384c <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40000c00 	.word	0x40000c00

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_UART_MspInit+0x154>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d163      	bne.n	8001b8a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a4b      	ldr	r2, [pc, #300]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 8001afa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4839      	ldr	r0, [pc, #228]	; (8001bfc <HAL_UART_MspInit+0x15c>)
 8001b18:	f001 fe98 	bl	800384c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b1e:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <HAL_UART_MspInit+0x164>)
 8001b20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b5e:	f001 fa73 	bl	8003048 <HAL_DMA_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b68:	f7ff fe8c 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a24      	ldr	r2, [pc, #144]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <HAL_UART_MspInit+0x160>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2025      	movs	r0, #37	; 0x25
 8001b7e:	f001 fa2c 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b82:	2025      	movs	r0, #37	; 0x25
 8001b84:	f001 fa45 	bl	8003012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b88:	e030      	b.n	8001bec <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_UART_MspInit+0x168>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d12b      	bne.n	8001bec <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_UART_MspInit+0x158>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001bcc:	230c      	movs	r3, #12
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_UART_MspInit+0x15c>)
 8001be8:	f001 fe30 	bl	800384c <HAL_GPIO_Init>
}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	20000244 	.word	0x20000244
 8001c04:	40026440 	.word	0x40026440
 8001c08:	40004400 	.word	0x40004400

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f001 f8a0 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_TOF_INT_Pin);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f001 ff8f 	bl	8003b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <USART1_IRQHandler+0x10>)
 8001c76:	f004 fc5b 	bl	8006530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001bc 	.word	0x200001bc

08001c84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream2_IRQHandler+0x10>)
 8001c8a:	f001 fb75 	bl	8003378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000244 	.word	0x20000244

08001c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e00a      	b.n	8001cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001caa:	f3af 8000 	nop.w
 8001cae:	4601      	mov	r1, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	b2ca      	uxtb	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf0      	blt.n	8001caa <_read+0x12>
  }

  return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e009      	b.n	8001cf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fdb7 	bl	8001860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf1      	blt.n	8001ce4 <_write+0x12>
  }
  return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_close>:

int _close(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	605a      	str	r2, [r3, #4]
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_isatty>:

int _isatty(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f015 fd08 	bl	80177b8 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20018000 	.word	0x20018000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200002c8 	.word	0x200002c8
 8001ddc:	200033a8 	.word	0x200033a8

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e20:	4c0b      	ldr	r4, [pc, #44]	; (8001e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ffd7 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f015 fcc7 	bl	80177c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff f90f 	bl	8001058 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001e48:	0801b668 	.word	0x0801b668
  ldr r2, =_sbss
 8001e4c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001e50:	200033a4 	.word	0x200033a4

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <bluefruit_controller_command_query>:
		{ 'G', 12, handle_gyroscope_raw },
};

static int bluefruit_controller_command_query(uint8_t shortcut,
		size_t *num_data_bytes, void (**handler)(bluefruit_event_handlers *handlers, uint8_t *))
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < bluefruit_controller_num_commands; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e025      	b.n	8001eb8 <bluefruit_controller_command_query+0x60>
	{
		if (bluefruit_controller_commands[i].shortcut == shortcut)
 8001e6c:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <bluefruit_controller_command_query+0x78>)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d117      	bne.n	8001eb2 <bluefruit_controller_command_query+0x5a>
		{
			*num_data_bytes = bluefruit_controller_commands[i].num_data_bytes;
 8001e82:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <bluefruit_controller_command_query+0x78>)
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3304      	adds	r3, #4
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	601a      	str	r2, [r3, #0]
			*handler = bluefruit_controller_commands[i].handler;
 8001e98:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <bluefruit_controller_command_query+0x78>)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
			return 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e008      	b.n	8001ec4 <bluefruit_controller_command_query+0x6c>
	for (size_t i = 0; i < bluefruit_controller_num_commands; i++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d3d5      	bcc.n	8001e6c <bluefruit_controller_command_query+0x14>
		}
	}
	return -1;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	080189f0 	.word	0x080189f0

08001ed4 <bluefruit_controller_status_reset>:
static const size_t bluefruit_controller_max_bytes_per_update = 5;



static void bluefruit_controller_status_reset(bluefruit_controller_status *status)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	status->state = BLUEFRUIT_CONTROLLER_STATE_SKIP;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
	memset(status->buffer, BLUEFRUIT_CONTROLLER_BUF_NUMBYTES, sizeof(uint8_t));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2114      	movs	r1, #20
 8001eea:	4618      	mov	r0, r3
 8001eec:	f015 fc02 	bl	80176f4 <memset>
	status->buffer_num_bytes = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
	status->num_data_bytes = 0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
	status->handler = NULL;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <bluefruit_controller_status_add_byte>:



static void bluefruit_controller_status_add_byte(bluefruit_controller_status *status, uint8_t value)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
	if (status->buffer_num_bytes >= BLUEFRUIT_CONTROLLER_BUF_NUMBYTES)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b13      	cmp	r3, #19
 8001f1e:	d904      	bls.n	8001f2a <bluefruit_controller_status_add_byte+0x1e>
	{
		DEBUG_LOG("Bluefruit controller: Buffer size (%i) exceeded\n",
 8001f20:	2114      	movs	r1, #20
 8001f22:	4809      	ldr	r0, [pc, #36]	; (8001f48 <bluefruit_controller_status_add_byte+0x3c>)
 8001f24:	f000 f95a 	bl	80021dc <debug_log>
				BLUEFRUIT_CONTROLLER_BUF_NUMBYTES);
		while (1);
 8001f28:	e7fe      	b.n	8001f28 <bluefruit_controller_status_add_byte+0x1c>
	}
	status->buffer[status->buffer_num_bytes] = value;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	705a      	strb	r2, [r3, #1]
	status->buffer_num_bytes++;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	080187b8 	.word	0x080187b8

08001f4c <bluefruit_controller_status_crc_okay>:



static int bluefruit_controller_status_crc_okay(bluefruit_controller_status *status)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	// Calculate sum over all bytes in buffer except CRC
	uint8_t sum = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < (status->buffer_num_bytes - 1); i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e00a      	b.n	8001f74 <bluefruit_controller_status_crc_okay+0x28>
	{
		sum += status->buffer[i];
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	3301      	adds	r3, #1
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < (status->buffer_num_bytes - 1); i++)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8ee      	bhi.n	8001f5e <bluefruit_controller_status_crc_okay+0x12>
	}
	// CRC must match the bitwise inverse of the sum
	uint8_t crc = status->buffer[status->buffer_num_bytes - 1];
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	73fb      	strb	r3, [r7, #15]
	return crc == (~sum & 0xff);
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	429a      	cmp	r2, r3
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <bluefruit_event_handlers_reset>:



static void bluefruit_event_handlers_reset(bluefruit_event_handlers *handlers)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	handlers->handle_buttons = NULL;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
	handlers->handle_gyroscope = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <bluefruit_controller_init>:



void bluefruit_controller_init(bluefruit_controller *ctrl, UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	ctrl->huart = huart;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]
	bluefruit_controller_status_reset(&ctrl->status);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff77 	bl	8001ed4 <bluefruit_controller_status_reset>
	bluefruit_event_handlers_reset(&ctrl->handlers);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3328      	adds	r3, #40	; 0x28
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ffde 	bl	8001fac <bluefruit_event_handlers_reset>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <bluefruit_controller_update_byte>:



static void bluefruit_controller_update_byte(bluefruit_controller *ctrl, uint8_t value)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	//DEBUG_LOG("Controller status update: State %i, value %c (%02x)\n", ctrl->status.state, value, value);
	switch (ctrl->status.state)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d878      	bhi.n	80020fe <bluefruit_controller_update_byte+0x106>
 800200c:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <bluefruit_controller_update_byte+0x1c>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002025 	.word	0x08002025
 8002018:	0800204b 	.word	0x0800204b
 800201c:	08002093 	.word	0x08002093
 8002020:	080020b7 	.word	0x080020b7
	{
		case BLUEFRUIT_CONTROLLER_STATE_SKIP:
		{
			if (value == '!')
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	2b21      	cmp	r3, #33	; 0x21
 8002028:	d166      	bne.n	80020f8 <bluefruit_controller_update_byte+0x100>
			{
				bluefruit_controller_status_reset(&ctrl->status);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff50 	bl	8001ed4 <bluefruit_controller_status_reset>
				bluefruit_controller_status_add_byte(&ctrl->status, value);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff65 	bl	8001f0c <bluefruit_controller_status_add_byte>
				ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_COMMAND;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	711a      	strb	r2, [r3, #4]
			}
			break;
 8002048:	e056      	b.n	80020f8 <bluefruit_controller_update_byte+0x100>
		}
		case BLUEFRUIT_CONTROLLER_STATE_COMMAND:
		{
			// Get number of data bytes and handler for current command
			int ret = bluefruit_controller_command_query(value,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0120 	add.w	r1, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fefd 	bl	8001e58 <bluefruit_controller_command_query>
 800205e:	60f8      	str	r0, [r7, #12]
					&ctrl->status.num_data_bytes, &ctrl->status.handler);
			if (ret == -1)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d109      	bne.n	800207c <bluefruit_controller_update_byte+0x84>
			{
				DEBUG_LOG("Bluefruit controller: Unknown command '%c' (%02x)\r\n", value, value);
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4619      	mov	r1, r3
 800206e:	4826      	ldr	r0, [pc, #152]	; (8002108 <bluefruit_controller_update_byte+0x110>)
 8002070:	f000 f8b4 	bl	80021dc <debug_log>
				ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_SKIP;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	711a      	strb	r2, [r3, #4]
			else
			{
				bluefruit_controller_status_add_byte(&ctrl->status, value);
				ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_DATA;
			}
			break;
 800207a:	e040      	b.n	80020fe <bluefruit_controller_update_byte+0x106>
				bluefruit_controller_status_add_byte(&ctrl->status, value);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff41 	bl	8001f0c <bluefruit_controller_status_add_byte>
				ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_DATA;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	711a      	strb	r2, [r3, #4]
			break;
 8002090:	e035      	b.n	80020fe <bluefruit_controller_update_byte+0x106>
		}
		case BLUEFRUIT_CONTROLLER_STATE_DATA:
		{
			bluefruit_controller_status_add_byte(&ctrl->status, value);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff36 	bl	8001f0c <bluefruit_controller_status_add_byte>
			// Buffer already contains '!' and command byte
			if (ctrl->status.buffer_num_bytes == (ctrl->status.num_data_bytes + 2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	3302      	adds	r3, #2
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d126      	bne.n	80020fc <bluefruit_controller_update_byte+0x104>
			{
				ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_CRC;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	711a      	strb	r2, [r3, #4]
			}
			break;
 80020b4:	e022      	b.n	80020fc <bluefruit_controller_update_byte+0x104>
		}
		case BLUEFRUIT_CONTROLLER_STATE_CRC:
		{
			bluefruit_controller_status_add_byte(&ctrl->status, value);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff24 	bl	8001f0c <bluefruit_controller_status_add_byte>
			if (bluefruit_controller_status_crc_okay(&ctrl->status))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3304      	adds	r3, #4
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff3f 	bl	8001f4c <bluefruit_controller_status_crc_okay>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <bluefruit_controller_update_byte+0xf0>
			{
				ctrl->status.handler(&ctrl->handlers, &ctrl->status.buffer[2]);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	f102 0028 	add.w	r0, r2, #40	; 0x28
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	3207      	adds	r2, #7
 80020e2:	4611      	mov	r1, r2
 80020e4:	4798      	blx	r3
 80020e6:	e003      	b.n	80020f0 <bluefruit_controller_update_byte+0xf8>
			}
			else
			{
				DEBUG_LOG("Bluefruit controller: CRC error\n", NULL);
 80020e8:	2100      	movs	r1, #0
 80020ea:	4808      	ldr	r0, [pc, #32]	; (800210c <bluefruit_controller_update_byte+0x114>)
 80020ec:	f000 f876 	bl	80021dc <debug_log>
			}
			ctrl->status.state = BLUEFRUIT_CONTROLLER_STATE_SKIP;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	711a      	strb	r2, [r3, #4]
			break;
 80020f6:	e002      	b.n	80020fe <bluefruit_controller_update_byte+0x106>
			break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <bluefruit_controller_update_byte+0x106>
			break;
 80020fc:	bf00      	nop
		}
	}
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	080187ec 	.word	0x080187ec
 800210c:	08018820 	.word	0x08018820

08002110 <bluefruit_controller_update>:



void bluefruit_controller_update(bluefruit_controller *ctrl)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	if(rxIntCount)
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <bluefruit_controller_update+0x4c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d019      	beq.n	8002154 <bluefruit_controller_update+0x44>
	{
		for (size_t i = 0; i < bluefruit_controller_max_bytes_per_update; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00a      	b.n	800213c <bluefruit_controller_update+0x2c>
					//1, timeoutMilliseconds);
			//if (retval == HAL_OK)
			//{
	//			DEBUG_LOG("Data: %c (%02x)\n", value, value);
				//bluefruit_controller_update_byte(ctrl, value);
				bluefruit_controller_update_byte(ctrl, RxBuf[i]);
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <bluefruit_controller_update+0x50>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff61 	bl	8001ff8 <bluefruit_controller_update_byte>
		for (size_t i = 0; i < bluefruit_controller_max_bytes_per_update; i++)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	2205      	movs	r2, #5
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4293      	cmp	r3, r2
 8002142:	d3f0      	bcc.n	8002126 <bluefruit_controller_update+0x16>
			//}
		}
		rxIntCount = 0;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <bluefruit_controller_update+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, 10);
 800214a:	220a      	movs	r2, #10
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <bluefruit_controller_update+0x50>)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <bluefruit_controller_update+0x54>)
 8002150:	f004 f989 	bl	8006466 <HAL_UARTEx_ReceiveToIdle_DMA>

	}

}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200002a8 	.word	0x200002a8
 8002160:	200002bc 	.word	0x200002bc
 8002164:	200001bc 	.word	0x200001bc

08002168 <handle_buttons_raw>:



void handle_buttons_raw(bluefruit_event_handlers *handlers, uint8_t *data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	int number = data[0] - '0';
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3b30      	subs	r3, #48	; 0x30
 8002178:	60fb      	str	r3, [r7, #12]
	int is_pressed = data[1] - '0';
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3b30      	subs	r3, #48	; 0x30
 8002182:	60bb      	str	r3, [r7, #8]
	if (handlers->handle_buttons != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <handle_buttons_raw+0x2e>
	{
		handlers->handle_buttons(number, is_pressed);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	4798      	blx	r3
	}
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <handle_gyroscope_raw>:



void handle_gyroscope_raw(bluefruit_event_handlers *handlers, uint8_t *data)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
	float x = *((float *)&data[0]);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
	float y = *((float *)&data[4]);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	613b      	str	r3, [r7, #16]
	float z = *((float *)&data[8]);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	60fb      	str	r3, [r7, #12]
	if (handlers->handle_gyroscope != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <handle_gyroscope_raw+0x36>
	{
		handlers->handle_gyroscope(x, y, z);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	ed97 1a03 	vldr	s2, [r7, #12]
 80021ca:	edd7 0a04 	vldr	s1, [r7, #16]
 80021ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80021d2:	4798      	blx	r3
	}
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <debug_log>:
extern UART_HandleTypeDef *debug_log_huart;



void debug_log(const char *format, ...)
{
 80021dc:	b40f      	push	{r0, r1, r2, r3}
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80021e4:	af00      	add	r7, sp, #0
	if (debug_log_huart == NULL)
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <debug_log+0x5c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01b      	beq.n	8002226 <debug_log+0x4a>
		return;

	va_list args;
	va_start(args, format);
 80021ee:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80021f2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	char message[DEBUG_LOG_BUFFER_SIZE];
	vsnprintf(message, DEBUG_LOG_BUFFER_SIZE, format, args);
 80021f6:	1d38      	adds	r0, r7, #4
 80021f8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80021fc:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002204:	f015 f9d2 	bl	80175ac <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(debug_log_huart,
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <debug_log+0x5c>)
 800220a:	681c      	ldr	r4, [r3, #0]
		(uint8_t *)message, strlen(message), 1000);
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd ffe6 	bl	80001e0 <strlen>
 8002214:	4603      	mov	r3, r0
	HAL_UART_Transmit(debug_log_huart,
 8002216:	b29a      	uxth	r2, r3
 8002218:	1d39      	adds	r1, r7, #4
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	4620      	mov	r0, r4
 8002220:	f004 f88f 	bl	8006342 <HAL_UART_Transmit>
 8002224:	e000      	b.n	8002228 <debug_log+0x4c>
		return;
 8002226:	bf00      	nop
}
 8002228:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002232:	b004      	add	sp, #16
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200002b8 	.word	0x200002b8

0800223c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60ba      	str	r2, [r7, #8]
 8002244:	461a      	mov	r2, r3
 8002246:	4603      	mov	r3, r0
 8002248:	81fb      	strh	r3, [r7, #14]
 800224a:	460b      	mov	r3, r1
 800224c:	81bb      	strh	r3, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002256:	3307      	adds	r3, #7
 8002258:	2b00      	cmp	r3, #0
 800225a:	da00      	bge.n	800225e <SSD1306_DrawBitmap+0x22>
 800225c:	3307      	adds	r3, #7
 800225e:	10db      	asrs	r3, r3, #3
 8002260:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002266:	2300      	movs	r3, #0
 8002268:	82bb      	strh	r3, [r7, #20]
 800226a:	e044      	b.n	80022f6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	827b      	strh	r3, [r7, #18]
 8002270:	e02f      	b.n	80022d2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002272:	8a7b      	ldrh	r3, [r7, #18]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
 8002282:	e012      	b.n	80022aa <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002284:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002288:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800228c:	fb03 f202 	mul.w	r2, r3, r2
 8002290:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da00      	bge.n	800229a <SSD1306_DrawBitmap+0x5e>
 8002298:	3307      	adds	r3, #7
 800229a:	10db      	asrs	r3, r3, #3
 800229c:	b21b      	sxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80022aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da09      	bge.n	80022c6 <SSD1306_DrawBitmap+0x8a>
 80022b2:	89fa      	ldrh	r2, [r7, #14]
 80022b4:	8a7b      	ldrh	r3, [r7, #18]
 80022b6:	4413      	add	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	89b9      	ldrh	r1, [r7, #12]
 80022bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f92d 	bl	8002520 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80022c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	827b      	strh	r3, [r7, #18]
 80022d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbc9      	blt.n	8002272 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80022de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	82bb      	strh	r3, [r7, #20]
 80022ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	81bb      	strh	r3, [r7, #12]
 80022f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80022fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbb4      	blt.n	800226c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002312:	f000 fa29 	bl	8002768 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002316:	f644 6320 	movw	r3, #20000	; 0x4e20
 800231a:	2201      	movs	r2, #1
 800231c:	217a      	movs	r1, #122	; 0x7a
 800231e:	485b      	ldr	r0, [pc, #364]	; (800248c <SSD1306_Init+0x180>)
 8002320:	f002 f8b2 	bl	8004488 <HAL_I2C_IsDeviceReady>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e0a9      	b.n	8002482 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800232e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002332:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002334:	e002      	b.n	800233c <SSD1306_Init+0x30>
		p--;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3b01      	subs	r3, #1
 800233a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002342:	22ae      	movs	r2, #174	; 0xae
 8002344:	2100      	movs	r1, #0
 8002346:	207a      	movs	r0, #122	; 0x7a
 8002348:	f000 fa8a 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800234c:	2220      	movs	r2, #32
 800234e:	2100      	movs	r1, #0
 8002350:	207a      	movs	r0, #122	; 0x7a
 8002352:	f000 fa85 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002356:	2210      	movs	r2, #16
 8002358:	2100      	movs	r1, #0
 800235a:	207a      	movs	r0, #122	; 0x7a
 800235c:	f000 fa80 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002360:	22b0      	movs	r2, #176	; 0xb0
 8002362:	2100      	movs	r1, #0
 8002364:	207a      	movs	r0, #122	; 0x7a
 8002366:	f000 fa7b 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800236a:	22c8      	movs	r2, #200	; 0xc8
 800236c:	2100      	movs	r1, #0
 800236e:	207a      	movs	r0, #122	; 0x7a
 8002370:	f000 fa76 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	207a      	movs	r0, #122	; 0x7a
 800237a:	f000 fa71 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800237e:	2210      	movs	r2, #16
 8002380:	2100      	movs	r1, #0
 8002382:	207a      	movs	r0, #122	; 0x7a
 8002384:	f000 fa6c 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	2100      	movs	r1, #0
 800238c:	207a      	movs	r0, #122	; 0x7a
 800238e:	f000 fa67 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002392:	2281      	movs	r2, #129	; 0x81
 8002394:	2100      	movs	r1, #0
 8002396:	207a      	movs	r0, #122	; 0x7a
 8002398:	f000 fa62 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	2100      	movs	r1, #0
 80023a0:	207a      	movs	r0, #122	; 0x7a
 80023a2:	f000 fa5d 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80023a6:	22a1      	movs	r2, #161	; 0xa1
 80023a8:	2100      	movs	r1, #0
 80023aa:	207a      	movs	r0, #122	; 0x7a
 80023ac:	f000 fa58 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80023b0:	22a6      	movs	r2, #166	; 0xa6
 80023b2:	2100      	movs	r1, #0
 80023b4:	207a      	movs	r0, #122	; 0x7a
 80023b6:	f000 fa53 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80023ba:	22a8      	movs	r2, #168	; 0xa8
 80023bc:	2100      	movs	r1, #0
 80023be:	207a      	movs	r0, #122	; 0x7a
 80023c0:	f000 fa4e 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80023c4:	223f      	movs	r2, #63	; 0x3f
 80023c6:	2100      	movs	r1, #0
 80023c8:	207a      	movs	r0, #122	; 0x7a
 80023ca:	f000 fa49 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023ce:	22a4      	movs	r2, #164	; 0xa4
 80023d0:	2100      	movs	r1, #0
 80023d2:	207a      	movs	r0, #122	; 0x7a
 80023d4:	f000 fa44 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80023d8:	22d3      	movs	r2, #211	; 0xd3
 80023da:	2100      	movs	r1, #0
 80023dc:	207a      	movs	r0, #122	; 0x7a
 80023de:	f000 fa3f 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	207a      	movs	r0, #122	; 0x7a
 80023e8:	f000 fa3a 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80023ec:	22d5      	movs	r2, #213	; 0xd5
 80023ee:	2100      	movs	r1, #0
 80023f0:	207a      	movs	r0, #122	; 0x7a
 80023f2:	f000 fa35 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80023f6:	22f0      	movs	r2, #240	; 0xf0
 80023f8:	2100      	movs	r1, #0
 80023fa:	207a      	movs	r0, #122	; 0x7a
 80023fc:	f000 fa30 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002400:	22d9      	movs	r2, #217	; 0xd9
 8002402:	2100      	movs	r1, #0
 8002404:	207a      	movs	r0, #122	; 0x7a
 8002406:	f000 fa2b 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800240a:	2222      	movs	r2, #34	; 0x22
 800240c:	2100      	movs	r1, #0
 800240e:	207a      	movs	r0, #122	; 0x7a
 8002410:	f000 fa26 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002414:	22da      	movs	r2, #218	; 0xda
 8002416:	2100      	movs	r1, #0
 8002418:	207a      	movs	r0, #122	; 0x7a
 800241a:	f000 fa21 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800241e:	2212      	movs	r2, #18
 8002420:	2100      	movs	r1, #0
 8002422:	207a      	movs	r0, #122	; 0x7a
 8002424:	f000 fa1c 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002428:	22db      	movs	r2, #219	; 0xdb
 800242a:	2100      	movs	r1, #0
 800242c:	207a      	movs	r0, #122	; 0x7a
 800242e:	f000 fa17 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002432:	2220      	movs	r2, #32
 8002434:	2100      	movs	r1, #0
 8002436:	207a      	movs	r0, #122	; 0x7a
 8002438:	f000 fa12 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800243c:	228d      	movs	r2, #141	; 0x8d
 800243e:	2100      	movs	r1, #0
 8002440:	207a      	movs	r0, #122	; 0x7a
 8002442:	f000 fa0d 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002446:	2214      	movs	r2, #20
 8002448:	2100      	movs	r1, #0
 800244a:	207a      	movs	r0, #122	; 0x7a
 800244c:	f000 fa08 	bl	8002860 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002450:	22af      	movs	r2, #175	; 0xaf
 8002452:	2100      	movs	r1, #0
 8002454:	207a      	movs	r0, #122	; 0x7a
 8002456:	f000 fa03 	bl	8002860 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800245a:	222e      	movs	r2, #46	; 0x2e
 800245c:	2100      	movs	r1, #0
 800245e:	207a      	movs	r0, #122	; 0x7a
 8002460:	f000 f9fe 	bl	8002860 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002464:	2000      	movs	r0, #0
 8002466:	f000 f843 	bl	80024f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800246a:	f000 f813 	bl	8002494 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <SSD1306_Init+0x184>)
 8002470:	2200      	movs	r2, #0
 8002472:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <SSD1306_Init+0x184>)
 8002476:	2200      	movs	r2, #0
 8002478:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SSD1306_Init+0x184>)
 800247c:	2201      	movs	r2, #1
 800247e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200000d8 	.word	0x200000d8
 8002490:	200006cc 	.word	0x200006cc

08002494 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800249a:	2300      	movs	r3, #0
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	e01d      	b.n	80024dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	3b50      	subs	r3, #80	; 0x50
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	2100      	movs	r1, #0
 80024aa:	207a      	movs	r0, #122	; 0x7a
 80024ac:	f000 f9d8 	bl	8002860 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	207a      	movs	r0, #122	; 0x7a
 80024b6:	f000 f9d3 	bl	8002860 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80024ba:	2210      	movs	r2, #16
 80024bc:	2100      	movs	r1, #0
 80024be:	207a      	movs	r0, #122	; 0x7a
 80024c0:	f000 f9ce 	bl	8002860 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	01db      	lsls	r3, r3, #7
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <SSD1306_UpdateScreen+0x58>)
 80024ca:	441a      	add	r2, r3
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	207a      	movs	r0, #122	; 0x7a
 80024d2:	f000 f95f 	bl	8002794 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	3301      	adds	r3, #1
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d9de      	bls.n	80024a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200002cc 	.word	0x200002cc

080024f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <SSD1306_Fill+0x14>
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <SSD1306_Fill+0x16>
 8002504:	23ff      	movs	r3, #255	; 0xff
 8002506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250a:	4619      	mov	r1, r3
 800250c:	4803      	ldr	r0, [pc, #12]	; (800251c <SSD1306_Fill+0x2c>)
 800250e:	f015 f8f1 	bl	80176f4 <memset>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200002cc 	.word	0x200002cc

08002520 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	460b      	mov	r3, r1
 800252c:	80bb      	strh	r3, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	70fb      	strb	r3, [r7, #3]
	if (
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b7f      	cmp	r3, #127	; 0x7f
 8002536:	d848      	bhi.n	80025ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002538:	88bb      	ldrh	r3, [r7, #4]
 800253a:	2b3f      	cmp	r3, #63	; 0x3f
 800253c:	d845      	bhi.n	80025ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <SSD1306_DrawPixel+0xb8>)
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d11a      	bne.n	8002590 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	b298      	uxth	r0, r3
 8002562:	4603      	mov	r3, r0
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	4413      	add	r3, r2
 8002568:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <SSD1306_DrawPixel+0xbc>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	b25a      	sxtb	r2, r3
 800256e:	88bb      	ldrh	r3, [r7, #4]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	b25b      	sxtb	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b259      	sxtb	r1, r3
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	4603      	mov	r3, r0
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	4413      	add	r3, r2
 8002588:	b2c9      	uxtb	r1, r1
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <SSD1306_DrawPixel+0xbc>)
 800258c:	54d1      	strb	r1, [r2, r3]
 800258e:	e01d      	b.n	80025cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	b298      	uxth	r0, r3
 8002598:	4603      	mov	r3, r0
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4413      	add	r3, r2
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <SSD1306_DrawPixel+0xbc>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	b25a      	sxtb	r2, r3
 80025a4:	88bb      	ldrh	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	b25b      	sxtb	r3, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	4013      	ands	r3, r2
 80025b8:	b259      	sxtb	r1, r3
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	4603      	mov	r3, r0
 80025be:	01db      	lsls	r3, r3, #7
 80025c0:	4413      	add	r3, r2
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SSD1306_DrawPixel+0xbc>)
 80025c6:	54d1      	strb	r1, [r2, r3]
 80025c8:	e000      	b.n	80025cc <SSD1306_DrawPixel+0xac>
		return;
 80025ca:	bf00      	nop
	}
}
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200006cc 	.word	0x200006cc
 80025dc:	200002cc 	.word	0x200002cc

080025e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	460a      	mov	r2, r1
 80025ea:	80fb      	strh	r3, [r7, #6]
 80025ec:	4613      	mov	r3, r2
 80025ee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <SSD1306_GotoXY+0x28>)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <SSD1306_GotoXY+0x28>)
 80025f8:	88bb      	ldrh	r3, [r7, #4]
 80025fa:	8053      	strh	r3, [r2, #2]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	200006cc 	.word	0x200006cc

0800260c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
 8002618:	4613      	mov	r3, r2
 800261a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <SSD1306_Putc+0xfc>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
	if (
 8002628:	2b7f      	cmp	r3, #127	; 0x7f
 800262a:	dc07      	bgt.n	800263c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <SSD1306_Putc+0xfc>)
 800262e:	885b      	ldrh	r3, [r3, #2]
 8002630:	461a      	mov	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002638:	2b3f      	cmp	r3, #63	; 0x3f
 800263a:	dd01      	ble.n	8002640 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800263c:	2300      	movs	r3, #0
 800263e:	e05e      	b.n	80026fe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e04b      	b.n	80026de <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	3b20      	subs	r3, #32
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	7849      	ldrb	r1, [r1, #1]
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4619      	mov	r1, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	440b      	add	r3, r1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e030      	b.n	80026cc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <SSD1306_Putc+0xfc>)
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4413      	add	r3, r2
 8002684:	b298      	uxth	r0, r3
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <SSD1306_Putc+0xfc>)
 8002688:	885a      	ldrh	r2, [r3, #2]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4413      	add	r3, r2
 8002690:	b29b      	uxth	r3, r3
 8002692:	79ba      	ldrb	r2, [r7, #6]
 8002694:	4619      	mov	r1, r3
 8002696:	f7ff ff43 	bl	8002520 <SSD1306_DrawPixel>
 800269a:	e014      	b.n	80026c6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <SSD1306_Putc+0xfc>)
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	b298      	uxth	r0, r3
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <SSD1306_Putc+0xfc>)
 80026aa:	885a      	ldrh	r2, [r3, #2]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	b299      	uxth	r1, r3
 80026b4:	79bb      	ldrb	r3, [r7, #6]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff ff2d 	bl	8002520 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	3301      	adds	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d3c8      	bcc.n	800266a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	461a      	mov	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d3ad      	bcc.n	8002646 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <SSD1306_Putc+0xfc>)
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <SSD1306_Putc+0xfc>)
 80026fa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80026fc:	79fb      	ldrb	r3, [r7, #7]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200006cc 	.word	0x200006cc

0800270c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800271a:	e012      	b.n	8002742 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	79fa      	ldrb	r2, [r7, #7]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff71 	bl	800260c <SSD1306_Putc>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d002      	beq.n	800273c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	e008      	b.n	800274e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1e8      	bne.n	800271c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	781b      	ldrb	r3, [r3, #0]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fec8 	bl	80024f0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002760:	f7ff fe98 	bl	8002494 <SSD1306_UpdateScreen>
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <ssd1306_I2C_Init+0x28>)
 8002770:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002772:	e002      	b.n	800277a <ssd1306_I2C_Init+0x12>
		p--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
	while(p>0)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	0003d090 	.word	0x0003d090

08002794 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b0c7      	sub	sp, #284	; 0x11c
 8002798:	af02      	add	r7, sp, #8
 800279a:	4604      	mov	r4, r0
 800279c:	4608      	mov	r0, r1
 800279e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80027a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80027a6:	600a      	str	r2, [r1, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80027b2:	4622      	mov	r2, r4
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80027be:	4602      	mov	r2, r0
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ca:	460a      	mov	r2, r1
 80027cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80027ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027e8:	e015      	b.n	8002816 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80027ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	441a      	add	r2, r3
 80027fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027fe:	3301      	adds	r3, #1
 8002800:	7811      	ldrb	r1, [r2, #0]
 8002802:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002806:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800280a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800280c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002810:	3301      	adds	r3, #1
 8002812:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002816:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800281a:	b29b      	uxth	r3, r3
 800281c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002820:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d8df      	bhi.n	80027ea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800282a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800282e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b299      	uxth	r1, r3
 8002836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800283a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	b29b      	uxth	r3, r3
 8002844:	f107 020c 	add.w	r2, r7, #12
 8002848:	200a      	movs	r0, #10
 800284a:	9000      	str	r0, [sp, #0]
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <ssd1306_I2C_WriteMulti+0xc8>)
 800284e:	f001 faf7 	bl	8003e40 <HAL_I2C_Master_Transmit>
}
 8002852:	bf00      	nop
 8002854:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}
 800285c:	200000d8 	.word	0x200000d8

08002860 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	460b      	mov	r3, r1
 800286c:	71bb      	strb	r3, [r7, #6]
 800286e:	4613      	mov	r3, r2
 8002870:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002872:	79bb      	ldrb	r3, [r7, #6]
 8002874:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002876:	797b      	ldrb	r3, [r7, #5]
 8002878:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	b299      	uxth	r1, r3
 800287e:	f107 020c 	add.w	r2, r7, #12
 8002882:	230a      	movs	r3, #10
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2302      	movs	r3, #2
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <ssd1306_I2C_Write+0x38>)
 800288a:	f001 fad9 	bl	8003e40 <HAL_I2C_Master_Transmit>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200000d8 	.word	0x200000d8

0800289c <i2cWrite>:
static uint8_t REG_config = 0x03;
static uint8_t REG_input = 0x00;
static uint8_t REG_output = 0x01;


static int i2cWrite(uint8_t DevAddress, uint8_t reg, uint8_t data) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	460b      	mov	r3, r1
 80028a8:	71bb      	strb	r3, [r7, #6]
 80028aa:	4613      	mov	r3, r2
 80028ac:	717b      	strb	r3, [r7, #5]
	/*
	 * writes one byte 'data' to register 'reg'
	 */
	uint8_t buf[2];
	buf[0] = reg; // write register to first array position
 80028ae:	79bb      	ldrb	r3, [r7, #6]
 80028b0:	733b      	strb	r3, [r7, #12]
	buf[1] = data; // write data to second array position
 80028b2:	797b      	ldrb	r3, [r7, #5]
 80028b4:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DevAddress, buf, 2, HAL_MAX_DELAY);
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	b299      	uxth	r1, r3
 80028ba:	f107 020c 	add.w	r2, r7, #12
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2302      	movs	r3, #2
 80028c6:	480a      	ldr	r0, [pc, #40]	; (80028f0 <i2cWrite+0x54>)
 80028c8:	f001 faba 	bl	8003e40 <HAL_I2C_Master_Transmit>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <i2cWrite+0x58>)
 80028d2:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK) {
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <i2cWrite+0x58>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <i2cWrite+0x4a>
		printf("I2C Error\r\n");
 80028dc:	4806      	ldr	r0, [pc, #24]	; (80028f8 <i2cWrite+0x5c>)
 80028de:	f014 fdcf 	bl	8017480 <puts>
		return 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <i2cWrite+0x4c>
	} else {
		return 0;
 80028e6:	2300      	movs	r3, #0
	}
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	200000d8 	.word	0x200000d8
 80028f4:	200006d2 	.word	0x200006d2
 80028f8:	08018844 	.word	0x08018844

080028fc <i2cRead>:

static int i2cRead(uint8_t DevAddress, uint8_t reg, uint8_t *data, uint8_t size) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af02      	add	r7, sp, #8
 8002902:	603a      	str	r2, [r7, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
 800290a:	460b      	mov	r3, r1
 800290c:	71bb      	strb	r3, [r7, #6]
 800290e:	4613      	mov	r3, r2
 8002910:	717b      	strb	r3, [r7, #5]
	/*
	 * reads 'size' registers, starting from register 'reg', stores bytes in 'data'
	 */
	data[0] = reg; // write register to read
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	79ba      	ldrb	r2, [r7, #6]
 8002916:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, DevAddress, data, 1, HAL_MAX_DELAY);
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	b299      	uxth	r1, r3
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4816      	ldr	r0, [pc, #88]	; (8002980 <i2cRead+0x84>)
 8002928:	f001 fa8a 	bl	8003e40 <HAL_I2C_Master_Transmit>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <i2cRead+0x88>)
 8002932:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK) {
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <i2cRead+0x88>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <i2cRead+0x4a>
		printf("I2C Error\r\n");
 800293c:	4812      	ldr	r0, [pc, #72]	; (8002988 <i2cRead+0x8c>)
 800293e:	f014 fd9f 	bl	8017480 <puts>
		return 1;
 8002942:	2301      	movs	r3, #1
 8002944:	e018      	b.n	8002978 <i2cRead+0x7c>
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, DevAddress, data, size, HAL_MAX_DELAY);
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	b299      	uxth	r1, r3
 800294a:	797b      	ldrb	r3, [r7, #5]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f04f 32ff 	mov.w	r2, #4294967295
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	480a      	ldr	r0, [pc, #40]	; (8002980 <i2cRead+0x84>)
 8002958:	f001 fb70 	bl	800403c <HAL_I2C_Master_Receive>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <i2cRead+0x88>)
 8002962:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK) {
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <i2cRead+0x88>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <i2cRead+0x7a>
		printf("I2C Error\r\n");
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <i2cRead+0x8c>)
 800296e:	f014 fd87 	bl	8017480 <puts>
		return 1;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <i2cRead+0x7c>
	}
	return 0;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200000d8 	.word	0x200000d8
 8002984:	200006d2 	.word	0x200006d2
 8002988:	08018844 	.word	0x08018844

0800298c <ioExp_writePin>:
	}

	i2cWrite(DevAddress, REG_config, val[0]);
}

void ioExp_writePin(uint8_t high_low, uint8_t pin){
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	460a      	mov	r2, r1
 8002996:	71fb      	strb	r3, [r7, #7]
 8002998:	4613      	mov	r3, r2
 800299a:	71bb      	strb	r3, [r7, #6]
	/*
	 * set pin state
	 */
	uint8_t val[1];
	i2cRead(DevAddress, REG_output, val, 1);
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <ioExp_writePin+0x74>)
 800299e:	7818      	ldrb	r0, [r3, #0]
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <ioExp_writePin+0x78>)
 80029a2:	7819      	ldrb	r1, [r3, #0]
 80029a4:	f107 020c 	add.w	r2, r7, #12
 80029a8:	2301      	movs	r3, #1
 80029aa:	f7ff ffa7 	bl	80028fc <i2cRead>

	if(high_low){
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <ioExp_writePin+0x40>
		val[0] = val[0] | (0b00000001 << pin);
 80029b4:	7b3b      	ldrb	r3, [r7, #12]
 80029b6:	b25a      	sxtb	r2, r3
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	733b      	strb	r3, [r7, #12]
 80029ca:	e00c      	b.n	80029e6 <ioExp_writePin+0x5a>
	} else{
		val[0] = val[0] & ~(0b00000001 << pin);
 80029cc:	7b3b      	ldrb	r3, [r7, #12]
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	4013      	ands	r3, r2
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	733b      	strb	r3, [r7, #12]
	}

	i2cWrite(DevAddress, REG_output, val[0]);
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <ioExp_writePin+0x74>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <ioExp_writePin+0x78>)
 80029ec:	7811      	ldrb	r1, [r2, #0]
 80029ee:	7b3a      	ldrb	r2, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff53 	bl	800289c <i2cWrite>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000001c 	.word	0x2000001c
 8002a04:	2000001e 	.word	0x2000001e

08002a08 <ioExp_readPin>:

uint8_t ioExp_readPin(uint8_t pin){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
	/*
	 * read pin state
	 */
	uint8_t val[1];
	i2cRead(DevAddress, REG_input, val, 1);
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <ioExp_readPin+0x48>)
 8002a14:	7818      	ldrb	r0, [r3, #0]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <ioExp_readPin+0x4c>)
 8002a18:	7819      	ldrb	r1, [r3, #0]
 8002a1a:	f107 020c 	add.w	r2, r7, #12
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f7ff ff6c 	bl	80028fc <i2cRead>

	val[0] = val[0] & (0b00000001 << pin);
 8002a24:	7b3b      	ldrb	r3, [r7, #12]
 8002a26:	b25a      	sxtb	r2, r3
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	4013      	ands	r3, r2
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	733b      	strb	r3, [r7, #12]
	return val[0] >> pin;
 8002a3a:	7b3b      	ldrb	r3, [r7, #12]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	fa42 f303 	asr.w	r3, r2, r3
 8002a44:	b2db      	uxtb	r3, r3
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000001c 	.word	0x2000001c
 8002a54:	200006d3 	.word	0x200006d3

08002a58 <ioExp_init>:
	i2cWrite(DevAddress, REG_output, val);
}


void ioExp_init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t val;

	i2cRead(DevAddress, REG_config, val, 1);
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <ioExp_init+0xe8>)
 8002a60:	7818      	ldrb	r0, [r3, #0]
 8002a62:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <ioExp_init+0xec>)
 8002a64:	7819      	ldrb	r1, [r3, #0]
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f7ff ff46 	bl	80028fc <i2cRead>

	printf("CONFIG Register = 0x%x\r\n",val);
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4834      	ldr	r0, [pc, #208]	; (8002b48 <ioExp_init+0xf0>)
 8002a76:	f014 fc9d 	bl	80173b4 <iprintf>

	val = 0b10100000;
 8002a7a:	23a0      	movs	r3, #160	; 0xa0
 8002a7c:	71fb      	strb	r3, [r7, #7]

	i2cWrite(DevAddress, REG_config, val);
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <ioExp_init+0xe8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4a30      	ldr	r2, [pc, #192]	; (8002b44 <ioExp_init+0xec>)
 8002a84:	7811      	ldrb	r1, [r2, #0]
 8002a86:	79fa      	ldrb	r2, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff07 	bl	800289c <i2cWrite>

	i2cRead(DevAddress, REG_config, val, 1);
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <ioExp_init+0xe8>)
 8002a90:	7818      	ldrb	r0, [r3, #0]
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <ioExp_init+0xec>)
 8002a94:	7819      	ldrb	r1, [r3, #0]
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f7ff ff2e 	bl	80028fc <i2cRead>

	printf("CONFIG Register = 0x%x\r\n",val);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4828      	ldr	r0, [pc, #160]	; (8002b48 <ioExp_init+0xf0>)
 8002aa6:	f014 fc85 	bl	80173b4 <iprintf>

	val = 0b00000000;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]

	i2cWrite(DevAddress, REG_output, val);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <ioExp_init+0xe8>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <ioExp_init+0xf4>)
 8002ab4:	7811      	ldrb	r1, [r2, #0]
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff feef 	bl	800289c <i2cWrite>

	ioExp_writePin(1, LEDS_FL);
 8002abe:	2306      	movs	r3, #6
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f7ff ff62 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002ac8:	20c8      	movs	r0, #200	; 0xc8
 8002aca:	f000 f987 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(0, LEDS_FL);
 8002ace:	2306      	movs	r3, #6
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff ff5a 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002ad8:	20c8      	movs	r0, #200	; 0xc8
 8002ada:	f000 f97f 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(1, LEDS_FR);
 8002ade:	2304      	movs	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7ff ff52 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002ae8:	20c8      	movs	r0, #200	; 0xc8
 8002aea:	f000 f977 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(0, LEDS_FR);
 8002aee:	2304      	movs	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7ff ff4a 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002af8:	20c8      	movs	r0, #200	; 0xc8
 8002afa:	f000 f96f 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(1, LEDS_RL);
 8002afe:	2302      	movs	r3, #2
 8002b00:	4619      	mov	r1, r3
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff ff42 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002b08:	20c8      	movs	r0, #200	; 0xc8
 8002b0a:	f000 f967 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(0, LEDS_RL);
 8002b0e:	2302      	movs	r3, #2
 8002b10:	4619      	mov	r1, r3
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff ff3a 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002b18:	20c8      	movs	r0, #200	; 0xc8
 8002b1a:	f000 f95f 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(1, LEDS_RR);
 8002b1e:	2303      	movs	r3, #3
 8002b20:	4619      	mov	r1, r3
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7ff ff32 	bl	800298c <ioExp_writePin>
	HAL_Delay(200);
 8002b28:	20c8      	movs	r0, #200	; 0xc8
 8002b2a:	f000 f957 	bl	8002ddc <HAL_Delay>
	ioExp_writePin(0, LEDS_RR);
 8002b2e:	2303      	movs	r3, #3
 8002b30:	4619      	mov	r1, r3
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff ff2a 	bl	800298c <ioExp_writePin>

}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000001c 	.word	0x2000001c
 8002b44:	2000001d 	.word	0x2000001d
 8002b48:	08018850 	.word	0x08018850
 8002b4c:	2000001e 	.word	0x2000001e

08002b50 <toggleFrontLEDs>:

void toggleFrontLEDs(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	if(ioExp_readPin(LEDS_FL) && ioExp_readPin(LEDS_FR))
 8002b54:	2306      	movs	r3, #6
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff56 	bl	8002a08 <ioExp_readPin>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d011      	beq.n	8002b86 <toggleFrontLEDs+0x36>
 8002b62:	2304      	movs	r3, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff4f 	bl	8002a08 <ioExp_readPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <toggleFrontLEDs+0x36>
	{
		ioExp_writePin(0, LEDS_FL);
 8002b70:	2306      	movs	r3, #6
 8002b72:	4619      	mov	r1, r3
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7ff ff09 	bl	800298c <ioExp_writePin>
		ioExp_writePin(0, LEDS_FR);
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7ff ff04 	bl	800298c <ioExp_writePin>
 8002b84:	e00a      	b.n	8002b9c <toggleFrontLEDs+0x4c>
	}
	else
	{
		ioExp_writePin(1, LEDS_FL);
 8002b86:	2306      	movs	r3, #6
 8002b88:	4619      	mov	r1, r3
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff fefe 	bl	800298c <ioExp_writePin>
		ioExp_writePin(1, LEDS_FR);
 8002b90:	2304      	movs	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	2001      	movs	r0, #1
 8002b96:	f7ff fef9 	bl	800298c <ioExp_writePin>
	}
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <toggleRearLEDs>:

void toggleRearLEDs(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	if(ioExp_readPin(LEDS_RL) && ioExp_readPin(LEDS_RR))
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff2e 	bl	8002a08 <ioExp_readPin>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d011      	beq.n	8002bd6 <toggleRearLEDs+0x36>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff27 	bl	8002a08 <ioExp_readPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <toggleRearLEDs+0x36>
	{
		ioExp_writePin(0, LEDS_RL);
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff fee1 	bl	800298c <ioExp_writePin>
		ioExp_writePin(0, LEDS_RR);
 8002bca:	2303      	movs	r3, #3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fedc 	bl	800298c <ioExp_writePin>
 8002bd4:	e00a      	b.n	8002bec <toggleRearLEDs+0x4c>
	}
	else
	{
		ioExp_writePin(1, LEDS_RL);
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7ff fed6 	bl	800298c <ioExp_writePin>
		ioExp_writePin(1, LEDS_RR);
 8002be0:	2303      	movs	r3, #3
 8002be2:	4619      	mov	r1, r3
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff fed1 	bl	800298c <ioExp_writePin>
	}
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <setMotorSpeed>:
#include "main.h"

extern TIM_HandleTypeDef htim5;

void setMotorSpeed(uint8_t speed, uint8_t dir)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	71fb      	strb	r3, [r7, #7]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71bb      	strb	r3, [r7, #6]
	uint16_t speedTarget = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	81fb      	strh	r3, [r7, #14]

	speedTarget = speed * 10;
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	81fb      	strh	r3, [r7, #14]

	if (dir)
 8002c12:	79bb      	ldrb	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <setMotorSpeed+0x34>
	{
		HAL_GPIO_WritePin(GPIOC,M3_IN2_Pin, GPIO_PIN_SET);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <setMotorSpeed+0x50>)
 8002c1e:	f000 ff99 	bl	8003b54 <HAL_GPIO_WritePin>
 8002c22:	e004      	b.n	8002c2e <setMotorSpeed+0x3e>
		//HAL_GPIO_WritePin(GPIOC,M3_IN1_Pin, GPIO_PIN_RESET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC,M3_IN2_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2102      	movs	r1, #2
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <setMotorSpeed+0x50>)
 8002c2a:	f000 ff93 	bl	8003b54 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOC,M3_IN1_Pin, GPIO_PIN_SET);
	}

	htim5.Instance->CCR1 = speedTarget;
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <setMotorSpeed+0x54>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	89fa      	ldrh	r2, [r7, #14]
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40020800 	.word	0x40020800
 8002c44:	20000174 	.word	0x20000174

08002c48 <accelMotor>:

void accelMotor(uint8_t speed, uint8_t dir)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460a      	mov	r2, r1
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	4613      	mov	r3, r2
 8002c56:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint16_t speedTarget = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	817b      	strh	r3, [r7, #10]

	speedTarget = speed * 10;
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	817b      	strh	r3, [r7, #10]

	if (dir)
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <accelMotor+0x34>
	{
		HAL_GPIO_WritePin(GPIOC,M3_IN2_Pin, GPIO_PIN_SET);
 8002c70:	2201      	movs	r2, #1
 8002c72:	2102      	movs	r1, #2
 8002c74:	480f      	ldr	r0, [pc, #60]	; (8002cb4 <accelMotor+0x6c>)
 8002c76:	f000 ff6d 	bl	8003b54 <HAL_GPIO_WritePin>
 8002c7a:	e004      	b.n	8002c86 <accelMotor+0x3e>
		//HAL_GPIO_WritePin(GPIOC,M3_IN1_Pin, GPIO_PIN_RESET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC,M3_IN2_Pin, GPIO_PIN_RESET);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2102      	movs	r1, #2
 8002c80:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <accelMotor+0x6c>)
 8002c82:	f000 ff67 	bl	8003b54 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOC,M3_IN1_Pin, GPIO_PIN_SET);
	}

	//htim5.Instance->CCR1 = 1000;

	for(int i = 100; i<speedTarget; i+=50)
 8002c86:	2364      	movs	r3, #100	; 0x64
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e009      	b.n	8002ca0 <accelMotor+0x58>
	{
		htim5.Instance->CCR1 = i;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <accelMotor+0x70>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 8002c94:	20c8      	movs	r0, #200	; 0xc8
 8002c96:	f000 f8a1 	bl	8002ddc <HAL_Delay>
	for(int i = 100; i<speedTarget; i+=50)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3332      	adds	r3, #50	; 0x32
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dbf1      	blt.n	8002c8c <accelMotor+0x44>
	}

}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	20000174 	.word	0x20000174

08002cbc <stopMotor>:

void stopMotor(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
	uint16_t actualSpeed = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	80fb      	strh	r3, [r7, #6]

	actualSpeed = htim5.Instance->CCR1;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <stopMotor+0x38>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	80fb      	strh	r3, [r7, #6]

	while(actualSpeed > 0)
 8002cce:	e009      	b.n	8002ce4 <stopMotor+0x28>
	{
		actualSpeed -= 50;
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	3b32      	subs	r3, #50	; 0x32
 8002cd4:	80fb      	strh	r3, [r7, #6]
		htim5.Instance->CCR1 = actualSpeed;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <stopMotor+0x38>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(100);
 8002cde:	2064      	movs	r0, #100	; 0x64
 8002ce0:	f000 f87c 	bl	8002ddc <HAL_Delay>
	while(actualSpeed > 0)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <stopMotor+0x14>
	}
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000174 	.word	0x20000174

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 f94f 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7fe fdb0 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f967 	bl	800302e <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 f92f 	bl	8002fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000024 	.word	0x20000024
 8002d98:	20000020 	.word	0x20000020

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000024 	.word	0x20000024
 8002dc0:	200006d4 	.word	0x200006d4

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	200006d4 	.word	0x200006d4

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000024 	.word	0x20000024

08002e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	60d3      	str	r3, [r2, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <__NVIC_GetPriorityGrouping+0x18>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db0b      	blt.n	8002eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <__NVIC_EnableIRQ+0x38>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0a      	blt.n	8002eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	490c      	ldr	r1, [pc, #48]	; (8002f10 <__NVIC_SetPriority+0x4c>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eec:	e00a      	b.n	8002f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4908      	ldr	r1, [pc, #32]	; (8002f14 <__NVIC_SetPriority+0x50>)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	3b04      	subs	r3, #4
 8002efc:	0112      	lsls	r2, r2, #4
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	440b      	add	r3, r1
 8002f02:	761a      	strb	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f1c3 0307 	rsb	r3, r3, #7
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	bf28      	it	cs
 8002f36:	2304      	movcs	r3, #4
 8002f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d902      	bls.n	8002f48 <NVIC_EncodePriority+0x30>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3b03      	subs	r3, #3
 8002f46:	e000      	b.n	8002f4a <NVIC_EncodePriority+0x32>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f60:	f04f 31ff 	mov.w	r1, #4294967295
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43d9      	mvns	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	4313      	orrs	r3, r2
         );
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3724      	adds	r7, #36	; 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f90:	d301      	bcc.n	8002f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <SysTick_Config+0x40>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f7ff ff8e 	bl	8002ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <SysTick_Config+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <SysTick_Config+0x40>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff29 	bl	8002e24 <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fec:	f7ff ff3e 	bl	8002e6c <__NVIC_GetPriorityGrouping>
 8002ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff8e 	bl	8002f18 <NVIC_EncodePriority>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5d 	bl	8002ec4 <__NVIC_SetPriority>
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff31 	bl	8002e88 <__NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffa2 	bl	8002f80 <SysTick_Config>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff feb6 	bl	8002dc4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e099      	b.n	8003198 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003084:	e00f      	b.n	80030a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003086:	f7ff fe9d 	bl	8002dc4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b05      	cmp	r3, #5
 8003092:	d908      	bls.n	80030a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e078      	b.n	8003198 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e8      	bne.n	8003086 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_DMA_Init+0x158>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4313      	orrs	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0307 	bic.w	r3, r3, #7
 8003126:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b04      	cmp	r3, #4
 8003138:	d117      	bne.n	800316a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fb01 	bl	8003754 <DMA_CheckFifoParam>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003166:	2301      	movs	r3, #1
 8003168:	e016      	b.n	8003198 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fab8 	bl	80036e8 <DMA_CalcBaseAndBitshift>
 8003178:	4603      	mov	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	223f      	movs	r2, #63	; 0x3f
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	f010803f 	.word	0xf010803f

080031a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_DMA_Start_IT+0x26>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e040      	b.n	800324c <HAL_DMA_Start_IT+0xa8>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d12f      	bne.n	800323e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fa4a 	bl	800368c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	223f      	movs	r2, #63	; 0x3f
 80031fe:	409a      	lsls	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0216 	orr.w	r2, r2, #22
 8003212:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e005      	b.n	800324a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800324a:	7dfb      	ldrb	r3, [r7, #23]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003262:	f7ff fdaf 	bl	8002dc4 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d008      	beq.n	8003286 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e052      	b.n	800332c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_Abort+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	e013      	b.n	8003300 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d8:	f7ff fd74 	bl	8002dc4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d90c      	bls.n	8003300 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2203      	movs	r2, #3
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e015      	b.n	800332c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e4      	bne.n	80032d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	223f      	movs	r2, #63	; 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00c      	b.n	800336c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2205      	movs	r2, #5
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003384:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <HAL_DMA_IRQHandler+0x248>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a8e      	ldr	r2, [pc, #568]	; (80035c4 <HAL_DMA_IRQHandler+0x24c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2208      	movs	r2, #8
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2208      	movs	r2, #8
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2201      	movs	r2, #1
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2204      	movs	r2, #4
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2204      	movs	r2, #4
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d043      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2210      	movs	r2, #16
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d024      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e01f      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e016      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0208 	bic.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2220      	movs	r2, #32
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 808f 	beq.w	8003618 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8087 	beq.w	8003618 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2220      	movs	r2, #32
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d136      	bne.n	8003590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_IRQHandler+0x1da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	223f      	movs	r2, #63	; 0x3f
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07e      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
        }
        return;
 800358e:	e079      	b.n	8003684 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01d      	beq.n	80035da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e02c      	b.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000
 80035c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d023      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e01e      	b.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0210 	bic.w	r2, r2, #16
 80035f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	2b00      	cmp	r3, #0
 800361e:	d032      	beq.n	8003686 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d022      	beq.n	8003672 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2205      	movs	r2, #5
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3301      	adds	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d307      	bcc.n	8003660 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f2      	bne.n	8003644 <HAL_DMA_IRQHandler+0x2cc>
 800365e:	e000      	b.n	8003662 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003660:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
 8003682:	e000      	b.n	8003686 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003684:	bf00      	nop
    }
  }
}
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d108      	bne.n	80036cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ca:	e007      	b.n	80036dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3b10      	subs	r3, #16
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <DMA_CalcBaseAndBitshift+0x64>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <DMA_CalcBaseAndBitshift+0x68>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d909      	bls.n	800372a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	1d1a      	adds	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	659a      	str	r2, [r3, #88]	; 0x58
 8003728:	e007      	b.n	800373a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	aaaaaaab 	.word	0xaaaaaaab
 8003750:	0801b61c 	.word	0x0801b61c

08003754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d856      	bhi.n	8003822 <DMA_CheckFifoParam+0xce>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x28>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	0800378d 	.word	0x0800378d
 8003780:	0800379f 	.word	0x0800379f
 8003784:	0800378d 	.word	0x0800378d
 8003788:	08003823 	.word	0x08003823
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d046      	beq.n	8003826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e043      	b.n	8003826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a6:	d140      	bne.n	800382a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e03d      	b.n	800382a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b6:	d121      	bne.n	80037fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d837      	bhi.n	800382e <DMA_CheckFifoParam+0xda>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <DMA_CheckFifoParam+0x70>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037db 	.word	0x080037db
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	080037ed 	.word	0x080037ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e030      	b.n	800383c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d025      	beq.n	8003832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ea:	e022      	b.n	8003832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f4:	d11f      	bne.n	8003836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037fa:	e01c      	b.n	8003836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d903      	bls.n	800380a <DMA_CheckFifoParam+0xb6>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d003      	beq.n	8003810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003808:	e018      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      break;
 800380e:	e015      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e00b      	b.n	800383a <DMA_CheckFifoParam+0xe6>
      break;
 8003822:	bf00      	nop
 8003824:	e00a      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e008      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e006      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e004      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e002      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;   
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
    }
  } 
  
  return status; 
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e159      	b.n	8003b1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003868:	2201      	movs	r2, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	f040 8148 	bne.w	8003b16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	2b02      	cmp	r3, #2
 800389c:	d130      	bne.n	8003900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0201 	and.w	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d017      	beq.n	800393c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d123      	bne.n	8003990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	08da      	lsrs	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3208      	adds	r2, #8
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a2 	beq.w	8003b16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_GPIO_Init+0x2e8>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ee:	4a52      	ldr	r2, [pc, #328]	; (8003b38 <HAL_GPIO_Init+0x2ec>)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a49      	ldr	r2, [pc, #292]	; (8003b3c <HAL_GPIO_Init+0x2f0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d019      	beq.n	8003a4e <HAL_GPIO_Init+0x202>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a48      	ldr	r2, [pc, #288]	; (8003b40 <HAL_GPIO_Init+0x2f4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x1fe>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <HAL_GPIO_Init+0x2f8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x1fa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a46      	ldr	r2, [pc, #280]	; (8003b48 <HAL_GPIO_Init+0x2fc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x1f6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a45      	ldr	r2, [pc, #276]	; (8003b4c <HAL_GPIO_Init+0x300>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x1f2>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x204>
 8003a3e:	2307      	movs	r3, #7
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x204>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x204>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x204>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x204>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	; (8003b38 <HAL_GPIO_Init+0x2ec>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_GPIO_Init+0x304>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f67f aea2 	bls.w	8003868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40013c00 	.word	0x40013c00

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	041a      	lsls	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b9e:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd f954 	bl	8000e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40013c00 	.word	0x40013c00

08003bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e12b      	b.n	8003e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fe7e 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f001 fd00 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a81      	ldr	r2, [pc, #516]	; (8003e2c <HAL_I2C_Init+0x274>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d807      	bhi.n	8003c3c <HAL_I2C_Init+0x84>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_I2C_Init+0x278>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e006      	b.n	8003c4a <HAL_I2C_Init+0x92>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a7d      	ldr	r2, [pc, #500]	; (8003e34 <HAL_I2C_Init+0x27c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bf94      	ite	ls
 8003c44:	2301      	movls	r3, #1
 8003c46:	2300      	movhi	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0e7      	b.n	8003e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a78      	ldr	r2, [pc, #480]	; (8003e38 <HAL_I2C_Init+0x280>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a6a      	ldr	r2, [pc, #424]	; (8003e2c <HAL_I2C_Init+0x274>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d802      	bhi.n	8003c8c <HAL_I2C_Init+0xd4>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	e009      	b.n	8003ca0 <HAL_I2C_Init+0xe8>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	4a69      	ldr	r2, [pc, #420]	; (8003e3c <HAL_I2C_Init+0x284>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	495c      	ldr	r1, [pc, #368]	; (8003e2c <HAL_I2C_Init+0x274>)
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d819      	bhi.n	8003cf4 <HAL_I2C_Init+0x13c>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e59      	subs	r1, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cd4:	400b      	ands	r3, r1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_I2C_Init+0x138>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1e59      	subs	r1, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cee:	e051      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e04f      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d111      	bne.n	8003d20 <HAL_I2C_Init+0x168>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	440b      	add	r3, r1
 8003d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e012      	b.n	8003d46 <HAL_I2C_Init+0x18e>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e58      	subs	r0, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Init+0x196>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e022      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_I2C_Init+0x1bc>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e58      	subs	r0, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	440b      	add	r3, r1
 8003d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d72:	e00f      	b.n	8003d94 <HAL_I2C_Init+0x1dc>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e58      	subs	r0, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	0099      	lsls	r1, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6911      	ldr	r1, [r2, #16]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	000186a0 	.word	0x000186a0
 8003e30:	001e847f 	.word	0x001e847f
 8003e34:	003d08ff 	.word	0x003d08ff
 8003e38:	431bde83 	.word	0x431bde83
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
 8003e50:	4613      	mov	r3, r2
 8003e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7fe ffb6 	bl	8002dc4 <HAL_GetTick>
 8003e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f040 80e0 	bne.w	8004028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4970      	ldr	r1, [pc, #448]	; (8004034 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fd86 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0d3      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2C_Master_Transmit+0x50>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0cc      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d007      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2221      	movs	r2, #33	; 0x21
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	893a      	ldrh	r2, [r7, #8]
 8003ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fbf0 	bl	80046e4 <I2C_MasterRequestWrite>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e08d      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f24:	e066      	b.n	8003ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fe00 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x188>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6a39      	ldr	r1, [r7, #32]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fdf0 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e01a      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d194      	bne.n	8003f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00100002 	.word	0x00100002
 8004038:	ffff0000 	.word	0xffff0000

0800403c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	461a      	mov	r2, r3
 8004048:	460b      	mov	r3, r1
 800404a:	817b      	strh	r3, [r7, #10]
 800404c:	4613      	mov	r3, r2
 800404e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7fe feb8 	bl	8002dc4 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	f040 820b 	bne.w	800447a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2319      	movs	r3, #25
 800406a:	2201      	movs	r2, #1
 800406c:	497c      	ldr	r1, [pc, #496]	; (8004260 <HAL_I2C_Master_Receive+0x224>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fc88 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	e1fe      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_I2C_Master_Receive+0x50>
 8004088:	2302      	movs	r3, #2
 800408a:	e1f7      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d007      	beq.n	80040b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2222      	movs	r2, #34	; 0x22
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2210      	movs	r2, #16
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	893a      	ldrh	r2, [r7, #8]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a5c      	ldr	r2, [pc, #368]	; (8004264 <HAL_I2C_Master_Receive+0x228>)
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040f4:	8979      	ldrh	r1, [r7, #10]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fb74 	bl	80047e8 <I2C_MasterRequestRead>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1b8      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e18c      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	2b01      	cmp	r3, #1
 8004140:	d11b      	bne.n	800417a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e16c      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b02      	cmp	r3, #2
 8004180:	d11b      	bne.n	80041ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004190:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	e14c      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041e0:	e138      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f200 80f1 	bhi.w	80043ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d123      	bne.n	800423c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fd1b 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e139      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800423a:	e10b      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b02      	cmp	r3, #2
 8004242:	d14e      	bne.n	80042e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	2200      	movs	r2, #0
 800424c:	4906      	ldr	r1, [pc, #24]	; (8004268 <HAL_I2C_Master_Receive+0x22c>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fb98 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e10e      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
 800425e:	bf00      	nop
 8004260:	00100002 	.word	0x00100002
 8004264:	ffff0000 	.word	0xffff0000
 8004268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042e0:	e0b8      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	2200      	movs	r2, #0
 80042ea:	4966      	ldr	r1, [pc, #408]	; (8004484 <HAL_I2C_Master_Receive+0x448>)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fb49 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0bf      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2200      	movs	r2, #0
 8004346:	494f      	ldr	r1, [pc, #316]	; (8004484 <HAL_I2C_Master_Receive+0x448>)
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fb1b 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e091      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043cc:	e042      	b.n	8004454 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fc2e 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e04c      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d118      	bne.n	8004454 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	f47f aec2 	bne.w	80041e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3728      	adds	r7, #40	; 0x28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010004 	.word	0x00010004

08004488 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7fe fc94 	bl	8002dc4 <HAL_GetTick>
 800449c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f040 8111 	bne.w	80046d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2319      	movs	r3, #25
 80044b6:	2201      	movs	r2, #1
 80044b8:	4988      	ldr	r1, [pc, #544]	; (80046dc <HAL_I2C_IsDeviceReady+0x254>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa62 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	e104      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_I2C_IsDeviceReady+0x50>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0fd      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d007      	beq.n	80044fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2224      	movs	r2, #36	; 0x24
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a70      	ldr	r2, [pc, #448]	; (80046e0 <HAL_I2C_IsDeviceReady+0x258>)
 8004520:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004530:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa20 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004558:	d103      	bne.n	8004562 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0b6      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004566:	897b      	ldrh	r3, [r7, #10]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004574:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004576:	f7fe fc25 	bl	8002dc4 <HAL_GetTick>
 800457a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045aa:	e025      	b.n	80045f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fe fc0a 	bl	8002dc4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <HAL_I2C_IsDeviceReady+0x13a>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	22a0      	movs	r2, #160	; 0xa0
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2ba0      	cmp	r3, #160	; 0xa0
 8004602:	d005      	beq.n	8004610 <HAL_I2C_IsDeviceReady+0x188>
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <HAL_I2C_IsDeviceReady+0x188>
 800460a:	7dbb      	ldrb	r3, [r7, #22]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0cd      	beq.n	80045ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d129      	bne.n	800467a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004634:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2319      	movs	r3, #25
 8004652:	2201      	movs	r2, #1
 8004654:	4921      	ldr	r1, [pc, #132]	; (80046dc <HAL_I2C_IsDeviceReady+0x254>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f994 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e036      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e02c      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004688:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004692:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2319      	movs	r3, #25
 800469a:	2201      	movs	r2, #1
 800469c:	490f      	ldr	r1, [pc, #60]	; (80046dc <HAL_I2C_IsDeviceReady+0x254>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f970 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e012      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f4ff af32 	bcc.w	8004522 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	460b      	mov	r3, r1
 80046f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d006      	beq.n	800470e <I2C_MasterRequestWrite+0x2a>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d003      	beq.n	800470e <I2C_MasterRequestWrite+0x2a>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800470c:	d108      	bne.n	8004720 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e00b      	b.n	8004738 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	2b12      	cmp	r3, #18
 8004726:	d107      	bne.n	8004738 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004736:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f91d 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d103      	bne.n	8004768 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e035      	b.n	80047d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004774:	d108      	bne.n	8004788 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	e01b      	b.n	80047c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004788:	897b      	ldrh	r3, [r7, #10]
 800478a:	11db      	asrs	r3, r3, #7
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0306 	and.w	r3, r3, #6
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f063 030f 	orn	r3, r3, #15
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <I2C_MasterRequestWrite+0xfc>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f943 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e010      	b.n	80047d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4907      	ldr	r1, [pc, #28]	; (80047e4 <I2C_MasterRequestWrite+0x100>)
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f933 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	00010008 	.word	0x00010008
 80047e4:	00010002 	.word	0x00010002

080047e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	460b      	mov	r3, r1
 80047f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800480c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d006      	beq.n	8004822 <I2C_MasterRequestRead+0x3a>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d003      	beq.n	8004822 <I2C_MasterRequestRead+0x3a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b11      	cmp	r3, #17
 800483a:	d107      	bne.n	800484c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f893 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d103      	bne.n	800487c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e079      	b.n	8004974 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e05f      	b.n	800495c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	11db      	asrs	r3, r3, #7
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0306 	and.w	r3, r3, #6
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f063 030f 	orn	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4930      	ldr	r1, [pc, #192]	; (800497c <I2C_MasterRequestRead+0x194>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f8b9 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e054      	b.n	8004974 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4929      	ldr	r1, [pc, #164]	; (8004980 <I2C_MasterRequestRead+0x198>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8a9 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e044      	b.n	8004974 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f831 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00d      	beq.n	8004944 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004936:	d103      	bne.n	8004940 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e017      	b.n	8004974 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004944:	897b      	ldrh	r3, [r7, #10]
 8004946:	11db      	asrs	r3, r3, #7
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0306 	and.w	r3, r3, #6
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f063 030e 	orn	r3, r3, #14
 8004954:	b2da      	uxtb	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4907      	ldr	r1, [pc, #28]	; (8004980 <I2C_MasterRequestRead+0x198>)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f865 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	00010008 	.word	0x00010008
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e025      	b.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fa11 	bl	8002dc4 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e023      	b.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10d      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	e00c      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0b6      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a40:	e051      	b.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d123      	bne.n	8004a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e046      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d021      	beq.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe f98f 	bl	8002dc4 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e020      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e00b      	b.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d18d      	bne.n	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3c:	e02d      	b.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8ce 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d021      	beq.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fe f935 	bl	8002dc4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d1ca      	bne.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbe:	e02d      	b.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f88d 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d021      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fe f8f4 	bl	8002dc4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d1ca      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c40:	e042      	b.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d119      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e029      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe f89e 	bl	8002dc4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d1b5      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d11b      	bne.n	8004d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e267      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d5e:	4b88      	ldr	r3, [pc, #544]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6a:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d112      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b82      	ldr	r3, [pc, #520]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05b      	beq.n	8004e48 <HAL_RCC_OscConfig+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d157      	bne.n	8004e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e242      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x74>
 8004da6:	4b76      	ldr	r3, [pc, #472]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a75      	ldr	r2, [pc, #468]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x98>
 8004dbe:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b6d      	ldr	r3, [pc, #436]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6c      	ldr	r2, [pc, #432]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a68      	ldr	r2, [pc, #416]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a65      	ldr	r2, [pc, #404]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fd ffe4 	bl	8002dc4 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fd ffe0 	bl	8002dc4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e207      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b5b      	ldr	r3, [pc, #364]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd ffd0 	bl	8002dc4 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd ffcc 	bl	8002dc4 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1f3      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe8>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b44      	ldr	r3, [pc, #272]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1c7      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4937      	ldr	r1, [pc, #220]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	e03a      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd ff85 	bl	8002dc4 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd ff81 	bl	8002dc4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1a8      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4925      	ldr	r1, [pc, #148]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e015      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd ff64 	bl	8002dc4 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd ff60 	bl	8002dc4 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e187      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fd ff44 	bl	8002dc4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fd ff40 	bl	8002dc4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e167      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x200>
 8004f5e:	e01b      	b.n	8004f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fd ff2d 	bl	8002dc4 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	e00e      	b.n	8004f8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fd ff29 	bl	8002dc4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d907      	bls.n	8004f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e150      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	42470000 	.word	0x42470000
 8004f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ea      	bne.n	8004f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8097 	beq.w	80050d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004faa:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	4b77      	ldr	r3, [pc, #476]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe2:	4b74      	ldr	r3, [pc, #464]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a73      	ldr	r2, [pc, #460]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fd fee9 	bl	8002dc4 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fd fee5 	bl	8002dc4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e10c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005008:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x2ea>
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	e01c      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x30c>
 8005032:	4b5f      	ldr	r3, [pc, #380]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	4a5e      	ldr	r2, [pc, #376]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6713      	str	r3, [r2, #112]	; 0x70
 800503e:	4b5c      	ldr	r3, [pc, #368]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800504c:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	4a57      	ldr	r2, [pc, #348]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6713      	str	r3, [r2, #112]	; 0x70
 8005058:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4a54      	ldr	r2, [pc, #336]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0304 	bic.w	r3, r3, #4
 8005062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd feaa 	bl	8002dc4 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fd fea6 	bl	8002dc4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0cb      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508a:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ee      	beq.n	8005074 <HAL_RCC_OscConfig+0x334>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005098:	f7fd fe94 	bl	8002dc4 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fd fe90 	bl	8002dc4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0b5      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b6:	4b3e      	ldr	r3, [pc, #248]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ee      	bne.n	80050a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d105      	bne.n	80050d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a1 	beq.w	8005220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050de:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d05c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d141      	bne.n	8005176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd fe64 	bl	8002dc4 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd fe60 	bl	8002dc4 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e087      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	3b01      	subs	r3, #1
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	491b      	ldr	r1, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fd fe39 	bl	8002dc4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7fd fe35 	bl	8002dc4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e05c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x416>
 8005174:	e054      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fd fe22 	bl	8002dc4 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005184:	f7fd fe1e 	bl	8002dc4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e045      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x444>
 80051a2:	e03d      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e038      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40007000 	.word	0x40007000
 80051b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_OscConfig+0x4ec>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d028      	beq.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d121      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d11a      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d111      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0cc      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b68      	ldr	r3, [pc, #416]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d90c      	bls.n	800526c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d044      	beq.n	8005350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d119      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e06f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fe:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e067      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4934      	ldr	r1, [pc, #208]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005320:	f7fd fd50 	bl	8002dc4 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fd fd4c 	bl	8002dc4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20c      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd fcb0 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	080189d8 	.word	0x080189d8
 80053f4:	20000000 	.word	0x20000000
 80053f8:	20000020 	.word	0x20000020

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b094      	sub	sp, #80	; 0x50
 8005402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	2300      	movs	r3, #0
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	2300      	movs	r3, #0
 800540e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005414:	4b79      	ldr	r3, [pc, #484]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	d00d      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x40>
 8005420:	2b08      	cmp	r3, #8
 8005422:	f200 80e1 	bhi.w	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x34>
 800542a:	2b04      	cmp	r3, #4
 800542c:	d003      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x3a>
 800542e:	e0db      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005430:	4b73      	ldr	r3, [pc, #460]	; (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005434:	e0db      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005436:	4b73      	ldr	r3, [pc, #460]	; (8005604 <HAL_RCC_GetSysClockFreq+0x208>)
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800543a:	e0d8      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800543c:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d063      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	2200      	movs	r2, #0
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
 800545c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
 800546a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800546e:	4622      	mov	r2, r4
 8005470:	462b      	mov	r3, r5
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	0159      	lsls	r1, r3, #5
 800547c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005480:	0150      	lsls	r0, r2, #5
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4621      	mov	r1, r4
 8005488:	1a51      	subs	r1, r2, r1
 800548a:	6139      	str	r1, [r7, #16]
 800548c:	4629      	mov	r1, r5
 800548e:	eb63 0301 	sbc.w	r3, r3, r1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054a0:	4659      	mov	r1, fp
 80054a2:	018b      	lsls	r3, r1, #6
 80054a4:	4651      	mov	r1, sl
 80054a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054aa:	4651      	mov	r1, sl
 80054ac:	018a      	lsls	r2, r1, #6
 80054ae:	4651      	mov	r1, sl
 80054b0:	ebb2 0801 	subs.w	r8, r2, r1
 80054b4:	4659      	mov	r1, fp
 80054b6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ce:	4690      	mov	r8, r2
 80054d0:	4699      	mov	r9, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	eb18 0303 	adds.w	r3, r8, r3
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	462b      	mov	r3, r5
 80054dc:	eb49 0303 	adc.w	r3, r9, r3
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ee:	4629      	mov	r1, r5
 80054f0:	024b      	lsls	r3, r1, #9
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054f8:	4621      	mov	r1, r4
 80054fa:	024a      	lsls	r2, r1, #9
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
 8005506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800550c:	f7fb fade 	bl	8000acc <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005518:	e058      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b38      	ldr	r3, [pc, #224]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	4618      	mov	r0, r3
 8005524:	4611      	mov	r1, r2
 8005526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
 8005530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005546:	0150      	lsls	r0, r2, #5
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4641      	mov	r1, r8
 800554e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb63 0b01 	sbc.w	fp, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800556c:	ebb2 040a 	subs.w	r4, r2, sl
 8005570:	eb63 050b 	sbc.w	r5, r3, fp
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	00eb      	lsls	r3, r5, #3
 800557e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005582:	00e2      	lsls	r2, r4, #3
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	4643      	mov	r3, r8
 800558a:	18e3      	adds	r3, r4, r3
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	464b      	mov	r3, r9
 8005590:	eb45 0303 	adc.w	r3, r5, r3
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055a2:	4629      	mov	r1, r5
 80055a4:	028b      	lsls	r3, r1, #10
 80055a6:	4621      	mov	r1, r4
 80055a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055ac:	4621      	mov	r1, r4
 80055ae:	028a      	lsls	r2, r1, #10
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b6:	2200      	movs	r2, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c0:	f7fb fa84 	bl	8000acc <__aeabi_uldivmod>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4613      	mov	r3, r2
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	3301      	adds	r3, #1
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e6:	e002      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3750      	adds	r7, #80	; 0x50
 80055f4:	46bd      	mov	sp, r7
 80055f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	00f42400 	.word	0x00f42400
 8005604:	007a1200 	.word	0x007a1200

08005608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000000 	.word	0x20000000

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	080189e8 	.word	0x080189e8

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800564c:	f7ff ffdc 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	; (800566c <HAL_RCC_GetPCLK2Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	080189e8 	.word	0x080189e8

08005670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e041      	b.n	8005706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc f96a 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f000 fac0 	bl	8005c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e041      	b.n	80057a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f839 	bl	80057ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 fa71 	bl	8005c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <HAL_TIM_PWM_Start+0x24>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e022      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d109      	bne.n	80057fe <HAL_TIM_PWM_Start+0x3e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e015      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d109      	bne.n	8005818 <HAL_TIM_PWM_Start+0x58>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e008      	b.n	800582a <HAL_TIM_PWM_Start+0x6a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e068      	b.n	8005904 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0x82>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005840:	e013      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b04      	cmp	r3, #4
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0x92>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005850:	e00b      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005860:	e003      	b.n	800586a <HAL_TIM_PWM_Start+0xaa>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fc84 	bl	8006180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_TIM_PWM_Start+0x14c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d107      	bne.n	8005892 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <HAL_TIM_PWM_Start+0x14c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIM_PWM_Start+0x10e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d013      	beq.n	80058ce <HAL_TIM_PWM_Start+0x10e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a19      	ldr	r2, [pc, #100]	; (8005910 <HAL_TIM_PWM_Start+0x150>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIM_PWM_Start+0x10e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_TIM_PWM_Start+0x154>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIM_PWM_Start+0x10e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a16      	ldr	r2, [pc, #88]	; (8005918 <HAL_TIM_PWM_Start+0x158>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIM_PWM_Start+0x10e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <HAL_TIM_PWM_Start+0x15c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b06      	cmp	r3, #6
 80058de:	d010      	beq.n	8005902 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f0:	e007      	b.n	8005902 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40014000 	.word	0x40014000

08005920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800593a:	2302      	movs	r3, #2
 800593c:	e0ae      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	f200 809f 	bhi.w	8005a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005989 	.word	0x08005989
 8005958:	08005a8d 	.word	0x08005a8d
 800595c:	08005a8d 	.word	0x08005a8d
 8005960:	08005a8d 	.word	0x08005a8d
 8005964:	080059c9 	.word	0x080059c9
 8005968:	08005a8d 	.word	0x08005a8d
 800596c:	08005a8d 	.word	0x08005a8d
 8005970:	08005a8d 	.word	0x08005a8d
 8005974:	08005a0b 	.word	0x08005a0b
 8005978:	08005a8d 	.word	0x08005a8d
 800597c:	08005a8d 	.word	0x08005a8d
 8005980:	08005a8d 	.word	0x08005a8d
 8005984:	08005a4b 	.word	0x08005a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f9d0 	bl	8005d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0208 	orr.w	r2, r2, #8
 80059a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0204 	bic.w	r2, r2, #4
 80059b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6999      	ldr	r1, [r3, #24]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	619a      	str	r2, [r3, #24]
      break;
 80059c6:	e064      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fa16 	bl	8005e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6999      	ldr	r1, [r3, #24]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	021a      	lsls	r2, r3, #8
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	619a      	str	r2, [r3, #24]
      break;
 8005a08:	e043      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fa61 	bl	8005ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0208 	orr.w	r2, r2, #8
 8005a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0204 	bic.w	r2, r2, #4
 8005a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	61da      	str	r2, [r3, #28]
      break;
 8005a48:	e023      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 faab 	bl	8005fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69d9      	ldr	r1, [r3, #28]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	021a      	lsls	r2, r3, #8
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	61da      	str	r2, [r3, #28]
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0b4      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x186>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af8:	d03e      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xd4>
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afe:	f200 8087 	bhi.w	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	f000 8086 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x172>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d87f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d01a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xa6>
 8005b14:	2b70      	cmp	r3, #112	; 0x70
 8005b16:	d87b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b60      	cmp	r3, #96	; 0x60
 8005b1a:	d050      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x11a>
 8005b1c:	2b60      	cmp	r3, #96	; 0x60
 8005b1e:	d877      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b50      	cmp	r3, #80	; 0x50
 8005b22:	d03c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xfa>
 8005b24:	2b50      	cmp	r3, #80	; 0x50
 8005b26:	d873      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d058      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x13a>
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d86f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d064      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d86b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d060      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d867      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d05c      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d05a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b48:	e062      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6899      	ldr	r1, [r3, #8]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f000 faf1 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e04f      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f000 fada 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e03c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 fa4e 	bl	800604c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2150      	movs	r1, #80	; 0x50
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 faa7 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e02c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fa6d 	bl	80060aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2160      	movs	r1, #96	; 0x60
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fa97 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e01c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fa2e 	bl	800604c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fa87 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e00c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fa7e 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005c0e:	e003      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <TIM_Base_SetConfig+0xe4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x38>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a31      	ldr	r2, [pc, #196]	; (8005d1c <TIM_Base_SetConfig+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x38>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a30      	ldr	r2, [pc, #192]	; (8005d20 <TIM_Base_SetConfig+0xec>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x38>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2f      	ldr	r2, [pc, #188]	; (8005d24 <TIM_Base_SetConfig+0xf0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <TIM_Base_SetConfig+0xe4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01b      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d017      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <TIM_Base_SetConfig+0xe8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <TIM_Base_SetConfig+0xec>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <TIM_Base_SetConfig+0xf0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <TIM_Base_SetConfig+0xf4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <TIM_Base_SetConfig+0xf8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <TIM_Base_SetConfig+0xfc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <TIM_Base_SetConfig+0xe4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d103      	bne.n	8005d04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	615a      	str	r2, [r3, #20]
}
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0302 	bic.w	r3, r3, #2
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <TIM_OC1_SetConfig+0xc8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10c      	bne.n	8005daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0308 	bic.w	r3, r3, #8
 8005d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <TIM_OC1_SetConfig+0xc8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d111      	bne.n	8005dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40010000 	.word	0x40010000

08005e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0210 	bic.w	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0320 	bic.w	r3, r3, #32
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <TIM_OC2_SetConfig+0xd4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10d      	bne.n	8005e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <TIM_OC2_SetConfig+0xd4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d113      	bne.n	8005eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000

08005ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10d      	bne.n	8005f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d113      	bne.n	8005f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40010000 	.word	0x40010000

08005fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a10      	ldr	r2, [pc, #64]	; (8006048 <TIM_OC4_SetConfig+0x9c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000

0800604c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 030a 	bic.w	r3, r3, #10
 8006088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0210 	bic.w	r2, r3, #16
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	f043 0307 	orr.w	r3, r3, #7
 800612c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e050      	b.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d013      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a18      	ldr	r2, [pc, #96]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a16      	ldr	r2, [pc, #88]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10c      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40014000 	.word	0x40014000

080062a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e03f      	b.n	800633a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fbe6 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	; 0x24
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 ff9b 	bl	8007228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b08a      	sub	sp, #40	; 0x28
 8006346:	af02      	add	r7, sp, #8
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	d17c      	bne.n	800645c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_UART_Transmit+0x2c>
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e075      	b.n	800645e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_UART_Transmit+0x3e>
 800637c:	2302      	movs	r3, #2
 800637e:	e06e      	b.n	800645e <HAL_UART_Transmit+0x11c>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2221      	movs	r2, #33	; 0x21
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006396:	f7fc fd15 	bl	8002dc4 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x82>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063d4:	e02a      	b.n	800642c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2200      	movs	r2, #0
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fc53 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e036      	b.n	800645e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	3302      	adds	r3, #2
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	e007      	b.n	800641e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	781a      	ldrb	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1cf      	bne.n	80063d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2200      	movs	r2, #0
 800643e:	2140      	movs	r1, #64	; 0x40
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fc23 	bl	8006c8c <UART_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b08c      	sub	sp, #48	; 0x30
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	4613      	mov	r3, r2
 8006472:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b20      	cmp	r3, #32
 800647e:	d152      	bne.n	8006526 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e04b      	b.n	8006528 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800649a:	2302      	movs	r3, #2
 800649c:	e044      	b.n	8006528 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	461a      	mov	r2, r3
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fc58 	bl	8006d68 <UART_Start_Receive_DMA>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d12c      	bne.n	8006520 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d125      	bne.n	800651a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	617b      	str	r3, [r7, #20]
   return(result);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f043 0310 	orr.w	r3, r3, #16
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006504:	627a      	str	r2, [r7, #36]	; 0x24
 8006506:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	61fb      	str	r3, [r7, #28]
   return(result);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006518:	e002      	b.n	8006520 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006524:	e000      	b.n	8006528 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3730      	adds	r7, #48	; 0x30
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b0ba      	sub	sp, #232	; 0xe8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006556:	2300      	movs	r3, #0
 8006558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800656e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10f      	bne.n	8006596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <HAL_UART_IRQHandler+0x66>
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fd8f 	bl	80070b2 <UART_Receive_IT>
      return;
 8006594:	e256      	b.n	8006a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80de 	beq.w	800675c <HAL_UART_IRQHandler+0x22c>
 80065a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80d1 	beq.w	800675c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_UART_IRQHandler+0xae>
 80065c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0201 	orr.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00b      	beq.n	8006602 <HAL_UART_IRQHandler+0xd2>
 80065ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0202 	orr.w	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <HAL_UART_IRQHandler+0xf6>
 800660e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <HAL_UART_IRQHandler+0x126>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800663e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f043 0208 	orr.w	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 81ed 	beq.w	8006a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_UART_IRQHandler+0x14e>
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fd1a 	bl	80070b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <HAL_UART_IRQHandler+0x17a>
 80066a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04f      	beq.n	800674a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fc22 	bl	8006ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d141      	bne.n	8006742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3314      	adds	r3, #20
 80066e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1d9      	bne.n	80066be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	2b00      	cmp	r3, #0
 8006710:	d013      	beq.n	800673a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	4a7d      	ldr	r2, [pc, #500]	; (800690c <HAL_UART_IRQHandler+0x3dc>)
 8006718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	4618      	mov	r0, r3
 8006720:	f7fc fe08 	bl	8003334 <HAL_DMA_Abort_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e00e      	b.n	8006758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9a4 	bl	8006a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	e00a      	b.n	8006758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9a0 	bl	8006a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	e006      	b.n	8006758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f99c 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006756:	e170      	b.n	8006a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	bf00      	nop
    return;
 800675a:	e16e      	b.n	8006a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	2b01      	cmp	r3, #1
 8006762:	f040 814a 	bne.w	80069fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 8143 	beq.w	80069fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 813c 	beq.w	80069fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	f040 80b4 	bne.w	8006910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8140 	beq.w	8006a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067c6:	429a      	cmp	r2, r3
 80067c8:	f080 8139 	bcs.w	8006a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	f000 8088 	beq.w	80068f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800680e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800681a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1d9      	bne.n	80067e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800683e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800685a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e1      	bne.n	800682e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3314      	adds	r3, #20
 8006870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800687a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800687c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3314      	adds	r3, #20
 800688a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800688e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800689c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e3      	bne.n	800686a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c2:	f023 0310 	bic.w	r3, r3, #16
 80068c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	330c      	adds	r3, #12
 80068d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80068d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e3      	bne.n	80068b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fc fcb1 	bl	8003254 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fa fb94 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006908:	e099      	b.n	8006a3e <HAL_UART_IRQHandler+0x50e>
 800690a:	bf00      	nop
 800690c:	08006fbb 	.word	0x08006fbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006918:	b29b      	uxth	r3, r3
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 808b 	beq.w	8006a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800692c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8086 	beq.w	8006a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800695a:	647a      	str	r2, [r7, #68]	; 0x44
 800695c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e3      	bne.n	8006936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	623b      	str	r3, [r7, #32]
   return(result);
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3314      	adds	r3, #20
 800698e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006992:	633a      	str	r2, [r7, #48]	; 0x30
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e3      	bne.n	800696e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069d8:	61fa      	str	r2, [r7, #28]
 80069da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	617b      	str	r3, [r7, #20]
   return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e3      	bne.n	80069b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fa fb1c 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069f8:	e023      	b.n	8006a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_UART_IRQHandler+0x4ea>
 8006a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fae5 	bl	8006fe2 <UART_Transmit_IT>
    return;
 8006a18:	e014      	b.n	8006a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00e      	beq.n	8006a44 <HAL_UART_IRQHandler+0x514>
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb25 	bl	8007082 <UART_EndTransmit_IT>
    return;
 8006a38:	e004      	b.n	8006a44 <HAL_UART_IRQHandler+0x514>
    return;
 8006a3a:	bf00      	nop
 8006a3c:	e002      	b.n	8006a44 <HAL_UART_IRQHandler+0x514>
      return;
 8006a3e:	bf00      	nop
 8006a40:	e000      	b.n	8006a44 <HAL_UART_IRQHandler+0x514>
      return;
 8006a42:	bf00      	nop
  }
}
 8006a44:	37e8      	adds	r7, #232	; 0xe8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop

08006a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b09c      	sub	sp, #112	; 0x70
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d172      	bne.n	8006b9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	2200      	movs	r2, #0
 8006abc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	667b      	str	r3, [r7, #100]	; 0x64
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b12:	647a      	str	r2, [r7, #68]	; 0x44
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	623b      	str	r3, [r7, #32]
   return(result);
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3314      	adds	r3, #20
 8006b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b46:	633a      	str	r2, [r7, #48]	; 0x30
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e5      	bne.n	8006b26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d119      	bne.n	8006b9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b8a:	61fa      	str	r2, [r7, #28]
 8006b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	69b9      	ldr	r1, [r7, #24]
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	617b      	str	r3, [r7, #20]
   return(result);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d106      	bne.n	8006bb4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006baa:	4619      	mov	r1, r3
 8006bac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bae:	f7fa fa3f 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bb2:	e002      	b.n	8006bba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006bb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bb6:	f7ff ff53 	bl	8006a60 <HAL_UART_RxCpltCallback>
}
 8006bba:	bf00      	nop
 8006bbc:	3770      	adds	r7, #112	; 0x70
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d108      	bne.n	8006bea <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7fa fa24 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be8:	e002      	b.n	8006bf0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff ff42 	bl	8006a74 <HAL_UART_RxHalfCpltCallback>
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b21      	cmp	r3, #33	; 0x21
 8006c2a:	d108      	bne.n	8006c3e <UART_DMAError+0x46>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c38:	68b8      	ldr	r0, [r7, #8]
 8006c3a:	f000 f933 	bl	8006ea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b22      	cmp	r3, #34	; 0x22
 8006c5e:	d108      	bne.n	8006c72 <UART_DMAError+0x7a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c6c:	68b8      	ldr	r0, [r7, #8]
 8006c6e:	f000 f941 	bl	8006ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0210 	orr.w	r2, r3, #16
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f7ff ff02 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b090      	sub	sp, #64	; 0x40
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9c:	e050      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d04c      	beq.n	8006d40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006cac:	f7fc f88a 	bl	8002dc4 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d241      	bcs.n	8006d40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cdc:	637a      	str	r2, [r7, #52]	; 0x34
 8006cde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e5      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d10:	623a      	str	r2, [r7, #32]
 8006d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e00f      	b.n	8006d60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d09f      	beq.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3740      	adds	r7, #64	; 0x40
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b098      	sub	sp, #96	; 0x60
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2222      	movs	r2, #34	; 0x22
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	4a40      	ldr	r2, [pc, #256]	; (8006e98 <UART_Start_Receive_DMA+0x130>)
 8006d96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	4a3f      	ldr	r2, [pc, #252]	; (8006e9c <UART_Start_Receive_DMA+0x134>)
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	4a3e      	ldr	r2, [pc, #248]	; (8006ea0 <UART_Start_Receive_DMA+0x138>)
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	2200      	movs	r2, #0
 8006dae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	f7fc f9ec 	bl	80031a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d019      	beq.n	8006e26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e46:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	653b      	str	r3, [r7, #80]	; 0x50
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6a39      	ldr	r1, [r7, #32]
 8006e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3760      	adds	r7, #96	; 0x60
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	08006a9d 	.word	0x08006a9d
 8006e9c:	08006bc3 	.word	0x08006bc3
 8006ea0:	08006bf9 	.word	0x08006bf9

08006ea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ec2:	61fb      	str	r3, [r7, #28]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	61ba      	str	r2, [r7, #24]
 8006ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ee8:	bf00      	nop
 8006eea:	3724      	adds	r7, #36	; 0x24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b095      	sub	sp, #84	; 0x54
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f1c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e5      	bne.n	8006f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d119      	bne.n	8006fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	647b      	str	r3, [r7, #68]	; 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f8c:	61ba      	str	r2, [r7, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	613b      	str	r3, [r7, #16]
   return(result);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fae:	bf00      	nop
 8006fb0:	3754      	adds	r7, #84	; 0x54
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fd57 	bl	8006a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b21      	cmp	r3, #33	; 0x21
 8006ff4:	d13e      	bne.n	8007074 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	d114      	bne.n	800702a <UART_Transmit_IT+0x48>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d110      	bne.n	800702a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800701c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	1c9a      	adds	r2, r3, #2
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	621a      	str	r2, [r3, #32]
 8007028:	e008      	b.n	800703c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6211      	str	r1, [r2, #32]
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b01      	subs	r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4619      	mov	r1, r3
 800704a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007098:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff fcd2 	bl	8006a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b08c      	sub	sp, #48	; 0x30
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b22      	cmp	r3, #34	; 0x22
 80070c4:	f040 80ab 	bne.w	800721e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d0:	d117      	bne.n	8007102 <UART_Receive_IT+0x50>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d113      	bne.n	8007102 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	1c9a      	adds	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007100:	e026      	b.n	8007150 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007108:	2300      	movs	r3, #0
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007114:	d007      	beq.n	8007126 <UART_Receive_IT+0x74>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <UART_Receive_IT+0x82>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e008      	b.n	8007146 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007140:	b2da      	uxtb	r2, r3
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4619      	mov	r1, r3
 800715e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007160:	2b00      	cmp	r3, #0
 8007162:	d15a      	bne.n	800721a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0220 	bic.w	r2, r2, #32
 8007172:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d135      	bne.n	8007210 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f023 0310 	bic.w	r3, r3, #16
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	623a      	str	r2, [r7, #32]
 80071cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	69f9      	ldr	r1, [r7, #28]
 80071d0:	6a3a      	ldr	r2, [r7, #32]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d10a      	bne.n	8007202 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7f9 ff11 	bl	8001030 <HAL_UARTEx_RxEventCallback>
 800720e:	e002      	b.n	8007216 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fc25 	bl	8006a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e002      	b.n	8007220 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e000      	b.n	8007220 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
  }
}
 8007220:	4618      	mov	r0, r3
 8007222:	3730      	adds	r7, #48	; 0x30
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800722c:	b0c0      	sub	sp, #256	; 0x100
 800722e:	af00      	add	r7, sp, #0
 8007230:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	ea40 0301 	orr.w	r3, r0, r1
 8007250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	431a      	orrs	r2, r3
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007280:	f021 010c 	bic.w	r1, r1, #12
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800728e:	430b      	orrs	r3, r1
 8007290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a2:	6999      	ldr	r1, [r3, #24]
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	ea40 0301 	orr.w	r3, r0, r1
 80072ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b8f      	ldr	r3, [pc, #572]	; (80074f4 <UART_SetConfig+0x2cc>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d005      	beq.n	80072c8 <UART_SetConfig+0xa0>
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <UART_SetConfig+0x2d0>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d104      	bne.n	80072d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072c8:	f7fe f9be 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 80072cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072d0:	e003      	b.n	80072da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072d2:	f7fe f9a5 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 80072d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e4:	f040 810c 	bne.w	8007500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	1891      	adds	r1, r2, r2
 8007300:	65b9      	str	r1, [r7, #88]	; 0x58
 8007302:	415b      	adcs	r3, r3
 8007304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800730a:	4621      	mov	r1, r4
 800730c:	eb12 0801 	adds.w	r8, r2, r1
 8007310:	4629      	mov	r1, r5
 8007312:	eb43 0901 	adc.w	r9, r3, r1
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800732a:	4690      	mov	r8, r2
 800732c:	4699      	mov	r9, r3
 800732e:	4623      	mov	r3, r4
 8007330:	eb18 0303 	adds.w	r3, r8, r3
 8007334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007338:	462b      	mov	r3, r5
 800733a:	eb49 0303 	adc.w	r3, r9, r3
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800734e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007356:	460b      	mov	r3, r1
 8007358:	18db      	adds	r3, r3, r3
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
 800735c:	4613      	mov	r3, r2
 800735e:	eb42 0303 	adc.w	r3, r2, r3
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
 8007364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800736c:	f7f9 fbae 	bl	8000acc <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4b61      	ldr	r3, [pc, #388]	; (80074fc <UART_SetConfig+0x2d4>)
 8007376:	fba3 2302 	umull	r2, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	011c      	lsls	r4, r3, #4
 800737e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007382:	2200      	movs	r2, #0
 8007384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007388:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800738c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	1891      	adds	r1, r2, r2
 8007396:	64b9      	str	r1, [r7, #72]	; 0x48
 8007398:	415b      	adcs	r3, r3
 800739a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800739c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073a0:	4641      	mov	r1, r8
 80073a2:	eb12 0a01 	adds.w	sl, r2, r1
 80073a6:	4649      	mov	r1, r9
 80073a8:	eb43 0b01 	adc.w	fp, r3, r1
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c0:	4692      	mov	sl, r2
 80073c2:	469b      	mov	fp, r3
 80073c4:	4643      	mov	r3, r8
 80073c6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ce:	464b      	mov	r3, r9
 80073d0:	eb4b 0303 	adc.w	r3, fp, r3
 80073d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073ec:	460b      	mov	r3, r1
 80073ee:	18db      	adds	r3, r3, r3
 80073f0:	643b      	str	r3, [r7, #64]	; 0x40
 80073f2:	4613      	mov	r3, r2
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
 80073fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007402:	f7f9 fb63 	bl	8000acc <__aeabi_uldivmod>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4611      	mov	r1, r2
 800740c:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <UART_SetConfig+0x2d4>)
 800740e:	fba3 2301 	umull	r2, r3, r3, r1
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	2264      	movs	r2, #100	; 0x64
 8007416:	fb02 f303 	mul.w	r3, r2, r3
 800741a:	1acb      	subs	r3, r1, r3
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007422:	4b36      	ldr	r3, [pc, #216]	; (80074fc <UART_SetConfig+0x2d4>)
 8007424:	fba3 2302 	umull	r2, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007430:	441c      	add	r4, r3
 8007432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007436:	2200      	movs	r2, #0
 8007438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800743c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	1891      	adds	r1, r2, r2
 800744a:	63b9      	str	r1, [r7, #56]	; 0x38
 800744c:	415b      	adcs	r3, r3
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007454:	4641      	mov	r1, r8
 8007456:	1851      	adds	r1, r2, r1
 8007458:	6339      	str	r1, [r7, #48]	; 0x30
 800745a:	4649      	mov	r1, r9
 800745c:	414b      	adcs	r3, r1
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800746c:	4659      	mov	r1, fp
 800746e:	00cb      	lsls	r3, r1, #3
 8007470:	4651      	mov	r1, sl
 8007472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007476:	4651      	mov	r1, sl
 8007478:	00ca      	lsls	r2, r1, #3
 800747a:	4610      	mov	r0, r2
 800747c:	4619      	mov	r1, r3
 800747e:	4603      	mov	r3, r0
 8007480:	4642      	mov	r2, r8
 8007482:	189b      	adds	r3, r3, r2
 8007484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007488:	464b      	mov	r3, r9
 800748a:	460a      	mov	r2, r1
 800748c:	eb42 0303 	adc.w	r3, r2, r3
 8007490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074a8:	460b      	mov	r3, r1
 80074aa:	18db      	adds	r3, r3, r3
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ae:	4613      	mov	r3, r2
 80074b0:	eb42 0303 	adc.w	r3, r2, r3
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074be:	f7f9 fb05 	bl	8000acc <__aeabi_uldivmod>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <UART_SetConfig+0x2d4>)
 80074c8:	fba3 1302 	umull	r1, r3, r3, r2
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	2164      	movs	r1, #100	; 0x64
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	3332      	adds	r3, #50	; 0x32
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <UART_SetConfig+0x2d4>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4422      	add	r2, r4
 80074ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074f0:	e106      	b.n	8007700 <UART_SetConfig+0x4d8>
 80074f2:	bf00      	nop
 80074f4:	40011000 	.word	0x40011000
 80074f8:	40011400 	.word	0x40011400
 80074fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007504:	2200      	movs	r2, #0
 8007506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800750a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800750e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007512:	4642      	mov	r2, r8
 8007514:	464b      	mov	r3, r9
 8007516:	1891      	adds	r1, r2, r2
 8007518:	6239      	str	r1, [r7, #32]
 800751a:	415b      	adcs	r3, r3
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
 800751e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007522:	4641      	mov	r1, r8
 8007524:	1854      	adds	r4, r2, r1
 8007526:	4649      	mov	r1, r9
 8007528:	eb43 0501 	adc.w	r5, r3, r1
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	00eb      	lsls	r3, r5, #3
 8007536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800753a:	00e2      	lsls	r2, r4, #3
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	4643      	mov	r3, r8
 8007542:	18e3      	adds	r3, r4, r3
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007548:	464b      	mov	r3, r9
 800754a:	eb45 0303 	adc.w	r3, r5, r3
 800754e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800755e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800756e:	4629      	mov	r1, r5
 8007570:	008b      	lsls	r3, r1, #2
 8007572:	4621      	mov	r1, r4
 8007574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007578:	4621      	mov	r1, r4
 800757a:	008a      	lsls	r2, r1, #2
 800757c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007580:	f7f9 faa4 	bl	8000acc <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4b60      	ldr	r3, [pc, #384]	; (800770c <UART_SetConfig+0x4e4>)
 800758a:	fba3 2302 	umull	r2, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	011c      	lsls	r4, r3, #4
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800759c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	1891      	adds	r1, r2, r2
 80075aa:	61b9      	str	r1, [r7, #24]
 80075ac:	415b      	adcs	r3, r3
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b4:	4641      	mov	r1, r8
 80075b6:	1851      	adds	r1, r2, r1
 80075b8:	6139      	str	r1, [r7, #16]
 80075ba:	4649      	mov	r1, r9
 80075bc:	414b      	adcs	r3, r1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075cc:	4659      	mov	r1, fp
 80075ce:	00cb      	lsls	r3, r1, #3
 80075d0:	4651      	mov	r1, sl
 80075d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d6:	4651      	mov	r1, sl
 80075d8:	00ca      	lsls	r2, r1, #3
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	4642      	mov	r2, r8
 80075e2:	189b      	adds	r3, r3, r2
 80075e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075e8:	464b      	mov	r3, r9
 80075ea:	460a      	mov	r2, r1
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80075fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800760c:	4649      	mov	r1, r9
 800760e:	008b      	lsls	r3, r1, #2
 8007610:	4641      	mov	r1, r8
 8007612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007616:	4641      	mov	r1, r8
 8007618:	008a      	lsls	r2, r1, #2
 800761a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800761e:	f7f9 fa55 	bl	8000acc <__aeabi_uldivmod>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4611      	mov	r1, r2
 8007628:	4b38      	ldr	r3, [pc, #224]	; (800770c <UART_SetConfig+0x4e4>)
 800762a:	fba3 2301 	umull	r2, r3, r3, r1
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2264      	movs	r2, #100	; 0x64
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	1acb      	subs	r3, r1, r3
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	3332      	adds	r3, #50	; 0x32
 800763c:	4a33      	ldr	r2, [pc, #204]	; (800770c <UART_SetConfig+0x4e4>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007648:	441c      	add	r4, r3
 800764a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764e:	2200      	movs	r2, #0
 8007650:	673b      	str	r3, [r7, #112]	; 0x70
 8007652:	677a      	str	r2, [r7, #116]	; 0x74
 8007654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	1891      	adds	r1, r2, r2
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	415b      	adcs	r3, r3
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007668:	4641      	mov	r1, r8
 800766a:	1851      	adds	r1, r2, r1
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	4649      	mov	r1, r9
 8007670:	414b      	adcs	r3, r1
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007680:	4659      	mov	r1, fp
 8007682:	00cb      	lsls	r3, r1, #3
 8007684:	4651      	mov	r1, sl
 8007686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800768a:	4651      	mov	r1, sl
 800768c:	00ca      	lsls	r2, r1, #3
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	4603      	mov	r3, r0
 8007694:	4642      	mov	r2, r8
 8007696:	189b      	adds	r3, r3, r2
 8007698:	66bb      	str	r3, [r7, #104]	; 0x68
 800769a:	464b      	mov	r3, r9
 800769c:	460a      	mov	r2, r1
 800769e:	eb42 0303 	adc.w	r3, r2, r3
 80076a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	663b      	str	r3, [r7, #96]	; 0x60
 80076ae:	667a      	str	r2, [r7, #100]	; 0x64
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076bc:	4649      	mov	r1, r9
 80076be:	008b      	lsls	r3, r1, #2
 80076c0:	4641      	mov	r1, r8
 80076c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c6:	4641      	mov	r1, r8
 80076c8:	008a      	lsls	r2, r1, #2
 80076ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076ce:	f7f9 f9fd 	bl	8000acc <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <UART_SetConfig+0x4e4>)
 80076d8:	fba3 1302 	umull	r1, r3, r3, r2
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	2164      	movs	r1, #100	; 0x64
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	3332      	adds	r3, #50	; 0x32
 80076ea:	4a08      	ldr	r2, [pc, #32]	; (800770c <UART_SetConfig+0x4e4>)
 80076ec:	fba2 2303 	umull	r2, r3, r2, r3
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4422      	add	r2, r4
 80076fe:	609a      	str	r2, [r3, #8]
}
 8007700:	bf00      	nop
 8007702:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007706:	46bd      	mov	sp, r7
 8007708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770c:	51eb851f 	.word	0x51eb851f

08007710 <VL53LX_DataInit>:
	return Status;
}


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007718:	2300      	movs	r3, #0
 800771a:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 800771c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8007724:	2101      	movs	r1, #1
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fa01 	bl	8008b2e <VL53LX_data_init>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8007730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8007738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800773c:	2102      	movs	r1, #2
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f884 	bl	800784c <SetPresetModeL3CX>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8007748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007750:	f248 2135 	movw	r1, #33333	; 0x8235
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8ef 	bl	8007938 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 800775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8007770:	3318      	adds	r3, #24
 8007772:	220c      	movs	r2, #12
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f00f ffbc 	bl	80176f4 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 800777c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8007784:	2102      	movs	r1, #2
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f003 fb90 	bl	800aeac <VL53LX_set_dmax_mode>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8007790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8007798:	2100      	movs	r1, #0
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fd8a 	bl	80082b4 <VL53LX_SmudgeCorrectionEnable>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80077a4:	2320      	movs	r3, #32
 80077a6:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	7bfa      	ldrb	r2, [r7, #15]
 80077ac:	70da      	strb	r2, [r3, #3]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077b4:	2202      	movs	r2, #2
 80077b6:	f883 2a40 	strb.w	r2, [r3, #2624]	; 0xa40
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80077ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80077d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f00e fdb4 	bl	8016344 <VL53LX_poll_for_boot_completion>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80077e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 80077fc:	4a12      	ldr	r2, [pc, #72]	; (8007848 <ComputeDevicePresetMode+0x5c>)
 80077fe:	f107 0308 	add.w	r3, r7, #8
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	4611      	mov	r1, r2
 8007806:	8019      	strh	r1, [r3, #0]
 8007808:	3302      	adds	r3, #2
 800780a:	0c12      	lsrs	r2, r2, #16
 800780c:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d002      	beq.n	800781a <ComputeDevicePresetMode+0x2e>
 8007814:	2b02      	cmp	r3, #2
 8007816:	d003      	beq.n	8007820 <ComputeDevicePresetMode+0x34>
 8007818:	e005      	b.n	8007826 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
		break;
 800781e:	e004      	b.n	800782a <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
		break;
 8007824:	e001      	b.n	800782a <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8007826:	2302      	movs	r3, #2
 8007828:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	3310      	adds	r3, #16
 800782e:	443b      	add	r3, r7
 8007830:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	701a      	strb	r2, [r3, #0]

	return Status;
 8007838:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	0801886c 	.word	0x0801886c

0800784c <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800784c:	b5b0      	push	{r4, r5, r7, lr}
 800784e:	b08e      	sub	sp, #56	; 0x38
 8007850:	af04      	add	r7, sp, #16
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	460b      	mov	r3, r1
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800785a:	2300      	movs	r3, #0
 800785c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8007870:	2320      	movs	r3, #32
 8007872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8007876:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff ffb4 	bl	80077ec <ComputeDevicePresetMode>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 800788a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800788e:	2b00      	cmp	r3, #0
 8007890:	d112      	bne.n	80078b8 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8007892:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8007896:	f107 001c 	add.w	r0, r7, #28
 800789a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800789e:	f107 0314 	add.w	r3, r7, #20
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f107 0318 	add.w	r3, r7, #24
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4603      	mov	r3, r0
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f001 fd3c 	bl	800932a <VL53LX_get_preset_mode_timing_cfg>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80078b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d112      	bne.n	80078e6 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80078c0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80078c4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80078c6:	69fd      	ldr	r5, [r7, #28]
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	9102      	str	r1, [sp, #8]
 80078d0:	9201      	str	r2, [sp, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	462b      	mov	r3, r5
 80078d6:	4622      	mov	r2, r4
 80078d8:	4601      	mov	r1, r0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 fd85 	bl	80093ea <VL53LX_set_preset_mode>
 80078e0:	4603      	mov	r3, r0
 80078e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80078e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80078f4:	70da      	strb	r2, [r3, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 80078f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3728      	adds	r7, #40	; 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bdb0      	pop	{r4, r5, r7, pc}

08007902 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f893 33cb 	ldrb.w	r3, [r3, #971]	; 0x3cb
 8007918:	2baa      	cmp	r3, #170	; 0xaa
 800791a:	d106      	bne.n	800792a <IsL4+0x28>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f893 33ca 	ldrb.w	r3, [r3, #970]	; 0x3ca
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8007922:	2beb      	cmp	r3, #235	; 0xeb
 8007924:	d101      	bne.n	800792a <IsL4+0x28>
		devL4 = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
	return devL4;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007942:	2300      	movs	r3, #0
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8007956:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4a31      	ldr	r2, [pc, #196]	; (8007a20 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d902      	bls.n	8007966 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8007960:	23fc      	movs	r3, #252	; 0xfc
 8007962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8007966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	f107 0210 	add.w	r2, r7, #16
 8007976:	f107 010c 	add.w	r1, r7, #12
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fc13 	bl	80091a6 <VL53LX_get_timeouts_us>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8007986:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800798a:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 800798c:	2306      	movs	r3, #6
 800798e:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ffb6 	bl	8007902 <IsL4>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 800799c:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 800799e:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80079a8:	23fc      	movs	r3, #252	; 0xfc
 80079aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079ae:	e003      	b.n	80079b8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80079b6:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80079b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11c      	bne.n	80079fa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d203      	bcs.n	80079d0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80079c8:	23fc      	movs	r3, #252	; 0xfc
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079ce:	e00d      	b.n	80079ec <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fba8 	bl	8009136 <VL53LX_set_timeouts_us>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80079ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80079fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd8>
		VL53LXDevDataSet(Dev,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a08:	461a      	mov	r2, r3
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f8c2 3a44 	str.w	r3, [r2, #2628]	; 0xa44
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3728      	adds	r7, #40	; 0x28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	00086470 	.word	0x00086470
 8007a20:	00989680 	.word	0x00989680
 8007a24:	00030d40 	.word	0x00030d40

08007a28 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 ff15 	bl	8008868 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75bb      	strb	r3, [r7, #22]
 8007a42:	e01a      	b.n	8007a7a <VL53LX_StartMeasurement+0x52>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8007a44:	7dbb      	ldrb	r3, [r7, #22]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8007a54:	7dbb      	ldrb	r3, [r7, #22]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007a5e:	3310      	adds	r3, #16
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007a6e:	3314      	adds	r3, #20
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8007a74:	7dbb      	ldrb	r3, [r7, #22]
 8007a76:	3301      	adds	r3, #1
 8007a78:	75bb      	strb	r3, [r7, #22]
 8007a7a:	7dbb      	ldrb	r3, [r7, #22]
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d9e1      	bls.n	8007a44 <VL53LX_StartMeasurement+0x1c>
	}
	pdev->PreviousStreamCount = 0;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	78db      	ldrb	r3, [r3, #3]
 8007a90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8007a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d107      	bne.n	8007aaa <VL53LX_StartMeasurement+0x82>
		Status = VL53LX_init_and_start_range(
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2206      	movs	r2, #6
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fd67 	bl	8009574 <VL53LX_init_and_start_range>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8007aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f002 f824 	bl	8009b10 <VL53LX_stop_range>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fff9 	bl	8008ac4 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8007ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	78db      	ldrb	r3, [r3, #3]
 8007aee:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 fd1d 	bl	800a534 <VL53LX_clear_interrupt_and_enable_next_range>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8007afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	3b05      	subs	r3, #5
 8007b1a:	2b12      	cmp	r3, #18
 8007b1c:	d840      	bhi.n	8007ba0 <ConvertStatusHisto+0x94>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <ConvertStatusHisto+0x18>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b71 	.word	0x08007b71
 8007b28:	08007b77 	.word	0x08007b77
 8007b2c:	08007b83 	.word	0x08007b83
 8007b30:	08007ba1 	.word	0x08007ba1
 8007b34:	08007b9b 	.word	0x08007b9b
 8007b38:	08007ba1 	.word	0x08007ba1
 8007b3c:	08007ba1 	.word	0x08007ba1
 8007b40:	08007ba1 	.word	0x08007ba1
 8007b44:	08007ba1 	.word	0x08007ba1
 8007b48:	08007ba1 	.word	0x08007ba1
 8007b4c:	08007ba1 	.word	0x08007ba1
 8007b50:	08007ba1 	.word	0x08007ba1
 8007b54:	08007ba1 	.word	0x08007ba1
 8007b58:	08007ba1 	.word	0x08007ba1
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007ba1 	.word	0x08007ba1
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	08007b89 	.word	0x08007b89
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8007b70:	2304      	movs	r3, #4
 8007b72:	73fb      	strb	r3, [r7, #15]
		break;
 8007b74:	e016      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
		break;
 8007b7a:	e013      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8007b7c:	2306      	movs	r3, #6
 8007b7e:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8007b80:	e010      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8007b82:	2307      	movs	r3, #7
 8007b84:	73fb      	strb	r3, [r7, #15]
		break;
 8007b86:	e00d      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8007b88:	230c      	movs	r3, #12
 8007b8a:	73fb      	strb	r3, [r7, #15]
		break;
 8007b8c:	e00a      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8007b8e:	2307      	movs	r3, #7
 8007b90:	73fb      	strb	r3, [r7, #15]
		break;
 8007b92:	e007      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8007b94:	230b      	movs	r3, #11
 8007b96:	73fb      	strb	r3, [r7, #15]
		break;
 8007b98:	e004      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]
		break;
 8007b9e:	e001      	b.n	8007ba4 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8007ba0:	23ff      	movs	r3, #255	; 0xff
 8007ba2:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop

08007bb4 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08e      	sub	sp, #56	; 0x38
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	70fb      	strb	r3, [r7, #3]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70bb      	strb	r3, [r7, #2]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8007be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007bf6:	025b      	lsls	r3, r3, #9
 8007bf8:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8007c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c02:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007c04:	025b      	lsls	r3, r3, #9
 8007c06:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007c12:	025b      	lsls	r3, r3, #9
 8007c14:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8007c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c24:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8007c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c28:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8007c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2e:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8007c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c32:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8007c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c38:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8007c3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007c3e:	2b11      	cmp	r3, #17
 8007c40:	d009      	beq.n	8007c56 <SetTargetData+0xa2>
 8007c42:	2b11      	cmp	r3, #17
 8007c44:	dc0f      	bgt.n	8007c66 <SetTargetData+0xb2>
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	dc02      	bgt.n	8007c50 <SetTargetData+0x9c>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dc03      	bgt.n	8007c56 <SetTargetData+0xa2>
 8007c4e:	e00a      	b.n	8007c66 <SetTargetData+0xb2>
 8007c50:	2b0d      	cmp	r3, #13
 8007c52:	d004      	beq.n	8007c5e <SetTargetData+0xaa>
 8007c54:	e007      	b.n	8007c66 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8007c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c58:	2205      	movs	r2, #5
 8007c5a:	749a      	strb	r2, [r3, #18]
		break;
 8007c5c:	e006      	b.n	8007c6c <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8007c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c60:	220d      	movs	r2, #13
 8007c62:	749a      	strb	r2, [r3, #18]
		break;
 8007c64:	e002      	b.n	8007c6c <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8007c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c68:	2200      	movs	r2, #0
 8007c6a:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8007c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c6e:	7c9b      	ldrb	r3, [r3, #18]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d117      	bne.n	8007ca4 <SetTargetData+0xf0>
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d114      	bne.n	8007ca4 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7c:	22ff      	movs	r2, #255	; 0xff
 8007c7e:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8007c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c82:	2200      	movs	r2, #0
 8007c84:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8007c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8007c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007c92:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8007c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c96:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007c9a:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8007c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8007ca2:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8007ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca6:	7c9b      	ldrb	r3, [r3, #18]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8007cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff ff2b 	bl	8007b0c <ConvertStatusHisto>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8007cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbc:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f248 0191 	movw	r1, #32913	; 0x8091
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f003 f92d 	bl	800af28 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8007cce:	78bb      	ldrb	r3, [r7, #2]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8007cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cde:	8a1b      	ldrh	r3, [r3, #16]
 8007ce0:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 8007ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce8:	2200      	movs	r2, #0
 8007cea:	74da      	strb	r2, [r3, #19]

	if (ExtendedRangeEnabled &&
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 81db 	beq.w	80080aa <SetTargetData+0x4f6>
		(pRangeData->RangeStatus ==
 8007cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf6:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8007cf8:	2b07      	cmp	r3, #7
 8007cfa:	d004      	beq.n	8007d06 <SetTargetData+0x152>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8007cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfe:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	f040 81d2 	bne.w	80080aa <SetTargetData+0x4f6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8007d06:	787b      	ldrb	r3, [r7, #1]
 8007d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007d10:	3310      	adds	r3, #16
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b07      	cmp	r3, #7
 8007d16:	d01c      	beq.n	8007d52 <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8007d18:	787b      	ldrb	r3, [r7, #1]
 8007d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007d22:	3310      	adds	r3, #16
 8007d24:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d013      	beq.n	8007d52 <SetTargetData+0x19e>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8007d2a:	787b      	ldrb	r3, [r7, #1]
 8007d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007d34:	3310      	adds	r3, #16
 8007d36:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 81b6 	bne.w	80080aa <SetTargetData+0x4f6>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8007d3e:	787b      	ldrb	r3, [r7, #1]
 8007d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007d48:	3314      	adds	r3, #20
 8007d4a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	f040 81ac 	bne.w	80080aa <SetTargetData+0x4f6>
	{
		if (((pdev->PreviousStreamCount) ==
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007d58:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8007d5c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8007d64:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d00c      	beq.n	8007d84 <SetTargetData+0x1d0>
		|| ((pdev->PreviousStreamCount) ==
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007d70:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8007d74:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	f893 3477 	ldrb.w	r3, [r3, #1143]	; 0x477
 8007d7c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	f040 816b 	bne.w	800805a <SetTargetData+0x4a6>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8007d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d86:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007d8a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8007d8c:	787b      	ldrb	r3, [r7, #1]
 8007d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d90:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8007d94:	3304      	adds	r3, #4
 8007d96:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8007d9a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b21      	cmp	r3, #33	; 0x21
 8007dae:	d008      	beq.n	8007dc2 <SetTargetData+0x20e>
 8007db0:	2b21      	cmp	r3, #33	; 0x21
 8007db2:	f300 814e 	bgt.w	8008052 <SetTargetData+0x49e>
 8007db6:	2b1b      	cmp	r3, #27
 8007db8:	f000 80d7 	beq.w	8007f6a <SetTargetData+0x3b6>
 8007dbc:	2b1e      	cmp	r3, #30
 8007dbe:	d004      	beq.n	8007dca <SetTargetData+0x216>
 8007dc0:	e147      	b.n	8008052 <SetTargetData+0x49e>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8007dc8:	e147      	b.n	800805a <SetTargetData+0x4a6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8007dd0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	dd0e      	ble.n	8007df6 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8007dde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	da07      	bge.n	8007df6 <SetTargetData+0x242>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d104      	bne.n	8007df6 <SetTargetData+0x242>
					sequency == 1) {
					AddOffset =
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007df2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007df4:	e0b8      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8007df6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8007e00:	425b      	negs	r3, r3
 8007e02:	429a      	cmp	r2, r3
 8007e04:	da0f      	bge.n	8007e26 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8007e06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8007e10:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dd07      	ble.n	8007e26 <SetTargetData+0x272>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <SetTargetData+0x272>
					sequency == 0) {
					AddOffset =
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8007e22:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e24:	e0a0      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8007e2c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	dd0e      	ble.n	8007e52 <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8007e3a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	da07      	bge.n	8007e52 <SetTargetData+0x29e>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <SetTargetData+0x29e>
					sequency == 0) {
					AddOffset =
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8007e4e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e50:	e08a      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8007e52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8007e5c:	425b      	negs	r3, r3
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	da0f      	bge.n	8007e82 <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8007e62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8007e6c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	dd07      	ble.n	8007e82 <SetTargetData+0x2ce>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d104      	bne.n	8007e82 <SetTargetData+0x2ce>
					sequency == 1) {
					AddOffset =
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8007e7e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e80:	e072      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8007e88:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dd0e      	ble.n	8007eae <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8007e96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	da07      	bge.n	8007eae <SetTargetData+0x2fa>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d104      	bne.n	8007eae <SetTargetData+0x2fa>
					sequency == 1) {
					AddOffset =
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8007eaa:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007eac:	e05c      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8007eae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8007eb8:	425b      	negs	r3, r3
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	da0f      	bge.n	8007ede <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8007ebe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8007ec8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	dd07      	ble.n	8007ede <SetTargetData+0x32a>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <SetTargetData+0x32a>
					sequency == 0) {
					AddOffset =
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8007eda:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007edc:	e044      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8007ee4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	dd0e      	ble.n	8007f0a <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8007ef2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	da07      	bge.n	8007f0a <SetTargetData+0x356>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <SetTargetData+0x356>
					sequency == 0) {
					AddOffset =
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8007f06:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f08:	e02e      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8007f0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8007f14:	425b      	negs	r3, r3
 8007f16:	429a      	cmp	r2, r3
 8007f18:	da0f      	bge.n	8007f3a <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8007f1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8007f24:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8007f26:	429a      	cmp	r2, r3
 8007f28:	dd07      	ble.n	8007f3a <SetTargetData+0x386>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d104      	bne.n	8007f3a <SetTargetData+0x386>
					sequency == 1) {
					AddOffset =
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8007f36:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f38:	e016      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8007f40:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	da0b      	bge.n	8007f60 <SetTargetData+0x3ac>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8007f4e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	dd04      	ble.n	8007f60 <SetTargetData+0x3ac>
					AddOffset =
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8007f5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f5e:	e003      	b.n	8007f68 <SetTargetData+0x3b4>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8007f66:	e078      	b.n	800805a <SetTargetData+0x4a6>
 8007f68:	e077      	b.n	800805a <SetTargetData+0x4a6>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8007f70:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	dd0e      	ble.n	8007f96 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8007f7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	da07      	bge.n	8007f96 <SetTargetData+0x3e2>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <SetTargetData+0x3e2>
					sequency == 0) {
					AddOffset =
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8007f92:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f94:	e05c      	b.n	8008050 <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8007f96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8007fa0:	425b      	negs	r3, r3
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	da0f      	bge.n	8007fc6 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8007fa6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8007fb0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	dd07      	ble.n	8007fc6 <SetTargetData+0x412>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d104      	bne.n	8007fc6 <SetTargetData+0x412>
					sequency == 1) {
					AddOffset =
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8007fc2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007fc4:	e044      	b.n	8008050 <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8007fcc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	dd0e      	ble.n	8007ff2 <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8007fda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	da07      	bge.n	8007ff2 <SetTargetData+0x43e>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d104      	bne.n	8007ff2 <SetTargetData+0x43e>
					sequency == 1) {
					AddOffset =
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8007fee:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ff0:	e02e      	b.n	8008050 <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8007ff2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8007ffc:	425b      	negs	r3, r3
 8007ffe:	429a      	cmp	r2, r3
 8008000:	da0f      	bge.n	8008022 <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8008002:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800800c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800800e:	429a      	cmp	r2, r3
 8008010:	dd07      	ble.n	8008022 <SetTargetData+0x46e>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <SetTargetData+0x46e>
					sequency == 0) {
					AddOffset =
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800801e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008020:	e016      	b.n	8008050 <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8008028:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800802c:	429a      	cmp	r2, r3
 800802e:	da0b      	bge.n	8008048 <SetTargetData+0x494>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8008036:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800803a:	429a      	cmp	r2, r3
 800803c:	dd04      	ble.n	8008048 <SetTargetData+0x494>
					AddOffset =
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008044:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008046:	e003      	b.n	8008050 <SetTargetData+0x49c>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800804e:	e004      	b.n	800805a <SetTargetData+0x4a6>
 8008050:	e003      	b.n	800805a <SetTargetData+0x4a6>

			default:
				uwr_status = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8008058:	bf00      	nop
			}
		}

		if (uwr_status) {
 800805a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800805e:	2b00      	cmp	r3, #0
 8008060:	d023      	beq.n	80080aa <SetTargetData+0x4f6>
			pRangeData->RangeMilliMeter += AddOffset;
 8008062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008064:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008068:	b29a      	uxth	r2, r3
 800806a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800806c:	4413      	add	r3, r2
 800806e:	b29b      	uxth	r3, r3
 8008070:	b21a      	sxth	r2, r3
 8008072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008074:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8008076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008078:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800807c:	b29a      	uxth	r2, r3
 800807e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008080:	4413      	add	r3, r2
 8008082:	b29b      	uxth	r3, r3
 8008084:	b21a      	sxth	r2, r3
 8008086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008088:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800808a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800808c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008090:	b29a      	uxth	r2, r3
 8008092:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008094:	4413      	add	r3, r2
 8008096:	b29b      	uxth	r3, r3
 8008098:	b21a      	sxth	r2, r3
 800809a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800809c:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 800809e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a0:	2201      	movs	r2, #1
 80080a2:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80080a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a6:	2200      	movs	r2, #0
 80080a8:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80080aa:	787b      	ldrb	r3, [r7, #1]
 80080ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ae:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80080b2:	3304      	adds	r3, #4
 80080b4:	8ab9      	ldrh	r1, [r7, #20]
 80080b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80080ba:	787b      	ldrb	r3, [r7, #1]
 80080bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080be:	7c91      	ldrb	r1, [r2, #18]
 80080c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80080c8:	3310      	adds	r3, #16
 80080ca:	460a      	mov	r2, r1
 80080cc:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80080ce:	787b      	ldrb	r3, [r7, #1]
 80080d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d2:	7cd1      	ldrb	r1, [r2, #19]
 80080d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80080dc:	3314      	adds	r3, #20
 80080de:	460a      	mov	r2, r1
 80080e0:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 80080e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e4:	8a1b      	ldrh	r3, [r3, #16]
 80080e6:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80080e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ea:	7c9b      	ldrb	r3, [r3, #18]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d110      	bne.n	8008112 <SetTargetData+0x55e>
 80080f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da0c      	bge.n	8008112 <SetTargetData+0x55e>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 80080f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80080fc:	4b08      	ldr	r3, [pc, #32]	; (8008120 <SetTargetData+0x56c>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	da03      	bge.n	800810c <SetTargetData+0x558>
			pRangeData->RangeStatus =
 8008104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008106:	220e      	movs	r2, #14
 8008108:	749a      	strb	r2, [r3, #18]
 800810a:	e002      	b.n	8008112 <SetTargetData+0x55e>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810e:	2200      	movs	r2, #0
 8008110:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8008112:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8008116:	4618      	mov	r0, r3
 8008118:	3738      	adds	r7, #56	; 0x38
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000028 	.word	0x20000028

08008124 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8008124:	b590      	push	{r4, r7, lr}
 8008126:	b08f      	sub	sp, #60	; 0x3c
 8008128:	af04      	add	r7, sp, #16
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8008134:	2300      	movs	r3, #0
 8008136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	7c9a      	ldrb	r2, [r3, #18]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	78da      	ldrb	r2, [r3, #3]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	7c9b      	ldrb	r3, [r3, #18]
 8008160:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d103      	bne.n	8008170 <SetMeasurementData+0x4c>

		iteration = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800816e:	e002      	b.n	8008176 <SetMeasurementData+0x52>
	else
		iteration = ActiveResults;
 8008170:	7ffb      	ldrb	r3, [r7, #31]
 8008172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8008176:	2300      	movs	r3, #0
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800817c:	e035      	b.n	80081ea <SetMeasurementData+0xc6>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 800817e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	3308      	adds	r3, #8
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8008192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008196:	224c      	movs	r2, #76	; 0x4c
 8008198:	fb02 f303 	mul.w	r3, r2, r3
 800819c:	3310      	adds	r3, #16
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	3304      	adds	r3, #4
 80081a4:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80081a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d113      	bne.n	80081d6 <SetMeasurementData+0xb2>
			Status = SetTargetData(Dev, ActiveResults,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7918      	ldrb	r0, [r3, #4]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	7c1b      	ldrb	r3, [r3, #16]
 80081b6:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80081ba:	7ff9      	ldrb	r1, [r7, #31]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	9202      	str	r2, [sp, #8]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4623      	mov	r3, r4
 80081c8:	4602      	mov	r2, r0
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fcf2 	bl	8007bb4 <SetTargetData>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 80081e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e4:	3301      	adds	r3, #1
 80081e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d3c3      	bcc.n	800817e <SetMeasurementData+0x5a>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f893 2477 	ldrb.w	r2, [r3, #1143]	; 0x477
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008202:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8008206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800820a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800820e:	e01f      	b.n	8008250 <SetMeasurementData+0x12c>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8008210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008214:	6a3a      	ldr	r2, [r7, #32]
 8008216:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800821a:	3304      	adds	r3, #4
 800821c:	2100      	movs	r1, #0
 800821e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8008222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	4413      	add	r3, r2
 800822a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800822e:	3310      	adds	r3, #16
 8008230:	22ff      	movs	r2, #255	; 0xff
 8008232:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8008234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008238:	6a3a      	ldr	r2, [r7, #32]
 800823a:	4413      	add	r3, r2
 800823c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008240:	3314      	adds	r3, #20
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800824a:	3301      	adds	r3, #1
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008254:	2b03      	cmp	r3, #3
 8008256:	d9db      	bls.n	8008210 <SetMeasurementData+0xec>
	}

	return Status;
 8008258:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 800825c:	4618      	mov	r0, r3
 800825e:	372c      	adds	r7, #44	; 0x2c
 8008260:	46bd      	mov	sp, r7
 8008262:	bd90      	pop	{r4, r7, pc}

08008264 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800827c:	3318      	adds	r3, #24
 800827e:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8008280:	225c      	movs	r2, #92	; 0x5c
 8008282:	21ff      	movs	r1, #255	; 0xff
 8008284:	6838      	ldr	r0, [r7, #0]
 8008286:	f00f fa35 	bl	80176f4 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	2102      	movs	r1, #2
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fd4c 	bl	8009d2c <VL53LX_get_device_results>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff ff41 	bl	8008124 <SetMeasurementData>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 80082a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d84a      	bhi.n	800836c <VL53LX_SmudgeCorrectionEnable+0xb8>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <VL53LX_SmudgeCorrectionEnable+0x28>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	0800830d 	.word	0x0800830d
 80082e4:	0800832d 	.word	0x0800832d
 80082e8:	0800834d 	.word	0x0800834d
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f003 fd23 	bl	800bd38 <VL53LX_dynamic_xtalk_correction_disable>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f003 fd34 	bl	800bd64 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80082fc:	4603      	mov	r3, r0
 80082fe:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f003 fd5b 	bl	800bdbc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8008306:	4603      	mov	r3, r0
 8008308:	733b      	strb	r3, [r7, #12]
		break;
 800830a:	e032      	b.n	8008372 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f003 fcfd 	bl	800bd0c <VL53LX_dynamic_xtalk_correction_enable>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f003 fd66 	bl	800bde8 <VL53LX_dynamic_xtalk_correction_apply_enable>
 800831c:	4603      	mov	r3, r0
 800831e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f003 fd4b 	bl	800bdbc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8008326:	4603      	mov	r3, r0
 8008328:	733b      	strb	r3, [r7, #12]
		break;
 800832a:	e022      	b.n	8008372 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f003 fced 	bl	800bd0c <VL53LX_dynamic_xtalk_correction_enable>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f003 fd56 	bl	800bde8 <VL53LX_dynamic_xtalk_correction_apply_enable>
 800833c:	4603      	mov	r3, r0
 800833e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f003 fd25 	bl	800bd90 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8008346:	4603      	mov	r3, r0
 8008348:	733b      	strb	r3, [r7, #12]
		break;
 800834a:	e012      	b.n	8008372 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f003 fcdd 	bl	800bd0c <VL53LX_dynamic_xtalk_correction_enable>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f003 fd04 	bl	800bd64 <VL53LX_dynamic_xtalk_correction_apply_disable>
 800835c:	4603      	mov	r3, r0
 800835e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f003 fd2b 	bl	800bdbc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8008366:	4603      	mov	r3, r0
 8008368:	733b      	strb	r3, [r7, #12]
		break;
 800836a:	e002      	b.n	8008372 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800836c:	23fc      	movs	r3, #252	; 0xfc
 800836e:	73fb      	strb	r3, [r7, #15]
		break;
 8008370:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8008372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10d      	bne.n	8008396 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 800837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8008386:	7b7b      	ldrb	r3, [r7, #13]
 8008388:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 800838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8008392:	7b3b      	ldrb	r3, [r7, #12]
 8008394:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008396:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b21      	cmp	r3, #33	; 0x21
 80083b8:	d006      	beq.n	80083c8 <select_offset_per_vcsel+0x24>
 80083ba:	2b21      	cmp	r3, #33	; 0x21
 80083bc:	dc2b      	bgt.n	8008416 <select_offset_per_vcsel+0x72>
 80083be:	2b1b      	cmp	r3, #27
 80083c0:	d01c      	beq.n	80083fc <select_offset_per_vcsel+0x58>
 80083c2:	2b1e      	cmp	r3, #30
 80083c4:	d00d      	beq.n	80083e2 <select_offset_per_vcsel+0x3e>
 80083c6:	e026      	b.n	8008416 <select_offset_per_vcsel+0x72>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ce:	f8b3 3c38 	ldrh.w	r3, [r3, #3128]	; 0xc38
 80083d2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	f8b3 3c3a 	ldrh.w	r3, [r3, #3130]	; 0xc3a
 80083de:	817b      	strh	r3, [r7, #10]
		break;
 80083e0:	e02b      	b.n	800843a <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e8:	f8b3 3c3c 	ldrh.w	r3, [r3, #3132]	; 0xc3c
 80083ec:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f4:	f8b3 3c3e 	ldrh.w	r3, [r3, #3134]	; 0xc3e
 80083f8:	817b      	strh	r3, [r7, #10]
		break;
 80083fa:	e01e      	b.n	800843a <select_offset_per_vcsel+0x96>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008402:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8008406:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840e:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 8008412:	817b      	strh	r3, [r7, #10]
		break;
 8008414:	e011      	b.n	800843a <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841c:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	; 0xc40
 8008420:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008428:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	; 0xc42
 800842c:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 800842e:	23fc      	movs	r3, #252	; 0xfc
 8008430:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2200      	movs	r2, #0
 8008436:	801a      	strh	r2, [r3, #0]
		break;
 8008438:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008440:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8008442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10b      	bne.n	8008462 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 800844a:	7a7b      	ldrb	r3, [r7, #9]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <select_offset_per_vcsel+0xb6>
 8008454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008458:	e001      	b.n	800845e <select_offset_per_vcsel+0xba>
 800845a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	8013      	strh	r3, [r2, #0]

	return status;
 8008462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8008472:	b490      	push	{r4, r7}
 8008474:	b08a      	sub	sp, #40	; 0x28
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	4611      	mov	r1, r2
 800847e:	461a      	mov	r2, r3
 8008480:	460b      	mov	r3, r1
 8008482:	71fb      	strb	r3, [r7, #7]
 8008484:	4613      	mov	r3, r2
 8008486:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80084a4:	e021      	b.n	80084ea <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80084a6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	461a      	mov	r2, r3
 80084b2:	0052      	lsls	r2, r2, #1
 80084b4:	441a      	add	r2, r3
 80084b6:	00d3      	lsls	r3, r2, #3
 80084b8:	461a      	mov	r2, r3
 80084ba:	460b      	mov	r3, r1
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	440b      	add	r3, r1
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	4413      	add	r3, r2
 80084c4:	4423      	add	r3, r4
 80084c6:	f203 7312 	addw	r3, r3, #1810	; 0x712
 80084ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	4413      	add	r3, r2
 80084d2:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80084d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	3206      	adds	r2, #6
 80084da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80084e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084e6:	3301      	adds	r3, #1
 80084e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80084ea:	79bb      	ldrb	r3, [r7, #6]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d3d8      	bcc.n	80084a6 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d047      	beq.n	800858a <vl53lx_diff_histo_stddev+0x118>
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d044      	beq.n	800858a <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	b29b      	uxth	r3, r3
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008508:	e03a      	b.n	8008580 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 800850a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	461a      	mov	r2, r3
 8008516:	0052      	lsls	r2, r2, #1
 8008518:	441a      	add	r2, r3
 800851a:	00d3      	lsls	r3, r2, #3
 800851c:	461a      	mov	r2, r3
 800851e:	460b      	mov	r3, r1
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	440b      	add	r3, r1
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	4413      	add	r3, r2
 8008528:	4423      	add	r3, r4
 800852a:	f203 7312 	addw	r3, r3, #1810	; 0x712
 800852e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008532:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800853a:	fb03 f202 	mul.w	r2, r3, r2
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	fb92 f3f3 	sdiv	r3, r2, r3
 8008544:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8008546:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	3206      	adds	r2, #6
 800854c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008554:	fb03 f202 	mul.w	r2, r3, r2
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	fb92 f3f3 	sdiv	r3, r2, r3
 800855e:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	69b9      	ldr	r1, [r7, #24]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 800856a:	69b8      	ldr	r0, [r7, #24]
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	441a      	add	r2, r3
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800857a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800857c:	3301      	adds	r3, #1
 800857e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008580:	79bb      	ldrb	r3, [r7, #6]
 8008582:	b29b      	uxth	r3, r3
 8008584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008586:	429a      	cmp	r2, r3
 8008588:	d3bf      	bcc.n	800850a <vl53lx_diff_histo_stddev+0x98>
	}
}
 800858a:	bf00      	nop
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bc90      	pop	{r4, r7}
 8008592:	4770      	bx	lr

08008594 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8008594:	b5b0      	push	{r4, r5, r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80085c2:	2318      	movs	r3, #24
 80085c4:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	461a      	mov	r2, r3
 80085cc:	f248 018f 	movw	r1, #32911	; 0x808f
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f002 fca9 	bl	800af28 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80085d6:	f107 0310 	add.w	r3, r7, #16
 80085da:	461a      	mov	r2, r3
 80085dc:	f248 018e 	movw	r1, #32910	; 0x808e
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f002 fca1 	bl	800af28 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ec:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 811b 	bne.w	800882c <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf0c      	ite	eq
 8008604:	2301      	moveq	r3, #1
 8008606:	2300      	movne	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8008610:	7efb      	ldrb	r3, [r7, #27]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	b2db      	uxtb	r3, r3
 8008616:	7eba      	ldrb	r2, [r7, #26]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008622:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <vl53lx_histo_merge+0xa8>
			prev_pos = pdev->bin_rec_pos - 1;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008630:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8008634:	3b01      	subs	r3, #1
 8008636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800863a:	e004      	b.n	8008646 <vl53lx_histo_merge+0xb2>
		else
			prev_pos = (TuningBinRecSize - 1);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8008646:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800864a:	7efb      	ldrb	r3, [r7, #27]
 800864c:	69f8      	ldr	r0, [r7, #28]
 800864e:	461a      	mov	r2, r3
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	441a      	add	r2, r3
 8008654:	0153      	lsls	r3, r2, #5
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	440b      	add	r3, r1
 800865e:	019b      	lsls	r3, r3, #6
 8008660:	4413      	add	r3, r2
 8008662:	4403      	add	r3, r0
 8008664:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8008668:	3318      	adds	r3, #24
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd0c      	ble.n	800868a <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8008670:	7e79      	ldrb	r1, [r7, #25]
 8008672:	7efa      	ldrb	r2, [r7, #27]
 8008674:	f107 030c 	add.w	r3, r7, #12
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	460b      	mov	r3, r1
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	69f8      	ldr	r0, [r7, #28]
 8008686:	f7ff fef4 	bl	8008472 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	429a      	cmp	r2, r3
 8008690:	db23      	blt.n	80086da <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8008698:	3308      	adds	r3, #8
 800869a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f00f f827 	bl	80176f4 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

			recom_been_reset = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 80086b8:	7efb      	ldrb	r3, [r7, #27]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c4:	2206      	movs	r2, #6
 80086c6:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 80086ca:	e034      	b.n	8008736 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d2:	2207      	movs	r2, #7
 80086d4:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
 80086d8:	e02d      	b.n	8008736 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e0:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 80086e4:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80086ec:	e01e      	b.n	800872c <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80086ee:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80086f2:	7e39      	ldrb	r1, [r7, #24]
 80086f4:	7efb      	ldrb	r3, [r7, #27]
 80086f6:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	3006      	adds	r0, #6
 80086fe:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8008702:	69f8      	ldr	r0, [r7, #28]
 8008704:	461a      	mov	r2, r3
 8008706:	0052      	lsls	r2, r2, #1
 8008708:	441a      	add	r2, r3
 800870a:	00d3      	lsls	r3, r2, #3
 800870c:	461a      	mov	r2, r3
 800870e:	460b      	mov	r3, r1
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	440b      	add	r3, r1
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	4413      	add	r3, r2
 8008718:	442b      	add	r3, r5
 800871a:	f203 7312 	addw	r3, r3, #1810	; 0x712
 800871e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8008722:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008726:	3301      	adds	r3, #1
 8008728:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800872c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008730:	7ebb      	ldrb	r3, [r7, #26]
 8008732:	429a      	cmp	r2, r3
 8008734:	d3db      	bcc.n	80086ee <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800873c:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 8008740:	461a      	mov	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3b01      	subs	r3, #1
 8008746:	429a      	cmp	r2, r3
 8008748:	d109      	bne.n	800875e <vl53lx_histo_merge+0x1ca>
 800874a:	7efb      	ldrb	r3, [r7, #27]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d106      	bne.n	800875e <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
 800875c:	e00e      	b.n	800877c <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 800875e:	7efb      	ldrb	r3, [r7, #27]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d10b      	bne.n	800877c <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876a:	f893 3c44 	ldrb.w	r3, [r3, #3140]	; 0xc44
 800876e:	3301      	adds	r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008778:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800877c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008780:	2b01      	cmp	r3, #1
 8008782:	d102      	bne.n	800878a <vl53lx_histo_merge+0x1f6>
 8008784:	7efb      	ldrb	r3, [r7, #27]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d069      	beq.n	800885e <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008790:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8008794:	2b00      	cmp	r3, #0
 8008796:	d162      	bne.n	800885e <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8008798:	2300      	movs	r3, #0
 800879a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800879c:	e008      	b.n	80087b0 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800879e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	3206      	adds	r2, #6
 80087a4:	2100      	movs	r1, #0
 80087a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 80087aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ac:	3301      	adds	r3, #1
 80087ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087b0:	7ebb      	ldrb	r3, [r7, #26]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d3f1      	bcc.n	800879e <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 80087ba:	2300      	movs	r3, #0
 80087bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087be:	e02f      	b.n	8008820 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 80087c0:	2300      	movs	r3, #0
 80087c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80087c6:	e023      	b.n	8008810 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 80087c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	3206      	adds	r2, #6
 80087ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80087d2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80087d6:	7efb      	ldrb	r3, [r7, #27]
 80087d8:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80087da:	69fc      	ldr	r4, [r7, #28]
 80087dc:	461a      	mov	r2, r3
 80087de:	0052      	lsls	r2, r2, #1
 80087e0:	441a      	add	r2, r3
 80087e2:	00d3      	lsls	r3, r2, #3
 80087e4:	461a      	mov	r2, r3
 80087e6:	460b      	mov	r3, r1
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	440b      	add	r3, r1
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	4413      	add	r3, r2
 80087f0:	442b      	add	r3, r5
 80087f2:	f203 7312 	addw	r3, r3, #1810	; 0x712
 80087f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80087fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087fc:	18c1      	adds	r1, r0, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	3206      	adds	r2, #6
 8008802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8008806:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800880a:	3301      	adds	r3, #1
 800880c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008810:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	429a      	cmp	r2, r3
 8008818:	dbd6      	blt.n	80087c8 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 800881a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800881c:	3301      	adds	r3, #1
 800881e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008820:	7ebb      	ldrb	r3, [r7, #26]
 8008822:	b29b      	uxth	r3, r3
 8008824:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008826:	429a      	cmp	r2, r3
 8008828:	d3ca      	bcc.n	80087c0 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 800882a:	e018      	b.n	800885e <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008832:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 8008836:	3b01      	subs	r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008840:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
		if (pdev->pos_before_next_recom == 255)
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884a:	f893 3c45 	ldrb.w	r3, [r3, #3141]	; 0xc45
 800884e:	2bff      	cmp	r3, #255	; 0xff
 8008850:	d105      	bne.n	800885e <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
}
 800885e:	bf00      	nop
 8008860:	3728      	adds	r7, #40	; 0x28
 8008862:	46bd      	mov	sp, r7
 8008864:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008868 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b0c6      	sub	sp, #280	; 0x118
 800886c:	af00      	add	r7, sp, #0
 800886e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008872:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008876:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008878:	2300      	movs	r3, #0
 800887a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8008884:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <VL53LX_load_patch+0x3c>
		status = VL53LX_WrByte(Dev,
 800888c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008890:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008894:	2200      	movs	r2, #0
 8008896:	2185      	movs	r1, #133	; 0x85
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f00e faed 	bl	8016e78 <VL53LX_WrByte>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80088a4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <VL53LX_load_patch+0x52>
		VL53LX_enable_powerforce(Dev);
 80088ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f005 fa59 	bl	800dd6c <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 80088ba:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80088be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80088c6:	f248 018c 	movw	r1, #32908	; 0x808c
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	f002 fb2c 	bl	800af28 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80088d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d81b      	bhi.n	8008910 <VL53LX_load_patch+0xa8>
 80088d8:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <VL53LX_load_patch+0x78>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	080088f9 	.word	0x080088f9
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008909 	.word	0x08008909
	case 0:
		patch_power = 0x00;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088f6:	e00e      	b.n	8008916 <VL53LX_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80088f8:	2310      	movs	r3, #16
 80088fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088fe:	e00a      	b.n	8008916 <VL53LX_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8008900:	2320      	movs	r3, #32
 8008902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8008906:	e006      	b.n	8008916 <VL53LX_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800890e:	e002      	b.n	8008916 <VL53LX_load_patch+0xae>
	default:
		patch_power = 0x00;
 8008910:	2300      	movs	r3, #0
 8008912:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8008916:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800891a:	2b00      	cmp	r3, #0
 800891c:	d134      	bne.n	8008988 <VL53LX_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800891e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008926:	2229      	movs	r2, #41	; 0x29
 8008928:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800892a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800892e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008932:	22c9      	movs	r2, #201	; 0xc9
 8008934:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8008936:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800893a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800893e:	220e      	movs	r2, #14
 8008940:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8008942:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008946:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800894a:	2240      	movs	r2, #64	; 0x40
 800894c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800894e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008952:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008956:	2228      	movs	r2, #40	; 0x28
 8008958:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800895a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800895e:	b2da      	uxtb	r2, r3
 8008960:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008968:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800896a:	f107 020c 	add.w	r2, r7, #12
 800896e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008972:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008976:	2306      	movs	r3, #6
 8008978:	f240 4176 	movw	r1, #1142	; 0x476
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f00e fa0f 	bl	8016da0 <VL53LX_WriteMulti>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8008988:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800898c:	2b00      	cmp	r3, #0
 800898e:	d132      	bne.n	80089f6 <VL53LX_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8008990:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008994:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008998:	2203      	movs	r2, #3
 800899a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800899c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089a4:	226d      	movs	r2, #109	; 0x6d
 80089a6:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80089a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089b0:	2203      	movs	r2, #3
 80089b2:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80089b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089bc:	226f      	movs	r2, #111	; 0x6f
 80089be:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80089c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089c8:	2207      	movs	r2, #7
 80089ca:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80089cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089d4:	2229      	movs	r2, #41	; 0x29
 80089d6:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 80089d8:	f107 020c 	add.w	r2, r7, #12
 80089dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089e0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80089e4:	2306      	movs	r3, #6
 80089e6:	f240 4196 	movw	r1, #1174	; 0x496
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	f00e f9d8 	bl	8016da0 <VL53LX_WriteMulti>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80089f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11a      	bne.n	8008a34 <VL53LX_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80089fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8008a0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a12:	2207      	movs	r2, #7
 8008a14:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8008a16:	f107 020c 	add.w	r2, r7, #12
 8008a1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a1e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008a22:	2302      	movs	r3, #2
 8008a24:	f240 4172 	movw	r1, #1138	; 0x472
 8008a28:	6800      	ldr	r0, [r0, #0]
 8008a2a:	f00e f9b9 	bl	8016da0 <VL53LX_WriteMulti>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8008a34:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11a      	bne.n	8008a72 <VL53LX_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8008a3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8008a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a50:	2207      	movs	r2, #7
 8008a52:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8008a54:	f107 020c 	add.w	r2, r7, #12
 8008a58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a5c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008a60:	2302      	movs	r3, #2
 8008a62:	f240 4174 	movw	r1, #1140	; 0x474
 8008a66:	6800      	ldr	r0, [r0, #0]
 8008a68:	f00e f99a 	bl	8016da0 <VL53LX_WriteMulti>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8008a72:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10c      	bne.n	8008a94 <VL53LX_load_patch+0x22c>
		status = VL53LX_WrByte(Dev,
 8008a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a82:	2201      	movs	r2, #1
 8008a84:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f00e f9f5 	bl	8016e78 <VL53LX_WrByte>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8008a94:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10b      	bne.n	8008ab4 <VL53LX_load_patch+0x24c>
		status = VL53LX_WrByte(Dev,
 8008a9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008aa0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	2185      	movs	r1, #133	; 0x85
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f00e f9e5 	bl	8016e78 <VL53LX_WrByte>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8008ab4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8008ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2185      	movs	r1, #133	; 0x85
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f00e f9cb 	bl	8016e78 <VL53LX_WrByte>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8008ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f005 f94e 	bl	800dd90 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8008af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d107      	bne.n	8008b0c <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8008afc:	2200      	movs	r2, #0
 8008afe:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f00e f9b8 	bl	8016e78 <VL53LX_WrByte>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8008b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8008b14:	2201      	movs	r2, #1
 8008b16:	2185      	movs	r1, #133	; 0x85
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f00e f9ad 	bl	8016e78 <VL53LX_WrByte>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8008b2e:	b5b0      	push	{r4, r5, r7, lr}
 8008b30:	b08a      	sub	sp, #40	; 0x28
 8008b32:	af04      	add	r7, sp, #16
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008b48:	3320      	adds	r3, #32
 8008b4a:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8008b50:	2162      	movs	r1, #98	; 0x62
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f004 f9ad 	bl	800ceb2 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2210      	movs	r2, #16
 8008b68:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8008b74:	2300      	movs	r3, #0
 8008b76:	75bb      	strb	r3, [r7, #22]
 8008b78:	e01b      	b.n	8008bb2 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8008b7a:	7dba      	ldrb	r2, [r7, #22]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8008bac:	7dbb      	ldrb	r3, [r7, #22]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	75bb      	strb	r3, [r7, #22]
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
 8008bb4:	2b0f      	cmp	r3, #15
 8008bb6:	d9e0      	bls.n	8008b7a <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2210      	movs	r2, #16
 8008bbc:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2210      	movs	r2, #16
 8008bcc:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75bb      	strb	r3, [r7, #22]
 8008bdc:	e039      	b.n	8008c52 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8008bde:	7dba      	ldrb	r2, [r7, #22]
 8008be0:	68f9      	ldr	r1, [r7, #12]
 8008be2:	4613      	mov	r3, r2
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8008bf4:	7dba      	ldrb	r2, [r7, #22]
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	440b      	add	r3, r1
 8008c02:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8008c0a:	7dba      	ldrb	r2, [r7, #22]
 8008c0c:	68f9      	ldr	r1, [r7, #12]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8008c20:	7dba      	ldrb	r2, [r7, #22]
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	4613      	mov	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	1a9b      	subs	r3, r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8008c4c:	7dbb      	ldrb	r3, [r7, #22]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	75bb      	strb	r3, [r7, #22]
 8008c52:	7dbb      	ldrb	r3, [r7, #22]
 8008c54:	2b0f      	cmp	r3, #15
 8008c56:	d9c2      	bls.n	8008bde <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	221e      	movs	r2, #30
 8008c62:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2200      	movs	r2, #0
 8008c68:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2201      	movs	r2, #1
 8008c74:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c88:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008c90:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008c98:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2264      	movs	r2, #100	; 0x64
 8008c9e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008ca6:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
	pdev->offset_results.active_results = 0;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b



	pdev->gain_cal.standard_ranging_gain_factor =
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f240 72db 	movw	r2, #2011	; 0x7db
 8008cce:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8008cd8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f004 f8cd 	bl	800ce7c <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8008ce8:	3308      	adds	r3, #8
 8008cea:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00e fcff 	bl	80176f4 <memset>
	pdev->bin_rec_pos = 0;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
	pdev->pos_before_next_recom = 0;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <VL53LX_data_init+0x1f8>
 8008d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8b8 	bl	8008e92 <VL53LX_read_p2p_data>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8008d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d107      	bne.n	8008d3e <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008d34:	4618      	mov	r0, r3
 8008d36:	f003 f86d 	bl	800be14 <VL53LX_init_refspadchar_config_struct>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8008d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d107      	bne.n	8008d56 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f003 f885 	bl	800be5c <VL53LX_init_ssc_config_struct>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f003 f896 	bl	800be9e <VL53LX_init_xtalk_config_struct>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d84:	4618      	mov	r0, r3
 8008d86:	f003 f8fd 	bl	800bf84 <VL53LX_init_xtalk_extract_config_struct>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d107      	bne.n	8008da6 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f003 f920 	bl	800bfe2 <VL53LX_init_offset_cal_config_struct>
 8008da2:	4603      	mov	r3, r0
 8008da4:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d107      	bne.n	8008dbe <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8008db4:	4618      	mov	r0, r3
 8008db6:	f003 f93b 	bl	800c030 <VL53LX_init_zone_cal_config_struct>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10b      	bne.n	8008dde <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f893 22d4 	ldrb.w	r2, [r3, #724]	; 0x2d4
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f003 f94f 	bl	800c078 <VL53LX_init_hist_post_process_config_struct>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8008dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d107      	bne.n	8008df6 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008dec:	4618      	mov	r0, r3
 8008dee:	f003 fb4e 	bl	800c48e <VL53LX_init_hist_gen3_dmax_config_struct>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8008df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d107      	bne.n	8008e0e <VL53LX_data_init+0x2e0>
		status = VL53LX_init_tuning_parm_storage_struct(
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8008e04:	4618      	mov	r0, r3
 8008e06:	f003 f9a6 	bl	800c156 <VL53LX_init_tuning_parm_storage_struct>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8008e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d116      	bne.n	8008e44 <VL53LX_data_init+0x316>
		status = VL53LX_set_preset_mode(
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	7858      	ldrb	r0, [r3, #1]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	8b1c      	ldrh	r4, [r3, #24]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	689d      	ldr	r5, [r3, #8]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	6912      	ldr	r2, [r2, #16]
 8008e2a:	6939      	ldr	r1, [r7, #16]
 8008e2c:	6949      	ldr	r1, [r1, #20]
 8008e2e:	9102      	str	r1, [sp, #8]
 8008e30:	9201      	str	r2, [sp, #4]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462b      	mov	r3, r5
 8008e36:	4622      	mov	r2, r4
 8008e38:	4601      	mov	r1, r0
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fad5 	bl	80093ea <VL53LX_set_preset_mode>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2118      	movs	r1, #24
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f008 fb23 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	2118      	movs	r1, #24
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f008 fb1b 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f203 5354 	addw	r3, r3, #1364	; 0x554
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	210c      	movs	r1, #12
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f004 fdbd 	bl	800d9ee <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f007 fcfa 	bl	801086e <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f007 fc00 	bl	8010680 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f007 fd1e 	bl	80108c2 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8008e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bdb0      	pop	{r4, r5, r7, pc}

08008e92 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8008e92:	b590      	push	{r4, r7, lr}
 8008e94:	b091      	sub	sp, #68	; 0x44
 8008e96:	af04      	add	r7, sp, #16
 8008e98:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	3348      	adds	r3, #72	; 0x48
 8008eb0:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	339c      	adds	r3, #156	; 0x9c
 8008eb6:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8008eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <VL53LX_read_p2p_data+0x42>
		status = VL53LX_get_static_nvm_managed(
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f00b fe65 	bl	8014b98 <VL53LX_get_static_nvm_managed>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8008ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d108      	bne.n	8008eee <VL53LX_read_p2p_data+0x5c>
		status = VL53LX_get_customer_nvm_managed(
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	3348      	adds	r3, #72	; 0x48
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f00b ff96 	bl	8014e14 <VL53LX_get_customer_nvm_managed>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8008eee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d117      	bne.n	8008f26 <VL53LX_read_p2p_data+0x94>

		status = VL53LX_get_nvm_copy_data(
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f00c fe92 	bl	8015c28 <VL53LX_get_nvm_copy_data>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8008f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <VL53LX_read_p2p_data+0x94>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4610      	mov	r0, r2
 8008f22:	f004 fab9 	bl	800d498 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8008f26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10e      	bne.n	8008f4c <VL53LX_read_p2p_data+0xba>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	895b      	ldrh	r3, [r3, #10]
 8008f32:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8008f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d108      	bne.n	8008f66 <VL53LX_read_p2p_data+0xd4>
		status =
			VL53LX_read_nvm_optical_centre(
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	33c0      	adds	r3, #192	; 0xc0
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f00b fcd0 	bl	8014900 <VL53LX_read_nvm_optical_centre>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8008f66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d108      	bne.n	8008f80 <VL53LX_read_p2p_data+0xee>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	3360      	adds	r3, #96	; 0x60
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f00b fce6 	bl	8014946 <VL53LX_read_nvm_cal_peak_rate_map>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8008f80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d12d      	bne.n	8008fe4 <VL53LX_read_p2p_data+0x152>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	339c      	adds	r3, #156	; 0x9c
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f00b fcff 	bl	8014992 <VL53LX_read_nvm_additional_offset_cal_data>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	889b      	ldrh	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d120      	bne.n	8008fe4 <VL53LX_read_p2p_data+0x152>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d11c      	bne.n	8008fe4 <VL53LX_read_p2p_data+0x152>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	2280      	movs	r2, #128	; 0x80
 8008fae:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008fb6:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	f893 03fa 	ldrb.w	r0, [r3, #1018]	; 0x3fa
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	f893 43fb 	ldrb.w	r4, [r3, #1019]	; 0x3fb
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008fca:	69fa      	ldr	r2, [r7, #28]
 8008fcc:	69f9      	ldr	r1, [r7, #28]
 8008fce:	3102      	adds	r1, #2
 8008fd0:	9103      	str	r1, [sp, #12]
 8008fd2:	9202      	str	r2, [sp, #8]
 8008fd4:	2238      	movs	r2, #56	; 0x38
 8008fd6:	9201      	str	r2, [sp, #4]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	23ff      	movs	r3, #255	; 0xff
 8008fdc:	22c7      	movs	r2, #199	; 0xc7
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f006 fa91 	bl	800f506 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8008fe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d12f      	bne.n	800904c <VL53LX_read_p2p_data+0x1ba>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f00b fcee 	bl	80149d8 <VL53LX_read_nvm_fmt_range_results_data>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8009002:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009006:	2b00      	cmp	r3, #0
 8009008:	d120      	bne.n	800904c <VL53LX_read_p2p_data+0x1ba>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 800900a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8009012:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800901a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <VL53LX_read_p2p_data+0x1a8>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8009038:	e003      	b.n	8009042 <VL53LX_read_p2p_data+0x1b0>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	2214      	movs	r2, #20
 800903e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009048:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 800904c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10b      	bne.n	800906c <VL53LX_read_p2p_data+0x1da>
		status =
			VL53LX_RdWord(
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800905a:	331c      	adds	r3, #28
 800905c:	461a      	mov	r2, r3
 800905e:	21de      	movs	r1, #222	; 0xde
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f00d ff99 	bl	8016f98 <VL53LX_RdWord>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d204      	bcs.n	8009082 <VL53LX_read_p2p_data+0x1f0>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800907e:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
	}



	if (status == VL53LX_ERROR_NONE)
 8009082:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009086:	2b00      	cmp	r3, #0
 8009088:	d108      	bne.n	800909c <VL53LX_read_p2p_data+0x20a>
		status =
			VL53LX_get_mode_mitigation_roi(
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	33bc      	adds	r3, #188	; 0xbc
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f916 	bl	80092c2 <VL53LX_get_mode_mitigation_roi>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d114      	bne.n	80090d0 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.y_centre == 0) {
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10f      	bne.n	80090d0 <VL53LX_read_p2p_data+0x23e>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 80090d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3734      	adds	r7, #52	; 0x34
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd90      	pop	{r4, r7, pc}

080090dc <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f4:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <VL53LX_set_inter_measurement_period_ms+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80090fc:	23f1      	movs	r3, #241	; 0xf1
 80090fe:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8009100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10e      	bne.n	8009126 <VL53LX_set_inter_measurement_period_ms+0x4a>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009114:	f8b3 339c 	ldrh.w	r3, [r3, #924]	; 0x39c
 8009118:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	}

	LOG_FUNCTION_END(status);

	return status;
 8009126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b088      	sub	sp, #32
 800913a:	af02      	add	r7, sp, #8
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009144:	2300      	movs	r3, #0
 8009146:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <VL53LX_set_timeouts_us+0x24>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8009156:	23f1      	movs	r3, #241	; 0xf1
 8009158:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 800915a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d11b      	bne.n	800919a <VL53LX_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f8b3 1316 	ldrh.w	r1, [r3, #790]	; 0x316
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	f502 725b 	add.w	r2, r2, #876	; 0x36c
 8009186:	9201      	str	r2, [sp, #4]
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	460b      	mov	r3, r1
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	68b8      	ldr	r0, [r7, #8]
 8009192:	f004 ff98 	bl	800e0c6 <VL53LX_calc_timeout_register_values>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800919a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b088      	sub	sp, #32
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	f8b3 3316 	ldrh.w	r3, [r3, #790]	; 0x316
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <VL53LX_get_timeouts_us+0x2c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80091ce:	23f1      	movs	r3, #241	; 0xf1
 80091d0:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 80091d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d14a      	bne.n	8009270 <VL53LX_get_timeouts_us+0xca>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	f8b3 2316 	ldrh.w	r2, [r3, #790]	; 0x316
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f893 3372 	ldrb.w	r3, [r3, #882]	; 0x372
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f004 fde3 	bl	800ddb4 <VL53LX_calc_macro_period_us>
 80091ee:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
			VL53LX_calc_timeout_us(
 80091f6:	6979      	ldr	r1, [r7, #20]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f004 fea2 	bl	800df42 <VL53LX_calc_timeout_us>
 80091fe:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f893 336c 	ldrb.w	r3, [r3, #876]	; 0x36c
		timeout_encoded =
 800920a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800920c:	8a7b      	ldrh	r3, [r7, #18]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	f893 336d 	ldrb.w	r3, [r3, #877]	; 0x36d
 8009218:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800921a:	4413      	add	r3, r2
 800921c:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 800921e:	8a7b      	ldrh	r3, [r7, #18]
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	4618      	mov	r0, r3
 8009224:	f004 fef4 	bl	800e010 <VL53LX_calc_decoded_timeout_us>
 8009228:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
		timeout_encoded =
 8009234:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009236:	8a7b      	ldrh	r3, [r7, #18]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8009242:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009244:	4413      	add	r3, r2
 8009246:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8009248:	8a7b      	ldrh	r3, [r7, #18]
 800924a:	6979      	ldr	r1, [r7, #20]
 800924c:	4618      	mov	r0, r3
 800924e:	f004 fedf 	bl	800e010 <VL53LX_calc_decoded_timeout_us>
 8009252:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009270:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	7858      	ldrb	r0, [r3, #1]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	7819      	ldrb	r1, [r3, #0]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f203 3393 	addw	r3, r3, #915	; 0x393
 800929c:	461a      	mov	r2, r3
 800929e:	f005 ffaf 	bl	800f200 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	7898      	ldrb	r0, [r3, #2]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	78d9      	ldrb	r1, [r3, #3]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80092b0:	461a      	mov	r2, r3
 80092b2:	f005 ffe4 	bl	800f27e <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 80092b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b086      	sub	sp, #24
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 80092e6:	f107 020e 	add.w	r2, r7, #14
 80092ea:	f107 010d 	add.w	r1, r7, #13
 80092ee:	4618      	mov	r0, r3
 80092f0:	f008 f97c 	bl	80115ec <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80092f4:	7bba      	ldrb	r2, [r7, #14]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80092fa:	7b7a      	ldrb	r2, [r7, #13]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 8009306:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	091b      	lsrs	r3, r3, #4
 800930c:	b2da      	uxtb	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	b2da      	uxtb	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800931e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800932a:	b480      	push	{r7}
 800932c:	b087      	sub	sp, #28
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	460b      	mov	r3, r1
 8009338:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8009342:	7afb      	ldrb	r3, [r7, #11]
 8009344:	2b21      	cmp	r3, #33	; 0x21
 8009346:	d030      	beq.n	80093aa <VL53LX_get_preset_mode_timing_cfg+0x80>
 8009348:	2b21      	cmp	r3, #33	; 0x21
 800934a:	dc43      	bgt.n	80093d4 <VL53LX_get_preset_mode_timing_cfg+0xaa>
 800934c:	2b1b      	cmp	r3, #27
 800934e:	d002      	beq.n	8009356 <VL53LX_get_preset_mode_timing_cfg+0x2c>
 8009350:	2b1e      	cmp	r3, #30
 8009352:	d015      	beq.n	8009380 <VL53LX_get_preset_mode_timing_cfg+0x56>
 8009354:	e03e      	b.n	80093d4 <VL53LX_get_preset_mode_timing_cfg+0xaa>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	601a      	str	r2, [r3, #0]

	break;
 800937e:	e02c      	b.n	80093da <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	601a      	str	r2, [r3, #0]
	break;
 80093a8:	e017      	b.n	80093da <VL53LX_get_preset_mode_timing_cfg+0xb0>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	601a      	str	r2, [r3, #0]
	break;
 80093d2:	e002      	b.n	80093da <VL53LX_get_preset_mode_timing_cfg+0xb0>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80093d4:	23fc      	movs	r3, #252	; 0xfc
 80093d6:	75fb      	strb	r3, [r7, #23]
		break;
 80093d8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80093da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b096      	sub	sp, #88	; 0x58
 80093ee:	af06      	add	r7, sp, #24
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	607b      	str	r3, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	72fb      	strb	r3, [r7, #11]
 80093f8:	4613      	mov	r3, r2
 80093fa:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800940c:	3320      	adds	r3, #32
 800940e:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8009416:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	f203 3336 	addw	r3, r3, #822	; 0x336
 800941e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8009436:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800943e:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8009446:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	33c2      	adds	r3, #194	; 0xc2
 800944c:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009454:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	7afa      	ldrb	r2, [r7, #11]
 800945a:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009460:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009466:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800946c:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 800946e:	2103      	movs	r1, #3
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f003 fd1e 	bl	800ceb2 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	2b21      	cmp	r3, #33	; 0x21
 800947a:	d02e      	beq.n	80094da <VL53LX_set_preset_mode+0xf0>
 800947c:	2b21      	cmp	r3, #33	; 0x21
 800947e:	dc40      	bgt.n	8009502 <VL53LX_set_preset_mode+0x118>
 8009480:	2b1b      	cmp	r3, #27
 8009482:	d002      	beq.n	800948a <VL53LX_set_preset_mode+0xa0>
 8009484:	2b1e      	cmp	r3, #30
 8009486:	d014      	beq.n	80094b2 <VL53LX_set_preset_mode+0xc8>
 8009488:	e03b      	b.n	8009502 <VL53LX_set_preset_mode+0x118>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	9302      	str	r3, [sp, #8]
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a6:	f003 fa36 	bl	800c916 <VL53LX_preset_mode_histogram_long_range>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80094b0:	e02b      	b.n	800950a <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	9303      	str	r3, [sp, #12]
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	9302      	str	r3, [sp, #8]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ce:	f003 fac0 	bl	800ca52 <VL53LX_preset_mode_histogram_medium_range>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80094d8:	e017      	b.n	800950a <VL53LX_set_preset_mode+0x120>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	9302      	str	r3, [sp, #8]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f6:	f003 fb4a 	bl	800cb8e <VL53LX_preset_mode_histogram_short_range>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8009500:	e003      	b.n	800950a <VL53LX_set_preset_mode+0x120>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8009502:	23fc      	movs	r3, #252	; 0xfc
 8009504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8009508:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 800950a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <VL53LX_set_preset_mode+0x134>

		pstatic->dss_config__target_total_rate_mcps =
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	893a      	ldrh	r2, [r7, #8]
 8009516:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	893a      	ldrh	r2, [r7, #8]
 800951c:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 800951e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009522:	2b00      	cmp	r3, #0
 8009524:	d108      	bne.n	8009538 <VL53LX_set_preset_mode+0x14e>
		status =
			VL53LX_set_timeouts_us(
 8009526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7ff fe02 	bl	8009136 <VL53LX_set_timeouts_us>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8009538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <VL53LX_set_preset_mode+0x164>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8009540:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fdca 	bl	80090dc <VL53LX_set_inter_measurement_period_ms>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8009554:	3301      	adds	r3, #1
 8009556:	b2da      	uxtb	r2, r3
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f004 f8b9 	bl	800d6d8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8009566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800956a:	4618      	mov	r0, r3
 800956c:	3740      	adds	r7, #64	; 0x40
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b0d2      	sub	sp, #328	; 0x148
 8009578:	af00      	add	r7, sp, #0
 800957a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800957e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009582:	6018      	str	r0, [r3, #0]
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800958c:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8009590:	4602      	mov	r2, r0
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009598:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800959c:	460a      	mov	r2, r1
 800959e:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80095a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 80095b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80095c2:	3320      	adds	r3, #32
 80095c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80095c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80095d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80095d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095d8:	3348      	adds	r3, #72	; 0x48
 80095da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80095de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095e2:	f203 3336 	addw	r3, r3, #822	; 0x336
 80095e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80095ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80095f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095fa:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80095fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009602:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009606:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800960a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800960e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009612:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8009616:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800961a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800961e:	332c      	adds	r3, #44	; 0x2c
 8009620:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8009624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009628:	3348      	adds	r3, #72	; 0x48
 800962a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800962e:	f107 030c 	add.w	r3, r7, #12
 8009632:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 800964e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009652:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009656:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 800965e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009662:	791b      	ldrb	r3, [r3, #4]
 8009664:	b25b      	sxtb	r3, r3
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800966c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009670:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8009674:	f993 3000 	ldrsb.w	r3, [r3]
 8009678:	4313      	orrs	r3, r2
 800967a:	b25b      	sxtb	r3, r3
 800967c:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800967e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009682:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8009684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009688:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 800968c:	3336      	adds	r3, #54	; 0x36
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009694:	4413      	add	r3, r2
 8009696:	1d9a      	adds	r2, r3, #6
 8009698:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800969c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80096a0:	4611      	mov	r1, r2
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	f7ff fdea 	bl	800927c <VL53LX_set_user_zone>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 80096ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80096b2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d019      	beq.n	80096ee <VL53LX_init_and_start_range+0x17a>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 80096ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80096be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80096c2:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80096d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80096d4:	4413      	add	r3, r2
 80096d6:	1c9a      	adds	r2, r3, #2
 80096d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096dc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80096e0:	4611      	mov	r1, r2
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	f001 fbbc 	bl	800ae60 <VL53LX_set_zone_dss_config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80096ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80096f2:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10d      	bne.n	800971a <VL53LX_init_and_start_range+0x1a6>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80096fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009702:	f893 32d4 	ldrb.w	r3, [r3, #724]	; 0x2d4
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8009706:	2b01      	cmp	r3, #1
 8009708:	d107      	bne.n	800971a <VL53LX_init_and_start_range+0x1a6>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800970a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800970e:	f8b3 22dc 	ldrh.w	r2, [r3, #732]	; 0x2dc
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8009712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009716:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 800971a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800971e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009722:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
 8009726:	2bff      	cmp	r3, #255	; 0xff
 8009728:	d106      	bne.n	8009738 <VL53LX_init_and_start_range+0x1c4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800972a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800972e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009732:	2200      	movs	r2, #0
 8009734:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009738:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800973c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009740:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8009744:	2b01      	cmp	r3, #1
 8009746:	d139      	bne.n	80097bc <VL53LX_init_and_start_range+0x248>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8009748:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800974c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009750:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009754:	2b00      	cmp	r3, #0
 8009756:	d131      	bne.n	80097bc <VL53LX_init_and_start_range+0x248>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8009758:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800975c:	f893 2358 	ldrb.w	r2, [r3, #856]	; 0x358
		pdev->low_power_auto_data.saved_interrupt_config =
 8009760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009768:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800976c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009770:	2220      	movs	r2, #32
 8009772:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

		if ((pdev->dyn_cfg.system__sequence_config & (
 8009776:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800977a:	f893 3395 	ldrb.w	r3, [r3, #917]	; 0x395
 800977e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <VL53LX_init_and_start_range+0x226>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8009786:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800978a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800978e:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8009790:	b21a      	sxth	r2, r3
 8009792:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009796:	825a      	strh	r2, [r3, #18]
 8009798:	e003      	b.n	80097a2 <VL53LX_init_and_start_range+0x22e>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 800979a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800979e:	2200      	movs	r2, #0
 80097a0:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80097a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097a6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d805      	bhi.n	80097bc <VL53LX_init_and_start_range+0x248>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80097b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097b4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80097b8:	2205      	movs	r2, #5
 80097ba:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80097bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c4:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d117      	bne.n	80097fc <VL53LX_init_and_start_range+0x288>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80097cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d4:	f893 342a 	ldrb.w	r3, [r3, #1066]	; 0x42a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d10f      	bne.n	80097fc <VL53LX_init_and_start_range+0x288>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80097dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e4:	f893 242b 	ldrb.w	r2, [r3, #1067]	; 0x42b
		pdev->gen_cfg.system__interrupt_config_gpio =
 80097e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097ec:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80097f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097f4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80097f8:	2206      	movs	r2, #6
 80097fa:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 80097fc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <VL53LX_init_and_start_range+0x2a4>
		status = VL53LX_save_cfg_data(Dev);
 8009804:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009808:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f005 ffe4 	bl	800f7da <VL53LX_save_cfg_data>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8009818:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800981c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	3b01      	subs	r3, #1
 8009824:	2b05      	cmp	r3, #5
 8009826:	d827      	bhi.n	8009878 <VL53LX_init_and_start_range+0x304>
 8009828:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <VL53LX_init_and_start_range+0x2bc>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009871 	.word	0x08009871
 8009834:	08009869 	.word	0x08009869
 8009838:	08009861 	.word	0x08009861
 800983c:	08009859 	.word	0x08009859
 8009840:	08009851 	.word	0x08009851
 8009844:	08009849 	.word	0x08009849
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8009848:	2301      	movs	r3, #1
 800984a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800984e:	e017      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8009850:	230d      	movs	r3, #13
 8009852:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009856:	e013      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8009858:	2324      	movs	r3, #36	; 0x24
 800985a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800985e:	e00f      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8009860:	2344      	movs	r3, #68	; 0x44
 8009862:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009866:	e00b      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8009868:	235a      	movs	r3, #90	; 0x5a
 800986a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800986e:	e007      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8009870:	2371      	movs	r3, #113	; 0x71
 8009872:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8009876:	e003      	b.n	8009880 <VL53LX_init_and_start_range+0x30c>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8009878:	2383      	movs	r3, #131	; 0x83
 800987a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800987e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8009880:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009884:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8009888:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8009894:	2300      	movs	r3, #0
 8009896:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800989a:	e00b      	b.n	80098b4 <VL53LX_init_and_start_range+0x340>
		*pbuffer++ = 0;
 800989c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80098aa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80098ae:	3301      	adds	r3, #1
 80098b0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80098b4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80098b8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80098bc:	429a      	cmp	r2, r3
 80098be:	d3ed      	bcc.n	800989c <VL53LX_init_and_start_range+0x328>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80098c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098c4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b05      	cmp	r3, #5
 80098cc:	d917      	bls.n	80098fe <VL53LX_init_and_start_range+0x38a>
 80098ce:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d113      	bne.n	80098fe <VL53LX_init_and_start_range+0x38a>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80098d6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80098da:	f1c3 0301 	rsb	r3, r3, #1
 80098de:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80098e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80098e6:	f107 020c 	add.w	r2, r7, #12
 80098ea:	4413      	add	r3, r2
 80098ec:	461a      	mov	r2, r3
 80098ee:	210b      	movs	r1, #11
 80098f0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80098f4:	f00b f89b 	bl	8014a2e <VL53LX_i2c_encode_static_nvm_managed>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80098fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009902:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d917      	bls.n	800993c <VL53LX_init_and_start_range+0x3c8>
 800990c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009910:	2b00      	cmp	r3, #0
 8009912:	d113      	bne.n	800993c <VL53LX_init_and_start_range+0x3c8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009914:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009918:	f1c3 030d 	rsb	r3, r3, #13
 800991c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009920:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8009924:	f107 020c 	add.w	r2, r7, #12
 8009928:	4413      	add	r3, r2
 800992a:	461a      	mov	r2, r3
 800992c:	2117      	movs	r1, #23
 800992e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8009932:	f00b f958 	bl	8014be6 <VL53LX_i2c_encode_customer_nvm_managed>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800993c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009940:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b03      	cmp	r3, #3
 8009948:	d917      	bls.n	800997a <VL53LX_init_and_start_range+0x406>
 800994a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800994e:	2b00      	cmp	r3, #0
 8009950:	d113      	bne.n	800997a <VL53LX_init_and_start_range+0x406>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009952:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009956:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800995a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800995e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8009962:	f107 020c 	add.w	r2, r7, #12
 8009966:	4413      	add	r3, r2
 8009968:	461a      	mov	r2, r3
 800996a:	2120      	movs	r1, #32
 800996c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009970:	f00b fa9b 	bl	8014eaa <VL53LX_i2c_encode_static_config>
 8009974:	4603      	mov	r3, r0
 8009976:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800997a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800997e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d917      	bls.n	80099b8 <VL53LX_init_and_start_range+0x444>
 8009988:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800998c:	2b00      	cmp	r3, #0
 800998e:	d113      	bne.n	80099b8 <VL53LX_init_and_start_range+0x444>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009990:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009994:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8009998:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800999c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 80099a0:	f107 020c 	add.w	r2, r7, #12
 80099a4:	4413      	add	r3, r2
 80099a6:	461a      	mov	r2, r3
 80099a8:	2116      	movs	r1, #22
 80099aa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80099ae:	f00b fb5f 	bl	8015070 <VL53LX_i2c_encode_general_config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80099b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099bc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d917      	bls.n	80099f6 <VL53LX_init_and_start_range+0x482>
 80099c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d113      	bne.n	80099f6 <VL53LX_init_and_start_range+0x482>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80099ce:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80099d2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80099d6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80099da:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 80099de:	f107 020c 	add.w	r2, r7, #12
 80099e2:	4413      	add	r3, r2
 80099e4:	461a      	mov	r2, r3
 80099e6:	2117      	movs	r1, #23
 80099e8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80099ec:	f00b fbc4 	bl	8015178 <VL53LX_i2c_encode_timing_config>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80099f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099fa:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d036      	beq.n	8009a72 <VL53LX_init_and_start_range+0x4fe>
 8009a04:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d132      	bne.n	8009a72 <VL53LX_init_and_start_range+0x4fe>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009a0c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009a10:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8009a14:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8009a18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	f003 0320 	and.w	r3, r3, #32
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d017      	beq.n	8009a56 <VL53LX_init_and_start_range+0x4e2>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8009a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8009a2c:	f043 0301 	orr.w	r3, r3, #1
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a36:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8009a3e:	f043 0301 	orr.w	r3, r3, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a48:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8009a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a54:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009a56:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8009a5a:	f107 020c 	add.w	r2, r7, #12
 8009a5e:	4413      	add	r3, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	2112      	movs	r1, #18
 8009a64:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009a68:	f00b fc08 	bl	801527c <VL53LX_i2c_encode_dynamic_config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8009a72:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d113      	bne.n	8009aa2 <VL53LX_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8009a7a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8009a7e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8009a82:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009a86:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8009a8a:	f107 020c 	add.w	r2, r7, #12
 8009a8e:	4413      	add	r3, r2
 8009a90:	461a      	mov	r2, r3
 8009a92:	2105      	movs	r1, #5
 8009a94:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8009a98:	f00b fc75 	bl	8015386 <VL53LX_i2c_encode_system_control>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8009aa2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10f      	bne.n	8009aca <VL53LX_init_and_start_range+0x556>
		status =
			VL53LX_WriteMulti(
 8009aaa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009aae:	f107 020c 	add.w	r2, r7, #12
 8009ab2:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8009ab6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8009aba:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8009abe:	6800      	ldr	r0, [r0, #0]
 8009ac0:	f00d f96e 	bl	8016da0 <VL53LX_WriteMulti>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8009aca:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <VL53LX_init_and_start_range+0x572>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8009ad2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ad6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	f003 fa18 	bl	800cf10 <VL53LX_update_ll_driver_rd_state>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8009ae6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <VL53LX_init_and_start_range+0x58e>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8009aee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009af2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	f003 fba8 	bl	800d24c <VL53LX_update_ll_driver_cfg_state>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8009b02:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009b26:	3320      	adds	r3, #32
 8009b28:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	f003 030f 	and.w	r3, r3, #15
 8009b36:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8009b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f00b fc54 	bl	80153fc <VL53LX_set_system_control>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8009b5e:	f003 030f 	and.w	r3, r3, #15
 8009b62:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8009b6a:	2103      	movs	r1, #3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f003 f9a0 	bl	800ceb2 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8009b78:	3301      	adds	r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f003 fda7 	bl	800d6d8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f003 fdd9 	bl	800d742 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b96:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d102      	bne.n	8009ba4 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f006 fed6 	bl	8010950 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8009ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b0c8      	sub	sp, #288	; 0x120
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009bba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009bbe:	6018      	str	r0, [r3, #0]
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009bc6:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009bca:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009bd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009bd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8009be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009be4:	f203 339e 	addw	r3, r3, #926	; 0x39e
 8009be8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8009bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bf0:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8009bf4:	3310      	adds	r3, #16
 8009bf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8009bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bfe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009c02:	3314      	adds	r3, #20
 8009c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8009c08:	2388      	movs	r3, #136	; 0x88
 8009c0a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8009c1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009c1e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d008      	beq.n	8009c3a <VL53LX_get_measurement_results+0x8a>
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d10d      	bne.n	8009c48 <VL53LX_get_measurement_results+0x98>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8009c2c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009c30:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8009c34:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8009c38:	e00a      	b.n	8009c50 <VL53LX_get_measurement_results+0xa0>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8009c3a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009c3e:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8009c42:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8009c46:	e003      	b.n	8009c50 <VL53LX_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8009c48:	232c      	movs	r3, #44	; 0x2c
 8009c4a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8009c4e:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8009c50:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10f      	bne.n	8009c78 <VL53LX_get_measurement_results+0xc8>
		status =
			VL53LX_ReadMulti(
 8009c58:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8009c5c:	f107 0208 	add.w	r2, r7, #8
 8009c60:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8009c64:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8009c68:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8009c6c:	6800      	ldr	r0, [r0, #0]
 8009c6e:	f00d f8cd 	bl	8016e0c <VL53LX_ReadMulti>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8009c78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009c7c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d917      	bls.n	8009cb6 <VL53LX_get_measurement_results+0x106>
 8009c86:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d113      	bne.n	8009cb6 <VL53LX_get_measurement_results+0x106>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009c8e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009c92:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8009c96:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009c9a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8009c9e:	f107 0208 	add.w	r2, r7, #8
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009ca8:	4619      	mov	r1, r3
 8009caa:	2038      	movs	r0, #56	; 0x38
 8009cac:	f00b fd24 	bl	80156f8 <VL53LX_i2c_decode_debug_results>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8009cb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009cba:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d017      	beq.n	8009cf4 <VL53LX_get_measurement_results+0x144>
 8009cc4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d113      	bne.n	8009cf4 <VL53LX_get_measurement_results+0x144>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009ccc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009cd0:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8009cd4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009cd8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8009cdc:	f107 0208 	add.w	r2, r7, #8
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	2021      	movs	r0, #33	; 0x21
 8009cea:	f00b fca4 	bl	8015636 <VL53LX_i2c_decode_core_results>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8009cf4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d110      	bne.n	8009d1e <VL53LX_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009d02:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8009d06:	f107 0208 	add.w	r2, r7, #8
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009d10:	4619      	mov	r1, r3
 8009d12:	202c      	movs	r0, #44	; 0x2c
 8009d14:	f00b fb99 	bl	801544a <VL53LX_i2c_decode_system_results>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d1e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	b0a0      	sub	sp, #128	; 0x80
 8009d32:	af06      	add	r7, sp, #24
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	460b      	mov	r3, r1
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8009d4c:	3320      	adds	r3, #32
 8009d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8009d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d52:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8009d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d56:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009d5a:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8009d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d5e:	332c      	adds	r3, #44	; 0x2c
 8009d60:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8009d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d64:	33c2      	adds	r3, #194	; 0xc2
 8009d66:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8009d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d6a:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8009d6e:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8009d70:	f107 0314 	add.w	r3, r7, #20
 8009d74:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8009d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d78:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8009d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d80:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8009d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d88:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8009d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d92:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8009d96:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8009d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d9a:	3348      	adds	r3, #72	; 0x48
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8009d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da0:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8009da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009da8:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 8009dac:	3314      	adds	r3, #20
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8009db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009db2:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 8292 	beq.w	800a2e4 <VL53LX_get_device_results+0x5b8>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8009dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dc2:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 fbcd 	bl	800a568 <VL53LX_get_histogram_bin_data>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8009dd4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d118      	bne.n	8009e0e <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d114      	bne.n	8009e0e <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8009de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8009dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009df6:	4413      	add	r3, r2
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dfc:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8009e00:	4619      	mov	r1, r3
 8009e02:	4610      	mov	r0, r2
 8009e04:	f004 f9d8 	bl	800e1b8 <VL53LX_hist_copy_and_scale_ambient_info>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8009e0e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 8208 	bne.w	800a228 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8009e18:	f107 0313 	add.w	r3, r7, #19
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f006 feba 	bl	8010b98 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8009e24:	7cfb      	ldrb	r3, [r7, #19]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8009e2e:	7cfb      	ldrb	r3, [r7, #19]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8009e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e38:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d107      	bne.n	8009e50 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8009e40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	3202      	adds	r2, #2
 8009e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8009e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e52:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8009e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e58:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f004 f8ac 	bl	800dfc4 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8009e6c:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8009e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8009e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e74:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8009e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7a:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8009e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8009e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e84:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8009e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e88:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8009e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e8c:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8009e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e92:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8009e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e96:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8009e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e9c:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8009e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8009ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ea6:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8009eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eac:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8009eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eb2:	f893 2369 	ldrb.w	r2, [r3, #873]	; 0x369
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8009eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eb8:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8009ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebe:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8009ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec4:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8009ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ece:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8009ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed6:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eda:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8009edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ede:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8009ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee2:	f203 32ca 	addw	r2, r3, #970	; 0x3ca
 8009ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f003 fad2 	bl	800d498 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8009ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ef6:	795b      	ldrb	r3, [r3, #5]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d002      	beq.n	8009f02 <VL53LX_get_device_results+0x1d6>
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d02e      	beq.n	8009f5e <VL53LX_get_device_results+0x232>
 8009f00:	e03d      	b.n	8009f7e <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8009f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f04:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 8009f08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8009f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f1a:	f893 e3fa 	ldrb.w	lr, [r3, #1018]	; 0x3fa
 8009f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f20:	f893 83fb 	ldrb.w	r8, [r3, #1019]	; 0x3fb
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8009f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f2c:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8009f30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f32:	319c      	adds	r1, #156	; 0x9c
 8009f34:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009f36:	f500 7004 	add.w	r0, r0, #528	; 0x210
 8009f3a:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8009f3e:	b2a4      	uxth	r4, r4
 8009f40:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8009f42:	351c      	adds	r5, #28
 8009f44:	9505      	str	r5, [sp, #20]
 8009f46:	9404      	str	r4, [sp, #16]
 8009f48:	9003      	str	r0, [sp, #12]
 8009f4a:	9102      	str	r1, [sp, #8]
 8009f4c:	9201      	str	r2, [sp, #4]
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	4643      	mov	r3, r8
 8009f52:	4672      	mov	r2, lr
 8009f54:	4661      	mov	r1, ip
 8009f56:	4630      	mov	r0, r6
 8009f58:	f005 f8a2 	bl	800f0a0 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8009f5c:	e013      	b.n	8009f86 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8009f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f60:	331c      	adds	r3, #28
 8009f62:	4619      	mov	r1, r3
 8009f64:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009f66:	f7fe fa1d 	bl	80083a4 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8009f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b21a      	sxth	r2, r3
 8009f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f7a:	839a      	strh	r2, [r3, #28]
		break;
 8009f7c:	e003      	b.n	8009f86 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8009f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f80:	2200      	movs	r2, #0
 8009f82:	839a      	strh	r2, [r3, #28]
		break;
 8009f84:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8009f86:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 814e 	bne.w	800a22c <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8009f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f92:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8009f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f98:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8009f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f9e:	f503 7204 	add.w	r2, r3, #528	; 0x210
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8009fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fa4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
		VL53LX_calc_max_effective_spads(
 8009fa8:	b29c      	uxth	r4, r3
 8009faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fac:	f203 23a2 	addw	r3, r3, #674	; 0x2a2
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	f005 fa19 	bl	800f3ea <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8009fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fba:	799b      	ldrb	r3, [r3, #6]
 8009fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 ff88 	bl	800aed6 <VL53LX_get_dmax_calibration_data>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8009fcc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f040 812d 	bne.w	800a230 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8009fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fd8:	f503 7523 	add.w	r5, r3, #652	; 0x28c
 8009fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fde:	f503 7613 	add.w	r6, r3, #588	; 0x24c
 8009fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe4:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 8009fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fea:	f203 5054 	addw	r0, r3, #1364	; 0x554
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8009fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8009ff4:	3318      	adds	r3, #24
				pdev->wArea2,
 8009ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ff8:	f502 52d1 	add.w	r2, r2, #6688	; 0x1a20
 8009ffc:	3218      	adds	r2, #24
		status = VL53LX_ipp_hist_process_data(
 8009ffe:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a000:	9405      	str	r4, [sp, #20]
 800a002:	f107 0413 	add.w	r4, r7, #19
 800a006:	9404      	str	r4, [sp, #16]
 800a008:	9203      	str	r2, [sp, #12]
 800a00a:	9302      	str	r3, [sp, #8]
 800a00c:	9001      	str	r0, [sp, #4]
 800a00e:	9100      	str	r1, [sp, #0]
 800a010:	4633      	mov	r3, r6
 800a012:	462a      	mov	r2, r5
 800a014:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f00d f8e8 	bl	80171ec <VL53LX_ipp_hist_process_data>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800a022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a024:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d150      	bne.n	800a0ce <VL53LX_get_device_results+0x3a2>
			(histo_merge_nb > 1))
 800a02c:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d94d      	bls.n	800a0ce <VL53LX_get_device_results+0x3a2>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a038:	e045      	b.n	800a0c6 <VL53LX_get_device_results+0x39a>
			pdata = &(presults->VL53LX_p_003[i]);
 800a03a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a03e:	224c      	movs	r2, #76	; 0x4c
 800a040:	fb02 f303 	mul.w	r3, r2, r3
 800a044:	3310      	adds	r3, #16
 800a046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a048:	4413      	add	r3, r2
 800a04a:	3304      	adds	r3, #4
 800a04c:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a052:	7cfa      	ldrb	r2, [r7, #19]
 800a054:	fbb3 f2f2 	udiv	r2, r3, r2
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	7cfa      	ldrb	r2, [r7, #19]
 800a062:	fbb3 f2f2 	udiv	r2, r3, r2
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	7cfa      	ldrb	r2, [r7, #19]
 800a070:	fb93 f2f2 	sdiv	r2, r3, r2
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a07c:	461a      	mov	r2, r3
 800a07e:	7cfb      	ldrb	r3, [r7, #19]
 800a080:	fb92 f3f3 	sdiv	r3, r2, r3
 800a084:	b29a      	uxth	r2, r3
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a08e:	461a      	mov	r2, r3
 800a090:	7cfb      	ldrb	r3, [r7, #19]
 800a092:	fb92 f3f3 	sdiv	r3, r2, r3
 800a096:	b29a      	uxth	r2, r3
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	7cfb      	ldrb	r3, [r7, #19]
 800a0a4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	7cfa      	ldrb	r2, [r7, #19]
 800a0b4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800a0bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a0c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d9b5      	bls.n	800a03a <VL53LX_get_device_results+0x30e>
		}


		if (status != VL53LX_ERROR_NONE)
 800a0ce:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 80ae 	bne.w	800a234 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 800a0d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0da:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 800a0de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0e0:	f503 717f 	add.w	r1, r3, #1020	; 0x3fc
 800a0e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0e6:	330e      	adds	r3, #14
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f004 ffa3 	bl	800f034 <VL53LX_hist_wrap_dmax>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 800a0f4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f040 809d 	bne.w	800a238 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800a0fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800a108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a110:	4413      	add	r3, r2
 800a112:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 800a114:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 800a118:	4613      	mov	r3, r2
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a126:	4413      	add	r3, r2
 800a128:	f103 0208 	add.w	r2, r3, #8
 800a12c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f004 faa0 	bl	800e674 <VL53LX_hist_phase_consistency_check>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 800a13a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d17c      	bne.n	800a23c <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800a142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a154:	4413      	add	r3, r2
 800a156:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 800a158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 800a15c:	4613      	mov	r3, r2
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a16a:	4413      	add	r3, r2
 800a16c:	f103 0208 	add.w	r2, r3, #8
 800a170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a172:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f004 ff05 	bl	800ef86 <VL53LX_hist_xmonitor_consistency_check>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 800a182:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a186:	2b00      	cmp	r3, #0
 800a188:	d15a      	bne.n	800a240 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800a18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a18c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 800a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a196:	2210      	movs	r2, #16
 800a198:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800a19a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a19c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1ae:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 800a1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b2:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800a1b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d222      	bcs.n	800a204 <VL53LX_get_device_results+0x4d8>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800a1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ce:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 800a1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d2:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d6:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800a1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1da:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800a1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e4:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 800a1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ee:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800a1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f8:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800a200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a202:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 800a204:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11b      	bne.n	800a244 <VL53LX_get_device_results+0x518>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 800a20c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a20e:	f503 707f 	add.w	r0, r3, #1020	; 0x3fc
 800a212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a214:	f203 329e 	addw	r2, r3, #926	; 0x39e
 800a218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a21a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800a21e:	3310      	adds	r3, #16
 800a220:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a222:	f005 fa3f 	bl	800f6a4 <VL53LX_hist_copy_results_to_sys_and_core>
 800a226:	e00e      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a228:	bf00      	nop
 800a22a:	e00c      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a22c:	bf00      	nop
 800a22e:	e00a      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a230:	bf00      	nop
 800a232:	e008      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a234:	bf00      	nop
 800a236:	e006      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a238:	bf00      	nop
 800a23a:	e004      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a23c:	bf00      	nop
 800a23e:	e002      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a240:	bf00      	nop
 800a242:	e000      	b.n	800a246 <VL53LX_get_device_results+0x51a>
			goto UPDATE_DYNAMIC_CONFIG;
 800a244:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800a246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d036      	beq.n	800a2bc <VL53LX_get_device_results+0x590>
			if (pstate->rd_device_state !=
 800a24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a250:	79db      	ldrb	r3, [r3, #7]
 800a252:	2b06      	cmp	r3, #6
 800a254:	d00a      	beq.n	800a26c <VL53LX_get_device_results+0x540>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 800a256:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <VL53LX_get_device_results+0x540>
					status = VL53LX_dynamic_zone_update(
 800a25e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f005 faf3 	bl	800f84c <VL53LX_dynamic_zone_update>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a272:	e015      	b.n	800a2a0 <VL53LX_get_device_results+0x574>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 800a274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a276:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800a27a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <VL53LX_get_device_results+0x55a>
 800a282:	2103      	movs	r1, #3
 800a284:	e000      	b.n	800a288 <VL53LX_get_device_results+0x55c>
 800a286:	2101      	movs	r1, #1
 800a288:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a28c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a28e:	4413      	add	r3, r2
 800a290:	460a      	mov	r2, r1
 800a292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800a296:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a29a:	3301      	adds	r3, #1
 800a29c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a2a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d9e5      	bls.n	800a274 <VL53LX_get_device_results+0x548>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 800a2a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d105      	bne.n	800a2bc <VL53LX_get_device_results+0x590>
				status = VL53LX_multizone_hist_bins_update(Dev);
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f005 fb45 	bl	800f940 <VL53LX_multizone_hist_bins_update>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800a2bc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d105      	bne.n	800a2d0 <VL53LX_get_device_results+0x5a4>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f005 ff35 	bl	8010134 <VL53LX_dynamic_xtalk_correction_corrector>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 800a2d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2d2:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d151      	bne.n	800a37e <VL53LX_get_device_results+0x652>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	e04c      	b.n	800a37e <VL53LX_get_device_results+0x652>
	} else {

		if (status == VL53LX_ERROR_NONE)
 800a2e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d107      	bne.n	800a2fc <VL53LX_get_device_results+0x5d0>
			status = VL53LX_get_measurement_results(
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fc5d 	bl	8009bb0 <VL53LX_get_measurement_results>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 800a2fc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10d      	bne.n	800a320 <VL53LX_get_device_results+0x5f4>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800a304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a306:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 800a30a:	4618      	mov	r0, r3
 800a30c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a30e:	f203 319e 	addw	r1, r3, #926	; 0x39e
 800a312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a314:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800a318:	3210      	adds	r2, #16
 800a31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a31c:	f000 fc2c 	bl	800ab78 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d12a      	bne.n	800a37e <VL53LX_get_device_results+0x652>

			if ((status == VL53LX_ERROR_NONE) &&
 800a328:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10d      	bne.n	800a34c <VL53LX_get_device_results+0x620>
				(pL->low_power_auto_range_count == 0)) {
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <VL53LX_get_device_results+0x620>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f006 fb54 	bl	80109e6 <VL53LX_low_power_auto_setup_manual_calibration>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	2201      	movs	r2, #1
 800a348:	709a      	strb	r2, [r3, #2]
 800a34a:	e00a      	b.n	800a362 <VL53LX_get_device_results+0x636>
			} else if ((status == VL53LX_ERROR_NONE) &&
 800a34c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <VL53LX_get_device_results+0x636>
				(pL->low_power_auto_range_count == 1)) {
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d102      	bne.n	800a362 <VL53LX_get_device_results+0x636>
				pL->low_power_auto_range_count = 2;
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	2202      	movs	r2, #2
 800a360:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	789b      	ldrb	r3, [r3, #2]
 800a366:	2bff      	cmp	r3, #255	; 0xff
 800a368:	d009      	beq.n	800a37e <VL53LX_get_device_results+0x652>
 800a36a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d105      	bne.n	800a37e <VL53LX_get_device_results+0x652>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f006 fb88 	bl	8010a88 <VL53LX_low_power_auto_update_DSS>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800a37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a380:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a386:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800a388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a38a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800a38e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a390:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800a392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a394:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a39a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 800a39c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f040 80b0 	bne.w	800a506 <VL53LX_get_device_results+0x7da>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 800a3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3a8:	2210      	movs	r2, #16
 800a3aa:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800a3ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3b0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3ba:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 800a3be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 800a3c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3ca:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a3ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	f080 8097 	bcs.w	800a506 <VL53LX_get_device_results+0x7da>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 800a3d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 800a3dc:	4613      	mov	r3, r2
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800a3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800a3f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3f2:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800a3f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f6:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800a3f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3fa:	785a      	ldrb	r2, [r3, #1]
 800a3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3fe:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800a400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a402:	789a      	ldrb	r2, [r3, #2]
 800a404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a406:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 800a408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a40a:	78da      	ldrb	r2, [r3, #3]
 800a40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a40e:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 800a410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a412:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 800a416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a418:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 800a41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a41c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 800a420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a422:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 800a424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a426:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 800a42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a42c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800a430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a432:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 800a436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800a43c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a43e:	7c5a      	ldrb	r2, [r3, #17]
 800a440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a442:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800a444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a446:	7c9a      	ldrb	r2, [r3, #18]
 800a448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44a:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800a44c:	2300      	movs	r3, #0
 800a44e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a452:	e052      	b.n	800a4fa <VL53LX_get_device_results+0x7ce>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800a454:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 800a458:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800a45c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a45e:	204c      	movs	r0, #76	; 0x4c
 800a460:	fb00 f303 	mul.w	r3, r0, r3
 800a464:	440b      	add	r3, r1
 800a466:	3338      	adds	r3, #56	; 0x38
 800a468:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 800a46a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a46c:	4613      	mov	r3, r2
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4403      	add	r3, r0
 800a476:	3308      	adds	r3, #8
 800a478:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800a47a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800a47e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800a482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a484:	204c      	movs	r0, #76	; 0x4c
 800a486:	fb00 f303 	mul.w	r3, r0, r3
 800a48a:	440b      	add	r3, r1
 800a48c:	333c      	adds	r3, #60	; 0x3c
 800a48e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800a490:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a492:	4613      	mov	r3, r2
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4403      	add	r3, r0
 800a49c:	330c      	adds	r3, #12
 800a49e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 800a4a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 800a4a4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 800a4a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4aa:	204c      	movs	r0, #76	; 0x4c
 800a4ac:	fb00 f303 	mul.w	r3, r0, r3
 800a4b0:	440b      	add	r3, r1
 800a4b2:	3354      	adds	r3, #84	; 0x54
 800a4b4:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 800a4b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	3310      	adds	r3, #16
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 800a4c8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 800a4cc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 800a4d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4d2:	204c      	movs	r0, #76	; 0x4c
 800a4d4:	fb00 f303 	mul.w	r3, r0, r3
 800a4d8:	440b      	add	r3, r1
 800a4da:	335e      	adds	r3, #94	; 0x5e
 800a4dc:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 800a4de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	3312      	adds	r3, #18
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800a4f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800a4fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4fc:	7c9b      	ldrb	r3, [r3, #18]
 800a4fe:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a502:	429a      	cmp	r2, r3
 800a504:	d3a6      	bcc.n	800a454 <VL53LX_get_device_results+0x728>
		}
	}



	memcpy(
 800a506:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800a50a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f00d f980 	bl	8017812 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 800a512:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800a516:	2b00      	cmp	r3, #0
 800a518:	d105      	bne.n	800a526 <VL53LX_get_device_results+0x7fa>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f002 fde4 	bl	800d0e8 <VL53LX_check_ll_driver_rd_state>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800a526:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3768      	adds	r7, #104	; 0x68
 800a52e:	46bd      	mov	sp, r7
 800a530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a534 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 800a544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	2203      	movs	r2, #3
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff f80e 	bl	8009574 <VL53LX_init_and_start_range>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800a55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b0d2      	sub	sp, #328	; 0x148
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a572:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a576:	6018      	str	r0, [r3, #0]
 800a578:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a57c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a580:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a582:	2300      	movs	r3, #0
 800a584:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 800a588:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a58c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800a596:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a59a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a5a4:	3320      	adds	r3, #32
 800a5a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 800a5aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5ae:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800a5b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800a5b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5ba:	f203 3336 	addw	r3, r3, #822	; 0x336
 800a5be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800a5c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a5ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 800a5ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5d2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800a5d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 800a5da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a5de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800a5e2:	f107 030c 	add.w	r3, r7, #12
 800a5e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 800a614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a618:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800a620:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10d      	bne.n	800a644 <VL53LX_get_histogram_bin_data+0xdc>
		status = VL53LX_ReadMulti(
 800a628:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a62c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800a630:	2353      	movs	r3, #83	; 0x53
 800a632:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800a636:	2188      	movs	r1, #136	; 0x88
 800a638:	6800      	ldr	r0, [r0, #0]
 800a63a:	f00c fbe7 	bl	8016e0c <VL53LX_ReadMulti>
 800a63e:	4603      	mov	r3, r0
 800a640:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 800a644:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a64e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 800a658:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a65c:	785a      	ldrb	r2, [r3, #1]
 800a65e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a662:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800a66c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a670:	789a      	ldrb	r2, [r3, #2]
 800a672:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a676:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 800a680:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a684:	78da      	ldrb	r2, [r3, #3]
 800a686:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a68a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 800a694:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a698:	3304      	adds	r3, #4
 800a69a:	4619      	mov	r1, r3
 800a69c:	2002      	movs	r0, #2
 800a69e:	f003 fa24 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 800a6a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a6aa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 800a6b4:	234e      	movs	r3, #78	; 0x4e
 800a6b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800a6ba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a6be:	f107 020c 	add.w	r2, r7, #12
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800a6c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a6cc:	2002      	movs	r0, #2
 800a6ce:	f003 fa0c 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800a6d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a6da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 800a6e4:	2350      	movs	r3, #80	; 0x50
 800a6e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 800a6ea:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a6ee:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a6f2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a6f6:	5cd2      	ldrb	r2, [r2, r3]
 800a6f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a6fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 800a706:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a70a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 800a714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71c:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 800a720:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a724:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800a72e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a736:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396



	i2c_buffer_offset_bytes =
 800a73a:	2351      	movs	r3, #81	; 0x51
 800a73c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800a740:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a744:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a748:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a74c:	5cd3      	ldrb	r3, [r2, r3]
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800a754:	2352      	movs	r3, #82	; 0x52
 800a756:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800a75a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a75e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a762:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a766:	5cd2      	ldrb	r2, [r2, r3]
 800a768:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a76c:	4413      	add	r3, r2
 800a76e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800a772:	234d      	movs	r3, #77	; 0x4d
 800a774:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800a778:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a77c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a780:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a784:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 800a788:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800a78a:	2306      	movs	r3, #6
 800a78c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800a790:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a794:	f107 020c 	add.w	r2, r7, #12
 800a798:	4413      	add	r3, r2
 800a79a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800a7a4:	e01a      	b.n	800a7dc <VL53LX_get_histogram_bin_data+0x274>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800a7a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a7aa:	2003      	movs	r0, #3
 800a7ac:	f003 fa3c 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 800a7b0:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800a7b2:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800a7b6:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 800a7b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a7bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3206      	adds	r2, #6
 800a7c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 800a7c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a7cc:	3303      	adds	r3, #3
 800a7ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800a7d2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800a7dc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800a7e0:	2b17      	cmp	r3, #23
 800a7e2:	d9e0      	bls.n	800a7a6 <VL53LX_get_histogram_bin_data+0x23e>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 800a7e4:	f107 0208 	add.w	r2, r7, #8
 800a7e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a7ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a7f0:	f248 018d 	movw	r1, #32909	; 0x808d
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	f000 fb97 	bl	800af28 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 800a7fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a7fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d118      	bne.n	800a83e <VL53LX_get_histogram_bin_data+0x2d6>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800a80c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a810:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 800a814:	3308      	adds	r3, #8
 800a816:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f00c ff69 	bl	80176f4 <memset>
		pdev->bin_rec_pos = 0;
 800a822:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2c44 	strb.w	r2, [r3, #3140]	; 0xc44
		pdev->pos_before_next_recom = 0;
 800a830:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2c45 	strb.w	r2, [r3, #3141]	; 0xc45
	}

	if (hist_merge == 1)
 800a83e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a842:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d10b      	bne.n	800a864 <VL53LX_get_histogram_bin_data+0x2fc>
		vl53lx_histo_merge(Dev, pdata);
 800a84c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a850:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800a854:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a858:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a85c:	6811      	ldr	r1, [r2, #0]
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	f7fd fe98 	bl	8008594 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 800a864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a868:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a86c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a870:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 800a878:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a87c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800a886:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a88a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2218      	movs	r2, #24
 800a892:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800a894:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a898:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2218      	movs	r2, #24
 800a8a0:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800a8a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a8a6:	78da      	ldrb	r2, [r3, #3]
 800a8a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a8ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800a8b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a8ba:	799b      	ldrb	r3, [r3, #6]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	011b      	lsls	r3, r3, #4
 800a8c0:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 800a8c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a8c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800a8d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a8d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800a8de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8e2:	7c1b      	ldrb	r3, [r3, #16]
 800a8e4:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 800a8e6:	4413      	add	r3, r2
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a8ee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800a8f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8fc:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800a8fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a902:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 800a90c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a910:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800a914:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a918:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a91c:	6811      	ldr	r1, [r2, #0]
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f003 fd4b 	bl	800e3ba <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 800a924:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a928:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d117      	bne.n	800a960 <VL53LX_get_histogram_bin_data+0x3f8>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800a930:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a934:	791b      	ldrb	r3, [r3, #4]
 800a936:	b29b      	uxth	r3, r3
 800a938:	021b      	lsls	r3, r3, #8
 800a93a:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800a93c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a940:	795b      	ldrb	r3, [r3, #5]
 800a942:	b29b      	uxth	r3, r3
		encoded_timeout =
 800a944:	4413      	add	r3, r2
 800a946:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800a94a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a94e:	799a      	ldrb	r2, [r3, #6]
 800a950:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a954:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800a95e:	e016      	b.n	800a98e <VL53LX_get_histogram_bin_data+0x426>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800a960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a964:	79db      	ldrb	r3, [r3, #7]
 800a966:	b29b      	uxth	r3, r3
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 800a96c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a970:	7a1b      	ldrb	r3, [r3, #8]
 800a972:	b29b      	uxth	r3, r3
		encoded_timeout =
 800a974:	4413      	add	r3, r2
 800a976:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 800a97a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a97e:	7a5a      	ldrb	r2, [r3, #9]
 800a980:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a984:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800a98e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a992:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2200      	movs	r2, #0
 800a99a:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800a99c:	2300      	movs	r3, #0
 800a99e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800a9a2:	e01f      	b.n	800a9e4 <VL53LX_get_histogram_bin_data+0x47c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800a9a4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800a9a8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a9ac:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800a9b0:	6812      	ldr	r2, [r2, #0]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	7b1b      	ldrb	r3, [r3, #12]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	2b07      	cmp	r3, #7
 800a9bc:	d10d      	bne.n	800a9da <VL53LX_get_histogram_bin_data+0x472>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800a9be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a9c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	7adb      	ldrb	r3, [r3, #11]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800a9ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a9d2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 800a9da:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800a9de:	3301      	adds	r3, #1
 800a9e0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800a9e4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800a9e8:	2b05      	cmp	r3, #5
 800a9ea:	d9db      	bls.n	800a9a4 <VL53LX_get_histogram_bin_data+0x43c>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 800a9ec:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f003 fb52 	bl	800e09a <VL53LX_decode_timeout>
 800a9f6:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 800a9f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a9fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 800aa06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa14:	4618      	mov	r0, r3
 800aa16:	f006 f8fe 	bl	8010c16 <VL53LX_calc_pll_period_us>
 800aa1a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800aa1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 800aa32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 800aa40:	4619      	mov	r1, r3
 800aa42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa4a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800aa4e:	f006 f8f9 	bl	8010c44 <VL53LX_duration_maths>
 800aa52:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800aa54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800aa62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa66:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 800aa72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa76:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	f006 fa08 	bl	8010e90 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 800aa80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f006 fe20 	bl	80116ce <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800aa8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800aa96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aa9a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800aaa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aaa6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800aaaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aaae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800aab6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aaba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	789b      	ldrb	r3, [r3, #2]
 800aac2:	461a      	mov	r2, r3
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800aad0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800aad4:	4413      	add	r3, r2
 800aad6:	3302      	adds	r3, #2
 800aad8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800aadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aae0:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800aae2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aae6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800aaf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aaf4:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800aaf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800aafa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ab04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ab08:	2200      	movs	r2, #0
 800ab0a:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800ab0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800ab1a:	f003 031f 	and.w	r3, r3, #31
 800ab1e:	2b11      	cmp	r3, #17
 800ab20:	bf8c      	ite	hi
 800ab22:	2201      	movhi	r2, #1
 800ab24:	2200      	movls	r2, #0
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	d11c      	bne.n	800ab66 <VL53LX_get_histogram_bin_data+0x5fe>
 800ab2c:	4a11      	ldr	r2, [pc, #68]	; (800ab74 <VL53LX_get_histogram_bin_data+0x60c>)
 800ab2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bf14      	ite	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	2300      	moveq	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d010      	beq.n	800ab66 <VL53LX_get_histogram_bin_data+0x5fe>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800ab44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ab48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ab5c:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800ab5e:	23fa      	movs	r3, #250	; 0xfa
 800ab60:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 800ab64:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800ab66:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	0002200e 	.word	0x0002200e

0800ab78 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b08b      	sub	sp, #44	; 0x2c
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2200      	movs	r2, #0
 800ab98:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	78da      	ldrb	r2, [r3, #3]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2200      	movs	r2, #0
 800aba6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2204      	movs	r2, #4
 800abac:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2201      	movs	r2, #1
 800abb2:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	8a1b      	ldrh	r3, [r3, #16]
 800abb8:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	8a9b      	ldrh	r3, [r3, #20]
 800abbe:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	8a5b      	ldrh	r3, [r3, #18]
 800abc4:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abcc:	e00b      	b.n	800abe6 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800abce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	2200      	movs	r2, #0
 800abda:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800abdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe0:	3301      	adds	r3, #1
 800abe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abea:	2b04      	cmp	r3, #4
 800abec:	d9ef      	bls.n	800abce <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	3314      	adds	r3, #20
 800abf2:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abfa:	e0fe      	b.n	800adfa <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ac02:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	78db      	ldrb	r3, [r3, #3]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800ac1a:	2b09      	cmp	r3, #9
 800ac1c:	d104      	bne.n	800ac28 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	2213      	movs	r2, #19
 800ac22:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800ac26:	e007      	b.n	800ac38 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	f003 031f 	and.w	r3, r3, #31
 800ac30:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	2200      	movs	r2, #0
 800ac42:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	2200      	movs	r2, #0
 800ac48:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	2200      	movs	r2, #0
 800ac54:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	735a      	strb	r2, [r3, #13]

		switch (i) {
 800ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d05c      	beq.n	800ad22 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 800ac68:	e0a8      	b.n	800adbc <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	789b      	ldrb	r3, [r3, #2]
 800ac6e:	2b07      	cmp	r3, #7
 800ac70:	d103      	bne.n	800ac7a <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	8a7a      	ldrh	r2, [r7, #18]
 800ac76:	82da      	strh	r2, [r3, #22]
 800ac78:	e00b      	b.n	800ac92 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	789b      	ldrb	r3, [r3, #2]
 800ac7e:	2b08      	cmp	r3, #8
 800ac80:	d103      	bne.n	800ac8a <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	8aba      	ldrh	r2, [r7, #20]
 800ac86:	82da      	strh	r2, [r3, #22]
 800ac88:	e003      	b.n	800ac92 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	8afa      	ldrh	r2, [r7, #22]
 800ac96:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	895b      	ldrh	r3, [r3, #10]
 800acac:	015b      	lsls	r3, r3, #5
 800acae:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb6:	d302      	bcc.n	800acbe <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800acb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acbc:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 800acd4:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	fb02 f303 	mul.w	r3, r2, r3
 800acde:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ace6:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	da01      	bge.n	800acf2 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 800acee:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800acf2:	12db      	asrs	r3, r3, #11
 800acf4:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	b21a      	sxth	r2, r3
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800ad20:	e04c      	b.n	800adbc <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad38:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	8bdb      	ldrh	r3, [r3, #30]
 800ad46:	015b      	lsls	r3, r3, #5
 800ad48:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad50:	d302      	bcc.n	800ad58 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800ad52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad56:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800ad6e:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad80:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da01      	bge.n	800ad8c <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 800ad88:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ad8c:	12db      	asrs	r3, r3, #11
 800ad8e:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	b21a      	sxth	r2, r3
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800adba:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	334c      	adds	r3, #76	; 0x4c
 800adee:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800adf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adf4:	3301      	adds	r3, #1
 800adf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	f67f aefc 	bls.w	800abfc <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2200      	movs	r2, #0
 800ae08:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	f003 031f 	and.w	r3, r3, #31
 800ae12:	2b11      	cmp	r3, #17
 800ae14:	bf8c      	ite	hi
 800ae16:	2201      	movhi	r2, #1
 800ae18:	2200      	movls	r2, #0
 800ae1a:	b2d2      	uxtb	r2, r2
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	d117      	bne.n	800ae50 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
 800ae20:	4a0e      	ldr	r2, [pc, #56]	; (800ae5c <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800ae22:	fa22 f303 	lsr.w	r3, r2, r3
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bf14      	ite	ne
 800ae2e:	2301      	movne	r3, #1
 800ae30:	2300      	moveq	r3, #0
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d8>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	f003 031f 	and.w	r3, r3, #31
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 800ae4e:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800ae50:	bf00      	nop
 800ae52:	372c      	adds	r7, #44	; 0x2c
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	0002200e 	.word	0x0002200e

0800ae60 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	332c      	adds	r3, #44	; 0x2c
 800ae76:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b05      	cmp	r3, #5
 800ae7e:	d109      	bne.n	800ae94 <VL53LX_set_zone_dss_config+0x34>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
 800ae92:	e003      	b.n	800ae9c <VL53LX_set_zone_dss_config+0x3c>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800ae9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800aec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b086      	sub	sp, #24
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	460b      	mov	r3, r1
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d009      	beq.n	800af06 <VL53LX_get_dmax_calibration_data+0x30>
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d10f      	bne.n	800af16 <VL53LX_get_dmax_calibration_data+0x40>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800aefa:	220a      	movs	r2, #10
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f00c fc87 	bl	8017812 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800af04:	e00a      	b.n	800af1c <VL53LX_get_dmax_calibration_data+0x46>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 800af0a:	220a      	movs	r2, #10
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f00c fc7f 	bl	8017812 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800af14:	e002      	b.n	800af1c <VL53LX_get_dmax_calibration_data+0x46>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800af16:	23fc      	movs	r3, #252	; 0xfc
 800af18:	75fb      	strb	r3, [r7, #23]
	break;
 800af1a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800af1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800af28:	b480      	push	{r7}
 800af2a:	b089      	sub	sp, #36	; 0x24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	460b      	mov	r3, r1
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800af44:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af4c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800af4e:	897b      	ldrh	r3, [r7, #10]
 800af50:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800af54:	2bb9      	cmp	r3, #185	; 0xb9
 800af56:	f200 86c9 	bhi.w	800bcec <VL53LX_get_tuning_parm+0xdc4>
 800af5a:	a201      	add	r2, pc, #4	; (adr r2, 800af60 <VL53LX_get_tuning_parm+0x38>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800b249 	.word	0x0800b249
 800af64:	0800b259 	.word	0x0800b259
 800af68:	0800b269 	.word	0x0800b269
 800af6c:	0800b279 	.word	0x0800b279
 800af70:	0800b287 	.word	0x0800b287
 800af74:	0800b295 	.word	0x0800b295
 800af78:	0800b2a3 	.word	0x0800b2a3
 800af7c:	0800b2b1 	.word	0x0800b2b1
 800af80:	0800b2bf 	.word	0x0800b2bf
 800af84:	0800b2cd 	.word	0x0800b2cd
 800af88:	0800b2db 	.word	0x0800b2db
 800af8c:	0800b2e7 	.word	0x0800b2e7
 800af90:	0800b2f5 	.word	0x0800b2f5
 800af94:	0800b303 	.word	0x0800b303
 800af98:	0800b30f 	.word	0x0800b30f
 800af9c:	0800b31d 	.word	0x0800b31d
 800afa0:	0800b32b 	.word	0x0800b32b
 800afa4:	0800b33b 	.word	0x0800b33b
 800afa8:	0800b34b 	.word	0x0800b34b
 800afac:	0800b359 	.word	0x0800b359
 800afb0:	0800b369 	.word	0x0800b369
 800afb4:	0800b377 	.word	0x0800b377
 800afb8:	0800b387 	.word	0x0800b387
 800afbc:	0800b397 	.word	0x0800b397
 800afc0:	0800b3a7 	.word	0x0800b3a7
 800afc4:	0800b3b7 	.word	0x0800b3b7
 800afc8:	0800b3c7 	.word	0x0800b3c7
 800afcc:	0800b3d7 	.word	0x0800b3d7
 800afd0:	0800b3e7 	.word	0x0800b3e7
 800afd4:	0800b3f7 	.word	0x0800b3f7
 800afd8:	0800b407 	.word	0x0800b407
 800afdc:	0800b415 	.word	0x0800b415
 800afe0:	0800b425 	.word	0x0800b425
 800afe4:	0800b435 	.word	0x0800b435
 800afe8:	0800b445 	.word	0x0800b445
 800afec:	0800b455 	.word	0x0800b455
 800aff0:	0800b465 	.word	0x0800b465
 800aff4:	0800b475 	.word	0x0800b475
 800aff8:	0800b485 	.word	0x0800b485
 800affc:	0800b495 	.word	0x0800b495
 800b000:	0800b4a5 	.word	0x0800b4a5
 800b004:	0800b4b5 	.word	0x0800b4b5
 800b008:	0800b4c5 	.word	0x0800b4c5
 800b00c:	0800b4d5 	.word	0x0800b4d5
 800b010:	0800b4e5 	.word	0x0800b4e5
 800b014:	0800b4f5 	.word	0x0800b4f5
 800b018:	0800b503 	.word	0x0800b503
 800b01c:	0800b511 	.word	0x0800b511
 800b020:	0800b51f 	.word	0x0800b51f
 800b024:	0800b52d 	.word	0x0800b52d
 800b028:	0800b53b 	.word	0x0800b53b
 800b02c:	0800b549 	.word	0x0800b549
 800b030:	0800b557 	.word	0x0800b557
 800b034:	0800b565 	.word	0x0800b565
 800b038:	0800b573 	.word	0x0800b573
 800b03c:	0800b581 	.word	0x0800b581
 800b040:	0800b58f 	.word	0x0800b58f
 800b044:	0800b59d 	.word	0x0800b59d
 800b048:	0800b5ab 	.word	0x0800b5ab
 800b04c:	0800b5b9 	.word	0x0800b5b9
 800b050:	0800b5c7 	.word	0x0800b5c7
 800b054:	0800b5d5 	.word	0x0800b5d5
 800b058:	0800b5e3 	.word	0x0800b5e3
 800b05c:	0800b5f1 	.word	0x0800b5f1
 800b060:	0800b5ff 	.word	0x0800b5ff
 800b064:	0800b60d 	.word	0x0800b60d
 800b068:	0800b61b 	.word	0x0800b61b
 800b06c:	0800b629 	.word	0x0800b629
 800b070:	0800b637 	.word	0x0800b637
 800b074:	0800b645 	.word	0x0800b645
 800b078:	0800b653 	.word	0x0800b653
 800b07c:	0800b661 	.word	0x0800b661
 800b080:	0800b66f 	.word	0x0800b66f
 800b084:	0800b67d 	.word	0x0800b67d
 800b088:	0800b689 	.word	0x0800b689
 800b08c:	0800b697 	.word	0x0800b697
 800b090:	0800b6a5 	.word	0x0800b6a5
 800b094:	0800b6b1 	.word	0x0800b6b1
 800b098:	0800b6bd 	.word	0x0800b6bd
 800b09c:	0800b6c9 	.word	0x0800b6c9
 800b0a0:	0800b6d5 	.word	0x0800b6d5
 800b0a4:	0800b6e1 	.word	0x0800b6e1
 800b0a8:	0800b6ed 	.word	0x0800b6ed
 800b0ac:	0800b6fb 	.word	0x0800b6fb
 800b0b0:	0800b709 	.word	0x0800b709
 800b0b4:	0800b717 	.word	0x0800b717
 800b0b8:	0800b725 	.word	0x0800b725
 800b0bc:	0800b733 	.word	0x0800b733
 800b0c0:	0800b741 	.word	0x0800b741
 800b0c4:	0800b74f 	.word	0x0800b74f
 800b0c8:	0800b75d 	.word	0x0800b75d
 800b0cc:	0800b76b 	.word	0x0800b76b
 800b0d0:	0800b779 	.word	0x0800b779
 800b0d4:	0800b787 	.word	0x0800b787
 800b0d8:	0800b795 	.word	0x0800b795
 800b0dc:	0800b7a3 	.word	0x0800b7a3
 800b0e0:	0800b7b1 	.word	0x0800b7b1
 800b0e4:	0800b7bf 	.word	0x0800b7bf
 800b0e8:	0800b7cd 	.word	0x0800b7cd
 800b0ec:	0800b7db 	.word	0x0800b7db
 800b0f0:	0800b7e9 	.word	0x0800b7e9
 800b0f4:	0800b7f7 	.word	0x0800b7f7
 800b0f8:	0800b805 	.word	0x0800b805
 800b0fc:	0800b813 	.word	0x0800b813
 800b100:	0800b821 	.word	0x0800b821
 800b104:	0800b82f 	.word	0x0800b82f
 800b108:	0800b83d 	.word	0x0800b83d
 800b10c:	0800b84b 	.word	0x0800b84b
 800b110:	0800b859 	.word	0x0800b859
 800b114:	0800b867 	.word	0x0800b867
 800b118:	0800b875 	.word	0x0800b875
 800b11c:	0800b883 	.word	0x0800b883
 800b120:	0800b891 	.word	0x0800b891
 800b124:	0800b89f 	.word	0x0800b89f
 800b128:	0800b8ad 	.word	0x0800b8ad
 800b12c:	0800b8bb 	.word	0x0800b8bb
 800b130:	0800b8c9 	.word	0x0800b8c9
 800b134:	0800b8d7 	.word	0x0800b8d7
 800b138:	0800b8e5 	.word	0x0800b8e5
 800b13c:	0800b8f7 	.word	0x0800b8f7
 800b140:	0800b909 	.word	0x0800b909
 800b144:	0800b91b 	.word	0x0800b91b
 800b148:	0800b92d 	.word	0x0800b92d
 800b14c:	0800b93f 	.word	0x0800b93f
 800b150:	0800b951 	.word	0x0800b951
 800b154:	0800b963 	.word	0x0800b963
 800b158:	0800b975 	.word	0x0800b975
 800b15c:	0800b987 	.word	0x0800b987
 800b160:	0800b999 	.word	0x0800b999
 800b164:	0800b9ab 	.word	0x0800b9ab
 800b168:	0800b9bd 	.word	0x0800b9bd
 800b16c:	0800b9cf 	.word	0x0800b9cf
 800b170:	0800b9e1 	.word	0x0800b9e1
 800b174:	0800b9f3 	.word	0x0800b9f3
 800b178:	0800ba05 	.word	0x0800ba05
 800b17c:	0800ba17 	.word	0x0800ba17
 800b180:	0800ba29 	.word	0x0800ba29
 800b184:	0800ba3b 	.word	0x0800ba3b
 800b188:	0800ba49 	.word	0x0800ba49
 800b18c:	0800ba57 	.word	0x0800ba57
 800b190:	0800ba65 	.word	0x0800ba65
 800b194:	0800ba73 	.word	0x0800ba73
 800b198:	0800ba81 	.word	0x0800ba81
 800b19c:	0800ba8f 	.word	0x0800ba8f
 800b1a0:	0800ba9d 	.word	0x0800ba9d
 800b1a4:	0800baaf 	.word	0x0800baaf
 800b1a8:	0800babd 	.word	0x0800babd
 800b1ac:	0800bacb 	.word	0x0800bacb
 800b1b0:	0800bad9 	.word	0x0800bad9
 800b1b4:	0800bae7 	.word	0x0800bae7
 800b1b8:	0800baf5 	.word	0x0800baf5
 800b1bc:	0800bb03 	.word	0x0800bb03
 800b1c0:	0800bb11 	.word	0x0800bb11
 800b1c4:	0800bb1f 	.word	0x0800bb1f
 800b1c8:	0800bb2d 	.word	0x0800bb2d
 800b1cc:	0800bb3b 	.word	0x0800bb3b
 800b1d0:	0800bb49 	.word	0x0800bb49
 800b1d4:	0800bb57 	.word	0x0800bb57
 800b1d8:	0800bb65 	.word	0x0800bb65
 800b1dc:	0800bb73 	.word	0x0800bb73
 800b1e0:	0800bb81 	.word	0x0800bb81
 800b1e4:	0800bb8f 	.word	0x0800bb8f
 800b1e8:	0800bb9d 	.word	0x0800bb9d
 800b1ec:	0800bbab 	.word	0x0800bbab
 800b1f0:	0800bbb9 	.word	0x0800bbb9
 800b1f4:	0800bbc7 	.word	0x0800bbc7
 800b1f8:	0800bbd5 	.word	0x0800bbd5
 800b1fc:	0800bbe3 	.word	0x0800bbe3
 800b200:	0800bbf1 	.word	0x0800bbf1
 800b204:	0800bbff 	.word	0x0800bbff
 800b208:	0800bc0d 	.word	0x0800bc0d
 800b20c:	0800bc1b 	.word	0x0800bc1b
 800b210:	0800bc29 	.word	0x0800bc29
 800b214:	0800bc37 	.word	0x0800bc37
 800b218:	0800bc45 	.word	0x0800bc45
 800b21c:	0800bc53 	.word	0x0800bc53
 800b220:	0800bc61 	.word	0x0800bc61
 800b224:	0800bc6f 	.word	0x0800bc6f
 800b228:	0800bc7d 	.word	0x0800bc7d
 800b22c:	0800bc8b 	.word	0x0800bc8b
 800b230:	0800bc99 	.word	0x0800bc99
 800b234:	0800bca7 	.word	0x0800bca7
 800b238:	0800bcb5 	.word	0x0800bcb5
 800b23c:	0800bcc3 	.word	0x0800bcc3
 800b240:	0800bcd1 	.word	0x0800bcd1
 800b244:	0800bcdf 	.word	0x0800bcdf

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 800b24e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
	break;
 800b254:	f000 bd51 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 800b25e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
	break;
 800b264:	f000 bd49 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 800b26e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	601a      	str	r2, [r3, #0]
	break;
 800b274:	f000 bd41 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	601a      	str	r2, [r3, #0]
	break;
 800b282:	f000 bd3a 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	785b      	ldrb	r3, [r3, #1]
 800b28a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	601a      	str	r2, [r3, #0]
	break;
 800b290:	f000 bd33 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	789b      	ldrb	r3, [r3, #2]
 800b298:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	601a      	str	r2, [r3, #0]
	break;
 800b29e:	f000 bd2c 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	78db      	ldrb	r3, [r3, #3]
 800b2a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	601a      	str	r2, [r3, #0]
	break;
 800b2ac:	f000 bd25 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	791b      	ldrb	r3, [r3, #4]
 800b2b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	601a      	str	r2, [r3, #0]
	break;
 800b2ba:	f000 bd1e 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	795b      	ldrb	r3, [r3, #5]
 800b2c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]
	break;
 800b2c8:	f000 bd17 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	799b      	ldrb	r3, [r3, #6]
 800b2d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
	break;
 800b2d6:	f000 bd10 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	601a      	str	r2, [r3, #0]
	break;
 800b2e2:	f000 bd0a 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	891b      	ldrh	r3, [r3, #8]
 800b2ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
	break;
 800b2f0:	f000 bd03 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	8a1b      	ldrh	r3, [r3, #16]
 800b2f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	601a      	str	r2, [r3, #0]
	break;
 800b2fe:	f000 bcfc 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
	break;
 800b30a:	f000 bcf6 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	7e1b      	ldrb	r3, [r3, #24]
 800b312:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
	break;
 800b318:	f000 bcef 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	8b5b      	ldrh	r3, [r3, #26]
 800b320:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
	break;
 800b326:	f000 bce8 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800b330:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	601a      	str	r2, [r3, #0]
	break;
 800b336:	f000 bce0 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b340:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]
	break;
 800b346:	f000 bcd8 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b34e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
	break;
 800b354:	f000 bcd1 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b35e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
	break;
 800b364:	f000 bcc9 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b36c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	601a      	str	r2, [r3, #0]
	break;
 800b372:	f000 bcc2 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800b37c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
	break;
 800b382:	f000 bcba 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800b38c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
	break;
 800b392:	f000 bcb2 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800b39c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	601a      	str	r2, [r3, #0]
	break;
 800b3a2:	f000 bcaa 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800b3ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	601a      	str	r2, [r3, #0]
	break;
 800b3b2:	f000 bca2 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800b3bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
	break;
 800b3c2:	f000 bc9a 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800b3cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
	break;
 800b3d2:	f000 bc92 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	f9b3 32de 	ldrsh.w	r3, [r3, #734]	; 0x2de
		*ptuning_parm_value = (int32_t)(
 800b3dc:	461a      	mov	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	601a      	str	r2, [r3, #0]
	break;
 800b3e2:	f000 bc8a 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f9b3 32e0 	ldrsh.w	r3, [r3, #736]	; 0x2e0
		*ptuning_parm_value = (int32_t)(
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
	break;
 800b3f2:	f000 bc82 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	f8b3 32e4 	ldrh.w	r3, [r3, #740]	; 0x2e4
 800b3fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	601a      	str	r2, [r3, #0]
	break;
 800b402:	f000 bc7a 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	601a      	str	r2, [r3, #0]
	break;
 800b410:	f000 bc73 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	f8b3 32e2 	ldrh.w	r3, [r3, #738]	; 0x2e2
		*ptuning_parm_value = (int32_t)(
 800b41a:	461a      	mov	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	601a      	str	r2, [r3, #0]
	break;
 800b420:	f000 bc6b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b42a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	601a      	str	r2, [r3, #0]
	break;
 800b430:	f000 bc63 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	; 0x2d6
 800b43a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	601a      	str	r2, [r3, #0]
	break;
 800b440:	f000 bc5b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800b44a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	601a      	str	r2, [r3, #0]
	break;
 800b450:	f000 bc53 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800b45a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
	break;
 800b460:	f000 bc4b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b46a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]
	break;
 800b470:	f000 bc43 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800b47a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	601a      	str	r2, [r3, #0]
	break;
 800b480:	f000 bc3b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800b48a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	601a      	str	r2, [r3, #0]
	break;
 800b490:	f000 bc33 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800b49a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	601a      	str	r2, [r3, #0]
	break;
 800b4a0:	f000 bc2b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b4aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	601a      	str	r2, [r3, #0]
	break;
 800b4b0:	f000 bc23 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800b4ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	601a      	str	r2, [r3, #0]
	break;
 800b4c0:	f000 bc1b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	601a      	str	r2, [r3, #0]
	break;
 800b4d0:	f000 bc13 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800b4da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	601a      	str	r2, [r3, #0]
	break;
 800b4e0:	f000 bc0b 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	601a      	str	r2, [r3, #0]
	break;
 800b4f0:	f000 bc03 	b.w	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800b4fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	601a      	str	r2, [r3, #0]
	break;
 800b500:	e3fb      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800b508:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	601a      	str	r2, [r3, #0]
	break;
 800b50e:	e3f4      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800b516:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
	break;
 800b51c:	e3ed      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
 800b524:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	601a      	str	r2, [r3, #0]
	break;
 800b52a:	e3e6      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800b532:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	601a      	str	r2, [r3, #0]
	break;
 800b538:	e3df      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800b540:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	601a      	str	r2, [r3, #0]
	break;
 800b546:	e3d8      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800b54e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	601a      	str	r2, [r3, #0]
	break;
 800b554:	e3d1      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 800b55c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	601a      	str	r2, [r3, #0]
	break;
 800b562:	e3ca      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800b56a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	601a      	str	r2, [r3, #0]
	break;
 800b570:	e3c3      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800b578:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	601a      	str	r2, [r3, #0]
	break;
 800b57e:	e3bc      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800b586:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]
	break;
 800b58c:	e3b5      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800b594:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
	break;
 800b59a:	e3ae      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800b5a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
	break;
 800b5a8:	e3a7      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800b5b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
	break;
 800b5b6:	e3a0      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800b5be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	601a      	str	r2, [r3, #0]
	break;
 800b5c4:	e399      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 800b5cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	601a      	str	r2, [r3, #0]
	break;
 800b5d2:	e392      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	f8b3 3298 	ldrh.w	r3, [r3, #664]	; 0x298
 800b5da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	601a      	str	r2, [r3, #0]
	break;
 800b5e0:	e38b      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	f8b3 329a 	ldrh.w	r3, [r3, #666]	; 0x29a
 800b5e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	601a      	str	r2, [r3, #0]
	break;
 800b5ee:	e384      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f8b3 329c 	ldrh.w	r3, [r3, #668]	; 0x29c
 800b5f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	601a      	str	r2, [r3, #0]
	break;
 800b5fc:	e37d      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	f8b3 329e 	ldrh.w	r3, [r3, #670]	; 0x29e
 800b604:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	601a      	str	r2, [r3, #0]
	break;
 800b60a:	e376      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800b612:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
	break;
 800b618:	e36f      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 800b620:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
	break;
 800b626:	e368      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 800b62e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	601a      	str	r2, [r3, #0]
	break;
 800b634:	e361      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f893 3231 	ldrb.w	r3, [r3, #561]	; 0x231
 800b63c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	601a      	str	r2, [r3, #0]
	break;
 800b642:	e35a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800b64a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	601a      	str	r2, [r3, #0]
	break;
 800b650:	e353      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800b658:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
	break;
 800b65e:	e34c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 800b666:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
	break;
 800b66c:	e345      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 800b674:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	601a      	str	r2, [r3, #0]
	break;
 800b67a:	e33e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	7c1b      	ldrb	r3, [r3, #16]
 800b680:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	601a      	str	r2, [r3, #0]
	break;
 800b686:	e338      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b68e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	601a      	str	r2, [r3, #0]
	break;
 800b694:	e331      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b69c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	601a      	str	r2, [r3, #0]
	break;
 800b6a2:	e32a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	601a      	str	r2, [r3, #0]
	break;
 800b6ae:	e324      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	601a      	str	r2, [r3, #0]
	break;
 800b6ba:	e31e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	8adb      	ldrh	r3, [r3, #22]
 800b6c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
	break;
 800b6c6:	e318      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	8b1b      	ldrh	r3, [r3, #24]
 800b6cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
	break;
 800b6d2:	e312      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
	break;
 800b6de:	e30c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	601a      	str	r2, [r3, #0]
	break;
 800b6ea:	e306      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800b6f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	601a      	str	r2, [r3, #0]
	break;
 800b6f8:	e2ff      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b700:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
	break;
 800b706:	e2f8      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b70e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
	break;
 800b714:	e2f1      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b71c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	601a      	str	r2, [r3, #0]
	break;
 800b722:	e2ea      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800b72a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	601a      	str	r2, [r3, #0]
	break;
 800b730:	e2e3      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800b738:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	601a      	str	r2, [r3, #0]
	break;
 800b73e:	e2dc      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f893 32fa 	ldrb.w	r3, [r3, #762]	; 0x2fa
 800b746:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
	break;
 800b74c:	e2d5      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 800b754:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
	break;
 800b75a:	e2ce      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b762:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	601a      	str	r2, [r3, #0]
	break;
 800b768:	e2c7      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b770:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	601a      	str	r2, [r3, #0]
	break;
 800b776:	e2c0      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 800b77e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	601a      	str	r2, [r3, #0]
	break;
 800b784:	e2b9      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800b78c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
	break;
 800b792:	e2b2      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	f8b3 330e 	ldrh.w	r3, [r3, #782]	; 0x30e
 800b79a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	601a      	str	r2, [r3, #0]
	break;
 800b7a0:	e2ab      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 800b7a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	601a      	str	r2, [r3, #0]
	break;
 800b7ae:	e2a4      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
 800b7b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	601a      	str	r2, [r3, #0]
	break;
 800b7bc:	e29d      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800b7c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	601a      	str	r2, [r3, #0]
	break;
 800b7ca:	e296      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 800b7d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	601a      	str	r2, [r3, #0]
	break;
 800b7d8:	e28f      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800b7e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
	break;
 800b7e6:	e288      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800b7ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	601a      	str	r2, [r3, #0]
	break;
 800b7f4:	e281      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800b7fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	601a      	str	r2, [r3, #0]
	break;
 800b802:	e27a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b80a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	601a      	str	r2, [r3, #0]
	break;
 800b810:	e273      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b818:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
	break;
 800b81e:	e26c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800b826:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	601a      	str	r2, [r3, #0]
	break;
 800b82c:	e265      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b834:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	601a      	str	r2, [r3, #0]
	break;
 800b83a:	e25e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800b842:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]
	break;
 800b848:	e257      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b850:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	601a      	str	r2, [r3, #0]
	break;
 800b856:	e250      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800b85e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
	break;
 800b864:	e249      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800b86c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	601a      	str	r2, [r3, #0]
	break;
 800b872:	e242      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b87a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]
	break;
 800b880:	e23b      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800b888:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	601a      	str	r2, [r3, #0]
	break;
 800b88e:	e234      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b896:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]
	break;
 800b89c:	e22d      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800b8a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	601a      	str	r2, [r3, #0]
	break;
 800b8aa:	e226      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800b8b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	601a      	str	r2, [r3, #0]
	break;
 800b8b8:	e21f      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b8c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	601a      	str	r2, [r3, #0]
	break;
 800b8c6:	e218      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b8ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	601a      	str	r2, [r3, #0]
	break;
 800b8d4:	e211      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800b8dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	601a      	str	r2, [r3, #0]
	break;
 800b8e2:	e20a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ea:	f8b3 33d0 	ldrh.w	r3, [r3, #976]	; 0x3d0
 800b8ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
	break;
 800b8f4:	e201      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
	break;
 800b906:	e1f8      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800b912:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
	break;
 800b918:	e1ef      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b920:	f893 33dc 	ldrb.w	r3, [r3, #988]	; 0x3dc
 800b924:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	601a      	str	r2, [r3, #0]
	break;
 800b92a:	e1e6      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	601a      	str	r2, [r3, #0]
	break;
 800b93c:	e1dd      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b944:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 800b948:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
	break;
 800b94e:	e1d4      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b956:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800b95a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	601a      	str	r2, [r3, #0]
	break;
 800b960:	e1cb      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b968:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800b96c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	601a      	str	r2, [r3, #0]
	break;
 800b972:	e1c2      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b97a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b97e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	601a      	str	r2, [r3, #0]
	break;
 800b984:	e1b9      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b98c:	f9b3 33f6 	ldrsh.w	r3, [r3, #1014]	; 0x3f6
 800b990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
	break;
 800b996:	e1b0      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99e:	f9b3 33f8 	ldrsh.w	r3, [r3, #1016]	; 0x3f8
 800b9a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]
	break;
 800b9a8:	e1a7      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b0:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 800b9b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	601a      	str	r2, [r3, #0]
	break;
 800b9ba:	e19e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c2:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800b9c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	601a      	str	r2, [r3, #0]
	break;
 800b9cc:	e195      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d4:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
		*ptuning_parm_value = (int32_t)(
 800b9d8:	461a      	mov	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
	break;
 800b9de:	e18c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9e6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800b9ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	601a      	str	r2, [r3, #0]
	break;
 800b9f0:	e183      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b9fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
	break;
 800ba02:	e17a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	601a      	str	r2, [r3, #0]
	break;
 800ba14:	e171      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800ba20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]
	break;
 800ba26:	e168      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800ba32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]
	break;
 800ba38:	e15f      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800ba40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]
	break;
 800ba46:	e158      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ba4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	601a      	str	r2, [r3, #0]
	break;
 800ba54:	e151      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800ba5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	601a      	str	r2, [r3, #0]
	break;
 800ba62:	e14a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ba6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	601a      	str	r2, [r3, #0]
	break;
 800ba70:	e143      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800ba78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	601a      	str	r2, [r3, #0]
	break;
 800ba7e:	e13c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800ba86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	601a      	str	r2, [r3, #0]
	break;
 800ba8c:	e135      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800ba94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
	break;
 800ba9a:	e12e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800baa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	601a      	str	r2, [r3, #0]
	break;
 800baac:	e125      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800bab4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
	break;
 800baba:	e11e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800bac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]
	break;
 800bac8:	e117      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800bad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	601a      	str	r2, [r3, #0]
	break;
 800bad6:	e110      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800bade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
	break;
 800bae4:	e109      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800baec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
	break;
 800baf2:	e102      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800bafa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	601a      	str	r2, [r3, #0]
	break;
 800bb00:	e0fb      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 800bb08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
	break;
 800bb0e:	e0f4      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800bb16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	601a      	str	r2, [r3, #0]
	break;
 800bb1c:	e0ed      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800bb24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	601a      	str	r2, [r3, #0]
	break;
 800bb2a:	e0e6      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800bb32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	601a      	str	r2, [r3, #0]
	break;
 800bb38:	e0df      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 800bb40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	601a      	str	r2, [r3, #0]
	break;
 800bb46:	e0d8      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800bb4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	601a      	str	r2, [r3, #0]
	break;
 800bb54:	e0d1      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800bb5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	601a      	str	r2, [r3, #0]
	break;
 800bb62:	e0ca      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800bb6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
	break;
 800bb70:	e0c3      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800bb78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
	break;
 800bb7e:	e0bc      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 800bb86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	601a      	str	r2, [r3, #0]
	break;
 800bb8c:	e0b5      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 800bb94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	601a      	str	r2, [r3, #0]
	break;
 800bb9a:	e0ae      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 800bba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]
	break;
 800bba8:	e0a7      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800bbb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
	break;
 800bbb6:	e0a0      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800bbbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
	break;
 800bbc4:	e099      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800bbcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
	break;
 800bbd2:	e092      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 800bbda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	601a      	str	r2, [r3, #0]
	break;
 800bbe0:	e08b      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 800bbe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
	break;
 800bbee:	e084      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 800bbf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	601a      	str	r2, [r3, #0]
	break;
 800bbfc:	e07d      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 800bc04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
	break;
 800bc0a:	e076      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 800bc12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]
	break;
 800bc18:	e06f      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800bc20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
	break;
 800bc26:	e068      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 800bc2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
	break;
 800bc34:	e061      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800bc3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
	break;
 800bc42:	e05a      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800bc4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
	break;
 800bc50:	e053      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800bc58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	601a      	str	r2, [r3, #0]
	break;
 800bc5e:	e04c      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 800bc66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	601a      	str	r2, [r3, #0]
	break;
 800bc6c:	e045      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 800bc74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]
	break;
 800bc7a:	e03e      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 800bc82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	601a      	str	r2, [r3, #0]
	break;
 800bc88:	e037      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800bc90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	601a      	str	r2, [r3, #0]
	break;
 800bc96:	e030      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800bc9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
	break;
 800bca4:	e029      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800bcac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
	break;
 800bcb2:	e022      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800bcba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]
	break;
 800bcc0:	e01b      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 800bcc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
	break;
 800bcce:	e014      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 800bcd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	601a      	str	r2, [r3, #0]
	break;
 800bcdc:	e00d      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 800bce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
	break;
 800bcea:	e006      	b.n	800bcfa <VL53LX_get_tuning_parm+0xdd2>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bcf2:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 800bcf4:	23fc      	movs	r3, #252	; 0xfc
 800bcf6:	77fb      	strb	r3, [r7, #31]
	break;
 800bcf8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800bcfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3724      	adds	r7, #36	; 0x24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop

0800bd0c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 800bd28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

	LOG_FUNCTION_END(status);

	return status;
 800bd54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 800bd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 800bdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce

	LOG_FUNCTION_END(status);

	return status;
 800bdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

	LOG_FUNCTION_END(status);

	return status;
 800be04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2208      	movs	r2, #8
 800be24:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	220b      	movs	r2, #11
 800be2a:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be32:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800be3a:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800be42:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800be4a:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800be4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800be64:	2300      	movs	r3, #0
 800be66:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2212      	movs	r2, #18
 800be72:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	220f      	movs	r2, #15
 800be78:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2202      	movs	r2, #2
 800be7e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800be86:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	220c      	movs	r2, #12
 800be8c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800be8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	895b      	ldrh	r3, [r3, #10]
 800beb0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	895b      	ldrh	r3, [r3, #10]
 800bece:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2200      	movs	r2, #0
 800bef2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2240      	movs	r2, #64	; 0x40
 800bef8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10d      	bne.n	800bf1e <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d108      	bne.n	800bf1e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d103      	bne.n	800bf1e <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	741a      	strb	r2, [r3, #16]
 800bf1c:	e002      	b.n	800bf24 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2201      	movs	r2, #1
 800bf22:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 800bf24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d114      	bne.n	800bf56 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d110      	bne.n	800bf56 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	7d9b      	ldrb	r3, [r3, #22]
 800bf48:	f001 ff64 	bl	800de14 <VL53LX_calc_range_ignore_threshold>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	831a      	strh	r2, [r3, #24]
 800bf54:	e002      	b.n	800bf5c <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800bf62:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2232      	movs	r2, #50	; 0x32
 800bf68:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf70:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	228c      	movs	r2, #140	; 0x8c
 800bf76:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800bf78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800bf96:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bf9e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2207      	movs	r2, #7
 800bfa4:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f643 2298 	movw	r2, #15000	; 0x3a98
 800bfac:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f242 7210 	movw	r2, #10000	; 0x2710
 800bfb4:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f64f 72ba 	movw	r2, #65466	; 0xffba
 800bfbc:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2246      	movs	r2, #70	; 0x46
 800bfc2:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfca:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	228c      	movs	r2, #140	; 0x8c
 800bfd0:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800bfd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800bff4:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f643 2298 	movw	r2, #15000	; 0x3a98
 800bffc:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c004:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c00c:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2208      	movs	r2, #8
 800c012:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2228      	movs	r2, #40	; 0x28
 800c018:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2209      	movs	r2, #9
 800c01e:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c042:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c04a:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c052:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c05a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2210      	movs	r2, #16
 800c060:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2208      	movs	r2, #8
 800c066:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	6039      	str	r1, [r7, #0]
 800c082:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2204      	movs	r2, #4
 800c08c:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2201      	movs	r2, #1
 800c092:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2201      	movs	r2, #1
 800c098:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2202      	movs	r2, #2
 800c09e:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2250      	movs	r2, #80	; 0x50
 800c0aa:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2264      	movs	r2, #100	; 0x64
 800c0b0:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	f241 023d 	movw	r2, #4157	; 0x103d
 800c0b8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2232      	movs	r2, #50	; 0x32
 800c0c4:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2264      	movs	r2, #100	; 0x64
 800c0ca:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	22b4      	movs	r2, #180	; 0xb4
 800c0d6:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800c0e4:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2208      	movs	r2, #8
 800c0ea:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2288      	movs	r2, #136	; 0x88
 800c0f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c10c:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2200      	movs	r2, #0
 800c112:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	79fa      	ldrb	r2, [r7, #7]
 800c118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800c122:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2232      	movs	r2, #50	; 0x32
 800c128:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c130:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	228c      	movs	r2, #140	; 0x8c
 800c136:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2250      	movs	r2, #80	; 0x50
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2232      	movs	r2, #50	; 0x32
 800c144:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800c146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 800c156:	b480      	push	{r7}
 800c158:	b085      	sub	sp, #20
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	221e      	movs	r2, #30
 800c166:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	220e      	movs	r2, #14
 800c16c:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f642 7294 	movw	r2, #12180	; 0x2f94
 800c174:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	220e      	movs	r2, #14
 800c17a:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	220a      	movs	r2, #10
 800c180:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2206      	movs	r2, #6
 800c186:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	220e      	movs	r2, #14
 800c18c:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	220a      	movs	r2, #10
 800c192:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2206      	movs	r2, #6
 800c198:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2209      	movs	r2, #9
 800c19e:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2205      	movs	r2, #5
 800c1a4:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2206      	movs	r2, #6
 800c1b0:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2206      	movs	r2, #6
 800c1b6:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2206      	movs	r2, #6
 800c1bc:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2221      	movs	r2, #33	; 0x21
 800c1c8:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	223c      	movs	r2, #60	; 0x3c
 800c1da:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	223c      	movs	r2, #60	; 0x3c
 800c1e0:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	223c      	movs	r2, #60	; 0x3c
 800c1e6:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2280      	movs	r2, #128	; 0x80
 800c1ec:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2280      	movs	r2, #128	; 0x80
 800c1f2:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2280      	movs	r2, #128	; 0x80
 800c1f8:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2210      	movs	r2, #16
 800c206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2202      	movs	r2, #2
 800c226:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c240:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f640 22be 	movw	r2, #2750	; 0xabe
 800c24a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	22fa      	movs	r2, #250	; 0xfa
 800c252:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c25c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800c266:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800c270:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800c27a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800c284:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f64f 7238 	movw	r2, #65336	; 0xff38
 800c28e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	22c8      	movs	r2, #200	; 0xc8
 800c296:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c2a0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800c2b2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f640 32ea 	movw	r2, #3050	; 0xbea
 800c2bc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800c2c6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f640 32ea 	movw	r2, #3050	; 0xbea
 800c2d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800c2da:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f641 0238 	movw	r2, #6200	; 0x1838
 800c2e4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	22fa      	movs	r2, #250	; 0xfa
 800c2fc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800c306:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800c310:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f241 1294 	movw	r2, #4500	; 0x1194
 800c31a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f64f 7238 	movw	r2, #65336	; 0xff38
 800c324:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	22c8      	movs	r2, #200	; 0xc8
 800c32c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f640 720a 	movw	r2, #3850	; 0xf0a
 800c356:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800c360:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f640 720a 	movw	r2, #3850	; 0xf0a
 800c36a:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c3ac:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c3b4:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c3bc:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c3c4:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3cc:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c3d4:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f242 3228 	movw	r2, #9000	; 0x2328
 800c3dc:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f241 7270 	movw	r2, #6000	; 0x1770
 800c3e4:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c3ec:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f242 3228 	movw	r2, #9000	; 0x2328
 800c3f4:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f241 7270 	movw	r2, #6000	; 0x1770
 800c3fc:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c404:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c40c:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c414:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c41c:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c424:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f24f 6218 	movw	r2, #63000	; 0xf618
 800c42c:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c434:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c43c:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800c444:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c452:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c45a:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800c472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2206      	movs	r2, #6
 800c47a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 800c48e:	b480      	push	{r7}
 800c490:	b085      	sub	sp, #20
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c4a0:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2238      	movs	r2, #56	; 0x38
 800c4a6:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2270      	movs	r2, #112	; 0x70
 800c4b2:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2210      	movs	r2, #16
 800c4b8:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2264      	movs	r2, #100	; 0x64
 800c4be:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c6:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	220f      	movs	r2, #15
 800c4cc:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2234      	movs	r2, #52	; 0x34
 800c4d2:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	22c8      	movs	r2, #200	; 0xc8
 800c4d8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c4e0:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4e8:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800c4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c508:	2300      	movs	r3, #0
 800c50a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800c512:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2200      	movs	r2, #0
 800c54e:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2211      	movs	r2, #17
 800c554:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2202      	movs	r2, #2
 800c55a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2202      	movs	r2, #2
 800c566:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2208      	movs	r2, #8
 800c56c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c580:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2201      	movs	r2, #1
 800c596:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	22ff      	movs	r2, #255	; 0xff
 800c5ae:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	220b      	movs	r2, #11
 800c5e8:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	220d      	movs	r2, #13
 800c5fc:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800c624:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2238      	movs	r2, #56	; 0x38
 800c630:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	22ff      	movs	r2, #255	; 0xff
 800c636:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	221a      	movs	r2, #26
 800c648:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2200      	movs	r2, #0
 800c64e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2220      	movs	r2, #32
 800c654:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2201      	movs	r2, #1
 800c65a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	22cc      	movs	r2, #204	; 0xcc
 800c660:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	220b      	movs	r2, #11
 800c666:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2201      	movs	r2, #1
 800c66c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	22f5      	movs	r2, #245	; 0xf5
 800c672:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2209      	movs	r2, #9
 800c678:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2208      	movs	r2, #8
 800c68e:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2278      	movs	r2, #120	; 0x78
 800c694:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2200      	movs	r2, #0
 800c69a:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	2207      	movs	r2, #7
 800c6a6:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2221      	movs	r2, #33	; 0x21
 800c6ac:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2243      	movs	r2, #67	; 0x43
 800c6b2:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2210      	movs	r2, #16
 800c6b8:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2232      	movs	r2, #50	; 0x32
 800c6be:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2254      	movs	r2, #84	; 0x54
 800c6c4:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	2207      	movs	r2, #7
 800c6ca:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2221      	movs	r2, #33	; 0x21
 800c6d0:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2243      	movs	r2, #67	; 0x43
 800c6d6:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2210      	movs	r2, #16
 800c6dc:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2243      	movs	r2, #67	; 0x43
 800c6e8:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2207      	movs	r2, #7
 800c6fa:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2221      	movs	r2, #33	; 0x21
 800c700:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2243      	movs	r2, #67	; 0x43
 800c706:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2210      	movs	r2, #16
 800c70c:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2232      	movs	r2, #50	; 0x32
 800c712:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2254      	movs	r2, #84	; 0x54
 800c718:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c720:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c728:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2200      	movs	r2, #0
 800c72e:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	2210      	movs	r2, #16
 800c734:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	2200      	movs	r2, #0
 800c73a:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	220f      	movs	r2, #15
 800c740:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	220f      	movs	r2, #15
 800c746:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	2208      	movs	r2, #8
 800c74c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	2208      	movs	r2, #8
 800c752:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	2201      	movs	r2, #1
 800c758:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	2200      	movs	r2, #0
 800c75e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	2200      	movs	r2, #0
 800c764:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	2200      	movs	r2, #0
 800c76a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	220b      	movs	r2, #11
 800c77a:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	2209      	movs	r2, #9
 800c780:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	2201      	movs	r2, #1
 800c796:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	22c7      	movs	r2, #199	; 0xc7
 800c7b0:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	22ff      	movs	r2, #255	; 0xff
 800c7b6:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	22db      	movs	r2, #219	; 0xdb
 800c7bc:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	2221      	movs	r2, #33	; 0x21
 800c7da:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800c7dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b090      	sub	sp, #64	; 0x40
 800c7f0:	af0a      	add	r7, sp, #40	; 0x28
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
 800c7f8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	9303      	str	r3, [sp, #12]
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	9302      	str	r3, [sp, #8]
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f7ff fe70 	bl	800c4fa <VL53LX_preset_mode_standard_ranging>
 800c81a:	4603      	mov	r3, r0
 800c81c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800c81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d171      	bne.n	800c90a <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800c82c:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	9308      	str	r3, [sp, #32]
 800c832:	2305      	movs	r3, #5
 800c834:	9307      	str	r3, [sp, #28]
 800c836:	2304      	movs	r3, #4
 800c838:	9306      	str	r3, [sp, #24]
 800c83a:	2303      	movs	r3, #3
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	2302      	movs	r3, #2
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	2301      	movs	r3, #1
 800c844:	9303      	str	r3, [sp, #12]
 800c846:	2300      	movs	r3, #0
 800c848:	9302      	str	r3, [sp, #8]
 800c84a:	2304      	movs	r3, #4
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	2303      	movs	r3, #3
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	2302      	movs	r3, #2
 800c854:	2201      	movs	r2, #1
 800c856:	2100      	movs	r1, #0
 800c858:	2007      	movs	r0, #7
 800c85a:	f000 ffa8 	bl	800d7ae <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	3302      	adds	r3, #2
 800c862:	9308      	str	r3, [sp, #32]
 800c864:	2305      	movs	r3, #5
 800c866:	9307      	str	r3, [sp, #28]
 800c868:	2304      	movs	r3, #4
 800c86a:	9306      	str	r3, [sp, #24]
 800c86c:	2303      	movs	r3, #3
 800c86e:	9305      	str	r3, [sp, #20]
 800c870:	2302      	movs	r3, #2
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	2301      	movs	r3, #1
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	2300      	movs	r3, #0
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	2304      	movs	r3, #4
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	2303      	movs	r3, #3
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	2302      	movs	r3, #2
 800c886:	2201      	movs	r2, #1
 800c888:	2100      	movs	r1, #0
 800c88a:	2007      	movs	r0, #7
 800c88c:	f001 f81f 	bl	800d8ce <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800c890:	6a3b      	ldr	r3, [r7, #32]
 800c892:	2209      	movs	r2, #9
 800c894:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	220b      	movs	r2, #11
 800c89a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	2209      	movs	r2, #9
 800c8a0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	220b      	movs	r2, #11
 800c8a6:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	2220      	movs	r2, #32
 800c8b2:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	221a      	movs	r2, #26
 800c8be:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	2228      	movs	r2, #40	; 0x28
 800c8ca:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	2221      	movs	r2, #33	; 0x21
 800c8d6:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	22f5      	movs	r2, #245	; 0xf5
 800c8dc:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2208      	movs	r2, #8
 800c8e2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2288      	movs	r2, #136	; 0x88
 800c8ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9e6 	bl	800ccca <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	229b      	movs	r2, #155	; 0x9b
 800c902:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	2226      	movs	r2, #38	; 0x26
 800c908:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c90a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b090      	sub	sp, #64	; 0x40
 800c91a:	af0a      	add	r7, sp, #40	; 0x28
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	60b9      	str	r1, [r7, #8]
 800c920:	607a      	str	r2, [r7, #4]
 800c922:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800c924:	2300      	movs	r3, #0
 800c926:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	68b9      	ldr	r1, [r7, #8]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff ff52 	bl	800c7ec <VL53LX_preset_mode_histogram_ranging>
 800c948:	4603      	mov	r3, r0
 800c94a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800c94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d178      	bne.n	800ca46 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	9308      	str	r3, [sp, #32]
 800c958:	2305      	movs	r3, #5
 800c95a:	9307      	str	r3, [sp, #28]
 800c95c:	2304      	movs	r3, #4
 800c95e:	9306      	str	r3, [sp, #24]
 800c960:	2303      	movs	r3, #3
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	2302      	movs	r3, #2
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	2301      	movs	r3, #1
 800c96a:	9303      	str	r3, [sp, #12]
 800c96c:	2300      	movs	r3, #0
 800c96e:	9302      	str	r3, [sp, #8]
 800c970:	2304      	movs	r3, #4
 800c972:	9301      	str	r3, [sp, #4]
 800c974:	2303      	movs	r3, #3
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	2302      	movs	r3, #2
 800c97a:	2201      	movs	r2, #1
 800c97c:	2100      	movs	r1, #0
 800c97e:	2007      	movs	r0, #7
 800c980:	f000 ff15 	bl	800d7ae <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	3302      	adds	r3, #2
 800c988:	9308      	str	r3, [sp, #32]
 800c98a:	2305      	movs	r3, #5
 800c98c:	9307      	str	r3, [sp, #28]
 800c98e:	2304      	movs	r3, #4
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	2303      	movs	r3, #3
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	2302      	movs	r3, #2
 800c998:	9304      	str	r3, [sp, #16]
 800c99a:	2301      	movs	r3, #1
 800c99c:	9303      	str	r3, [sp, #12]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	2304      	movs	r3, #4
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	2007      	movs	r0, #7
 800c9b2:	f000 ff8c 	bl	800d8ce <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f982 	bl	800ccca <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	2209      	movs	r2, #9
 800c9ca:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	220b      	movs	r2, #11
 800c9d0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	2221      	movs	r2, #33	; 0x21
 800c9dc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	221b      	movs	r2, #27
 800c9e8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	2229      	movs	r2, #41	; 0x29
 800c9f4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	2222      	movs	r2, #34	; 0x22
 800ca00:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2209      	movs	r2, #9
 800ca06:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	22f5      	movs	r2, #245	; 0xf5
 800ca0c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	2209      	movs	r2, #9
 800ca12:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	220b      	movs	r2, #11
 800ca18:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2208      	movs	r2, #8
 800ca2e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2288      	movs	r2, #136	; 0x88
 800ca36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	229b      	movs	r2, #155	; 0x9b
 800ca3e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2226      	movs	r2, #38	; 0x26
 800ca44:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b090      	sub	sp, #64	; 0x40
 800ca56:	af0a      	add	r7, sp, #40	; 0x28
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
 800ca5e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	9303      	str	r3, [sp, #12]
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	9302      	str	r3, [sp, #8]
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	9301      	str	r3, [sp, #4]
 800ca74:	6a3b      	ldr	r3, [r7, #32]
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	68b9      	ldr	r1, [r7, #8]
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff feb4 	bl	800c7ec <VL53LX_preset_mode_histogram_ranging>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800ca88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d178      	bne.n	800cb82 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	9308      	str	r3, [sp, #32]
 800ca94:	2303      	movs	r3, #3
 800ca96:	9307      	str	r3, [sp, #28]
 800ca98:	2302      	movs	r3, #2
 800ca9a:	9306      	str	r3, [sp, #24]
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	9305      	str	r3, [sp, #20]
 800caa0:	2302      	movs	r3, #2
 800caa2:	9304      	str	r3, [sp, #16]
 800caa4:	2301      	movs	r3, #1
 800caa6:	9303      	str	r3, [sp, #12]
 800caa8:	2300      	movs	r3, #0
 800caaa:	9302      	str	r3, [sp, #8]
 800caac:	2302      	movs	r3, #2
 800caae:	9301      	str	r3, [sp, #4]
 800cab0:	2302      	movs	r3, #2
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	2301      	movs	r3, #1
 800cab6:	2201      	movs	r2, #1
 800cab8:	2100      	movs	r1, #0
 800caba:	2007      	movs	r0, #7
 800cabc:	f000 fe77 	bl	800d7ae <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	3302      	adds	r3, #2
 800cac4:	9308      	str	r3, [sp, #32]
 800cac6:	2303      	movs	r3, #3
 800cac8:	9307      	str	r3, [sp, #28]
 800caca:	2302      	movs	r3, #2
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	2301      	movs	r3, #1
 800cad0:	9305      	str	r3, [sp, #20]
 800cad2:	2302      	movs	r3, #2
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	2301      	movs	r3, #1
 800cad8:	9303      	str	r3, [sp, #12]
 800cada:	2300      	movs	r3, #0
 800cadc:	9302      	str	r3, [sp, #8]
 800cade:	2302      	movs	r3, #2
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	2302      	movs	r3, #2
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	2301      	movs	r3, #1
 800cae8:	2201      	movs	r2, #1
 800caea:	2100      	movs	r1, #0
 800caec:	2007      	movs	r0, #7
 800caee:	f000 feee 	bl	800d8ce <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f8e4 	bl	800ccca <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	2205      	movs	r2, #5
 800cb06:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	2207      	movs	r2, #7
 800cb0c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	2200      	movs	r2, #0
 800cb12:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800cb14:	6a3b      	ldr	r3, [r7, #32]
 800cb16:	2236      	movs	r2, #54	; 0x36
 800cb18:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	2228      	movs	r2, #40	; 0x28
 800cb24:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	2244      	movs	r2, #68	; 0x44
 800cb30:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	2200      	movs	r2, #0
 800cb36:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	2233      	movs	r2, #51	; 0x33
 800cb3c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2205      	movs	r2, #5
 800cb42:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	22f5      	movs	r2, #245	; 0xf5
 800cb48:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	2205      	movs	r2, #5
 800cb4e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	2207      	movs	r2, #7
 800cb54:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2208      	movs	r2, #8
 800cb6a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2248      	movs	r2, #72	; 0x48
 800cb72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	229b      	movs	r2, #155	; 0x9b
 800cb7a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2226      	movs	r2, #38	; 0x26
 800cb80:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800cb82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b090      	sub	sp, #64	; 0x40
 800cb92:	af0a      	add	r7, sp, #40	; 0x28
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	9302      	str	r3, [sp, #8]
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7ff fe16 	bl	800c7ec <VL53LX_preset_mode_histogram_ranging>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800cbc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d178      	bne.n	800ccbe <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	9308      	str	r3, [sp, #32]
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	9307      	str	r3, [sp, #28]
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	9306      	str	r3, [sp, #24]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	2301      	movs	r3, #1
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	9303      	str	r3, [sp, #12]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9302      	str	r3, [sp, #8]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	2301      	movs	r3, #1
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2107      	movs	r1, #7
 800cbf6:	2007      	movs	r0, #7
 800cbf8:	f000 fdd9 	bl	800d7ae <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	3302      	adds	r3, #2
 800cc00:	9308      	str	r3, [sp, #32]
 800cc02:	2302      	movs	r3, #2
 800cc04:	9307      	str	r3, [sp, #28]
 800cc06:	2302      	movs	r3, #2
 800cc08:	9306      	str	r3, [sp, #24]
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	2301      	movs	r3, #1
 800cc10:	9304      	str	r3, [sp, #16]
 800cc12:	2301      	movs	r3, #1
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	2300      	movs	r3, #0
 800cc18:	9302      	str	r3, [sp, #8]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	2301      	movs	r3, #1
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	2301      	movs	r3, #1
 800cc24:	2200      	movs	r2, #0
 800cc26:	2107      	movs	r1, #7
 800cc28:	2007      	movs	r0, #7
 800cc2a:	f000 fe50 	bl	800d8ce <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f846 	bl	800ccca <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	2203      	movs	r2, #3
 800cc42:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	2205      	movs	r2, #5
 800cc48:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	2252      	movs	r2, #82	; 0x52
 800cc54:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	2237      	movs	r2, #55	; 0x37
 800cc60:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	2200      	movs	r2, #0
 800cc66:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	2266      	movs	r2, #102	; 0x66
 800cc6c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	2200      	movs	r2, #0
 800cc72:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	2244      	movs	r2, #68	; 0x44
 800cc78:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2203      	movs	r2, #3
 800cc7e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	22f5      	movs	r2, #245	; 0xf5
 800cc84:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	2203      	movs	r2, #3
 800cc8a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	2205      	movs	r2, #5
 800cc90:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2208      	movs	r2, #8
 800cca6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2228      	movs	r2, #40	; 0x28
 800ccae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	22bb      	movs	r2, #187	; 0xbb
 800ccb6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800ccb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccba:	2226      	movs	r2, #38	; 0x26
 800ccbc:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ccbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	79db      	ldrb	r3, [r3, #7]
 800cd0c:	b29b      	uxth	r3, r3
				<< 8)
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	7a1b      	ldrb	r3, [r3, #8]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	4413      	add	r3, r2
 800cd1a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	b29b      	uxth	r3, r3
				<< 8)
 800cd56:	021b      	lsls	r3, r3, #8
 800cd58:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	789b      	ldrb	r3, [r3, #2]
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	4413      	add	r3, r2
 800cd62:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	78db      	ldrb	r3, [r3, #3]
 800cd6c:	b29b      	uxth	r3, r3
				<< 8)
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	791b      	ldrb	r3, [r3, #4]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	4413      	add	r3, r2
 800cd7a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800cda8:	bf00      	nop
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	79db      	ldrb	r3, [r3, #7]
 800cdf4:	b29b      	uxth	r3, r3
				<< 8)
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	7a1b      	ldrb	r3, [r3, #8]
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	4413      	add	r3, r2
 800ce02:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	b29b      	uxth	r3, r3
				<< 8)
 800ce36:	021b      	lsls	r3, r3, #8
 800ce38:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	789b      	ldrb	r3, [r3, #2]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	4413      	add	r3, r2
 800ce42:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	78db      	ldrb	r3, [r3, #3]
 800ce4c:	b29b      	uxth	r3, r3
				<< 8)
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	791b      	ldrb	r3, [r3, #4]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	4413      	add	r3, r2
 800ce5a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cea6:	bf00      	nop
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	460b      	mov	r3, r1
 800cebc:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	332c      	adds	r3, #44	; 0x2c
 800cec6:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2200      	movs	r2, #0
 800ced2:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2202      	movs	r2, #2
 800ced8:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2200      	movs	r2, #0
 800cede:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2200      	movs	r2, #0
 800cee4:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2202      	movs	r2, #2
 800cef6:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2200      	movs	r2, #0
 800cefc:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2200      	movs	r2, #0
 800cf02:	735a      	strb	r2, [r3, #13]

}
 800cf04:	bf00      	nop
 800cf06:	3714      	adds	r7, #20
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	332c      	adds	r3, #44	; 0x2c
 800cf24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800cf2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d115      	bne.n	800cf60 <VL53LX_update_ll_driver_rd_state+0x50>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2203      	movs	r2, #3
 800cf38:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	735a      	strb	r2, [r3, #13]
 800cf5e:	e0bd      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	7a1b      	ldrb	r3, [r3, #8]
 800cf64:	2bff      	cmp	r3, #255	; 0xff
 800cf66:	d103      	bne.n	800cf70 <VL53LX_update_ll_driver_rd_state+0x60>
			pstate->rd_stream_count = 0x80;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2280      	movs	r2, #128	; 0x80
 800cf6c:	721a      	strb	r2, [r3, #8]
 800cf6e:	e005      	b.n	800cf7c <VL53LX_update_ll_driver_rd_state+0x6c>
		else
			pstate->rd_stream_count++;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	7a1b      	ldrb	r3, [r3, #8]
 800cf74:	3301      	adds	r3, #1
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	7a19      	ldrb	r1, [r3, #8]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f103 0209 	add.w	r2, r3, #9
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	330a      	adds	r3, #10
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f002 fd81 	bl	800fa92 <VL53LX_update_internal_stream_counters>
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	7adb      	ldrb	r3, [r3, #11]
 800cf98:	f083 0302 	eor.w	r3, r3, #2
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	79db      	ldrb	r3, [r3, #7]
 800cfa6:	3b03      	subs	r3, #3
 800cfa8:	2b05      	cmp	r3, #5
 800cfaa:	f200 8081 	bhi.w	800d0b0 <VL53LX_update_ll_driver_rd_state+0x1a0>
 800cfae:	a201      	add	r2, pc, #4	; (adr r2, 800cfb4 <VL53LX_update_ll_driver_rd_state+0xa4>)
 800cfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb4:	0800cfcd 	.word	0x0800cfcd
 800cfb8:	0800d0b1 	.word	0x0800d0b1
 800cfbc:	0800d0b1 	.word	0x0800d0b1
 800cfc0:	0800d01f 	.word	0x0800d01f
 800cfc4:	0800d055 	.word	0x0800d055
 800cfc8:	0800d07f 	.word	0x0800d07f

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	f893 3396 	ldrb.w	r3, [r3, #918]	; 0x396
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	dd03      	ble.n	800cfe2 <VL53LX_update_ll_driver_rd_state+0xd2>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2206      	movs	r2, #6
 800cfde:	71da      	strb	r2, [r3, #7]
 800cfe0:	e00d      	b.n	800cffe <VL53LX_update_ll_driver_rd_state+0xee>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d303      	bcc.n	800cff8 <VL53LX_update_ll_driver_rd_state+0xe8>
					pstate->rd_device_state =
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2208      	movs	r2, #8
 800cff4:	71da      	strb	r2, [r3, #7]
 800cff6:	e002      	b.n	800cffe <VL53LX_update_ll_driver_rd_state+0xee>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2207      	movs	r2, #7
 800cffc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	735a      	strb	r2, [r3, #13]

			break;
 800d01c:	e05e      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2200      	movs	r2, #0
 800d034:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d040:	429a      	cmp	r2, r3
 800d042:	d303      	bcc.n	800d04c <VL53LX_update_ll_driver_rd_state+0x13c>
				pstate->rd_device_state =
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2208      	movs	r2, #8
 800d048:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800d04a:	e047      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2207      	movs	r2, #7
 800d050:	71da      	strb	r2, [r3, #7]
			break;
 800d052:	e043      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	7b5b      	ldrb	r3, [r3, #13]
 800d058:	3301      	adds	r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d303      	bcc.n	800d076 <VL53LX_update_ll_driver_rd_state+0x166>
				pstate->rd_device_state =
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2208      	movs	r2, #8
 800d072:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800d074:	e032      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2207      	movs	r2, #7
 800d07a:	71da      	strb	r2, [r3, #7]
			break;
 800d07c:	e02e      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	7b1b      	ldrb	r3, [r3, #12]
 800d088:	f083 0301 	eor.w	r3, r3, #1
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d303      	bcc.n	800d0a8 <VL53LX_update_ll_driver_rd_state+0x198>
				pstate->rd_device_state =
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800d0a6:	e019      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>
				pstate->rd_device_state =
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2207      	movs	r2, #7
 800d0ac:	71da      	strb	r2, [r3, #7]
			break;
 800d0ae:	e015      	b.n	800d0dc <VL53LX_update_ll_driver_rd_state+0x1cc>

		default:
			pstate->rd_device_state  =
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2203      	movs	r2, #3
 800d0b4:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	735a      	strb	r2, [r3, #13]
			break;
 800d0da:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800d0dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b08d      	sub	sp, #52	; 0x34
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800d100:	3320      	adds	r3, #32
 800d102:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	332c      	adds	r3, #44	; 0x2c
 800d108:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	f203 339e 	addw	r3, r3, #926	; 0x39e
 800d110:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 800d118:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d120:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800d140:	f003 031f 	and.w	r3, r3, #31
 800d144:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	78db      	ldrb	r3, [r3, #3]
 800d14a:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800d152:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800d156:	2b00      	cmp	r3, #0
 800d158:	bf14      	ite	ne
 800d15a:	2301      	movne	r3, #1
 800d15c:	2300      	moveq	r3, #0
 800d15e:	b2db      	uxtb	r3, r3
	histogram_mode =
 800d160:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d166:	111b      	asrs	r3, r3, #4
 800d168:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800d16a:	f003 0302 	and.w	r3, r3, #2
 800d16e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800d172:	7c7b      	ldrb	r3, [r7, #17]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d008      	beq.n	800d18a <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800d17e:	111b      	asrs	r3, r3, #4
 800d180:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800d182:	f003 0302 	and.w	r3, r3, #2
 800d186:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b00      	cmp	r3, #0
 800d196:	d04e      	beq.n	800d236 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	79db      	ldrb	r3, [r3, #7]
 800d19c:	2b06      	cmp	r3, #6
 800d19e:	d109      	bne.n	800d1b4 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800d1a0:	7c7b      	ldrb	r3, [r7, #17]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d14a      	bne.n	800d23c <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800d1a6:	7cfb      	ldrb	r3, [r7, #19]
 800d1a8:	2b12      	cmp	r3, #18
 800d1aa:	d047      	beq.n	800d23c <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800d1ac:	23ef      	movs	r3, #239	; 0xef
 800d1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d1b2:	e043      	b.n	800d23c <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	7a1b      	ldrb	r3, [r3, #8]
 800d1b8:	7cba      	ldrb	r2, [r7, #18]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d002      	beq.n	800d1c4 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 800d1be:	23ee      	movs	r3, #238	; 0xee
 800d1c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	7adb      	ldrb	r3, [r3, #11]
 800d1c8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d002      	beq.n	800d1d6 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 800d1d0:	23ed      	movs	r3, #237	; 0xed
 800d1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	7b5b      	ldrb	r3, [r3, #13]
 800d1da:	4619      	mov	r1, r3
		expected_stream_count =
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	460b      	mov	r3, r1
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	440b      	add	r3, r1
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	3302      	adds	r3, #2
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	7b5b      	ldrb	r3, [r3, #13]
 800d1f2:	4619      	mov	r1, r3
		expected_gph_id =
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	440b      	add	r3, r1
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	4413      	add	r3, r2
 800d200:	3303      	adds	r3, #3
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800d206:	7c3a      	ldrb	r2, [r7, #16]
 800d208:	7cbb      	ldrb	r3, [r7, #18]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d00a      	beq.n	800d224 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d102      	bne.n	800d21e <VL53LX_check_ll_driver_rd_state+0x136>
 800d218:	7cbb      	ldrb	r3, [r7, #18]
 800d21a:	2bff      	cmp	r3, #255	; 0xff
 800d21c:	d002      	beq.n	800d224 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 800d21e:	23ec      	movs	r3, #236	; 0xec
 800d220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800d224:	7bfa      	ldrb	r2, [r7, #15]
 800d226:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d005      	beq.n	800d23a <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800d22e:	23eb      	movs	r3, #235	; 0xeb
 800d230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d234:	e002      	b.n	800d23c <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 800d236:	bf00      	nop
 800d238:	e000      	b.n	800d23c <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 800d23a:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800d23c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d240:	4618      	mov	r0, r3
 800d242:	3734      	adds	r7, #52	; 0x34
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 800d254:	2300      	movs	r3, #0
 800d256:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800d262:	3320      	adds	r3, #32
 800d264:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	332c      	adds	r3, #44	; 0x2c
 800d26a:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d272:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 800d27a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d11b      	bne.n	800d2ba <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	2203      	movs	r2, #3
 800d286:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	2200      	movs	r2, #0
 800d28c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2200      	movs	r2, #0
 800d292:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	2200      	movs	r2, #0
 800d298:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	2202      	movs	r2, #2
 800d29e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	773b      	strb	r3, [r7, #28]
 800d2b8:	e0b1      	b.n	800d41e <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	791b      	ldrb	r3, [r3, #4]
 800d2be:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	799b      	ldrb	r3, [r3, #6]
 800d2c4:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	785b      	ldrb	r3, [r3, #1]
 800d2ca:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	785b      	ldrb	r3, [r3, #1]
 800d2d0:	2bff      	cmp	r3, #255	; 0xff
 800d2d2:	d103      	bne.n	800d2dc <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2280      	movs	r2, #128	; 0x80
 800d2d8:	705a      	strb	r2, [r3, #1]
 800d2da:	e005      	b.n	800d2e8 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	785b      	ldrb	r3, [r3, #1]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	b2da      	uxtb	r2, r3
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	7859      	ldrb	r1, [r3, #1]
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	1c9a      	adds	r2, r3, #2
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	3303      	adds	r3, #3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f002 fbcc 	bl	800fa92 <VL53LX_update_internal_stream_counters>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	791b      	ldrb	r3, [r3, #4]
 800d302:	f083 0302 	eor.w	r3, r3, #2
 800d306:	b2da      	uxtb	r2, r3
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b05      	cmp	r3, #5
 800d312:	d053      	beq.n	800d3bc <VL53LX_update_ll_driver_cfg_state+0x170>
 800d314:	2b05      	cmp	r3, #5
 800d316:	dc69      	bgt.n	800d3ec <VL53LX_update_ll_driver_cfg_state+0x1a0>
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d002      	beq.n	800d322 <VL53LX_update_ll_driver_cfg_state+0xd6>
 800d31c:	2b04      	cmp	r3, #4
 800d31e:	d02d      	beq.n	800d37c <VL53LX_update_ll_driver_cfg_state+0x130>
 800d320:	e064      	b.n	800d3ec <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	2201      	movs	r2, #1
 800d326:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d332:	429a      	cmp	r2, r3
 800d334:	d909      	bls.n	800d34a <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2200      	movs	r2, #0
 800d33a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	795b      	ldrb	r3, [r3, #5]
 800d340:	f083 0301 	eor.w	r3, r3, #1
 800d344:	b2da      	uxtb	r2, r3
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	2201      	movs	r2, #1
 800d34e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2201      	movs	r2, #1
 800d35e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2200      	movs	r2, #0
 800d364:	70da      	strb	r2, [r3, #3]
 800d366:	e005      	b.n	800d374 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2200      	movs	r2, #0
 800d36c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2201      	movs	r2, #1
 800d372:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	2204      	movs	r2, #4
 800d378:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800d37a:	e050      	b.n	800d41e <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	799b      	ldrb	r3, [r3, #6]
 800d380:	3301      	adds	r3, #1
 800d382:	b2da      	uxtb	r2, r3
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d392:	429a      	cmp	r2, r3
 800d394:	d940      	bls.n	800d418 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2200      	movs	r2, #0
 800d39a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	795b      	ldrb	r3, [r3, #5]
 800d3a0:	f083 0301 	eor.w	r3, r3, #1
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d031      	beq.n	800d418 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800d3ba:	e02d      	b.n	800d418 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	799b      	ldrb	r3, [r3, #6]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d922      	bls.n	800d41c <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	795b      	ldrb	r3, [r3, #5]
 800d3e0:	f083 0301 	eor.w	r3, r3, #1
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	715a      	strb	r2, [r3, #5]
			}
			break;
 800d3ea:	e017      	b.n	800d41c <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	2203      	movs	r2, #3
 800d3f0:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2200      	movs	r2, #0
 800d402:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	2202      	movs	r2, #2
 800d408:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	2200      	movs	r2, #0
 800d40e:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2200      	movs	r2, #0
 800d414:	719a      	strb	r2, [r3, #6]
			break;
 800d416:	e002      	b.n	800d41e <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 800d418:	bf00      	nop
 800d41a:	e000      	b.n	800d41e <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 800d41c:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800d424:	2b00      	cmp	r3, #0
 800d426:	d11d      	bne.n	800d464 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800d428:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800d42a:	7f3b      	ldrb	r3, [r7, #28]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	b2d8      	uxtb	r0, r3
 800d430:	68f9      	ldr	r1, [r7, #12]
 800d432:	4613      	mov	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	440b      	add	r3, r1
 800d43c:	3302      	adds	r3, #2
 800d43e:	4602      	mov	r2, r0
 800d440:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	7b5b      	ldrb	r3, [r3, #13]
 800d446:	4619      	mov	r1, r3
 800d448:	7f7b      	ldrb	r3, [r7, #29]
 800d44a:	f083 0302 	eor.w	r3, r3, #2
 800d44e:	b2d8      	uxtb	r0, r3
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	460b      	mov	r3, r1
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	440b      	add	r3, r1
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	3303      	adds	r3, #3
 800d45e:	4602      	mov	r2, r0
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e013      	b.n	800d48c <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800d464:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800d466:	68f9      	ldr	r1, [r7, #12]
 800d468:	4613      	mov	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	440b      	add	r3, r1
 800d472:	3302      	adds	r3, #2
 800d474:	7f3a      	ldrb	r2, [r7, #28]
 800d476:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 800d478:	7fba      	ldrb	r2, [r7, #30]
 800d47a:	68f9      	ldr	r1, [r7, #12]
 800d47c:	4613      	mov	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	440b      	add	r3, r1
 800d486:	3303      	adds	r3, #3
 800d488:	7f7a      	ldrb	r2, [r7, #29]
 800d48a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800d48c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7c1a      	ldrb	r2, [r3, #16]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	7c52      	ldrb	r2, [r2, #17]
 800d4b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	3302      	adds	r3, #2
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	7c92      	ldrb	r2, [r2, #18]
 800d4bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	3303      	adds	r3, #3
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	7cd2      	ldrb	r2, [r2, #19]
 800d4c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	7d12      	ldrb	r2, [r2, #20]
 800d4d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	3305      	adds	r3, #5
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	7d52      	ldrb	r2, [r2, #21]
 800d4da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	3306      	adds	r3, #6
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	7d92      	ldrb	r2, [r2, #22]
 800d4e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	3307      	adds	r3, #7
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	7dd2      	ldrb	r2, [r2, #23]
 800d4ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	7e12      	ldrb	r2, [r2, #24]
 800d4f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	3309      	adds	r3, #9
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	7e52      	ldrb	r2, [r2, #25]
 800d502:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	330a      	adds	r3, #10
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	7e92      	ldrb	r2, [r2, #26]
 800d50c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	330b      	adds	r3, #11
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	7ed2      	ldrb	r2, [r2, #27]
 800d516:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	330c      	adds	r3, #12
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	7f12      	ldrb	r2, [r2, #28]
 800d520:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	330d      	adds	r3, #13
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	7f52      	ldrb	r2, [r2, #29]
 800d52a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	330e      	adds	r3, #14
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	7f92      	ldrb	r2, [r2, #30]
 800d534:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	330f      	adds	r3, #15
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	7fd2      	ldrb	r2, [r2, #31]
 800d53e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	3310      	adds	r3, #16
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d54a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	3311      	adds	r3, #17
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d556:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	3312      	adds	r3, #18
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800d562:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	3313      	adds	r3, #19
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800d56e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	3314      	adds	r3, #20
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d57a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	3315      	adds	r3, #21
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800d586:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	3316      	adds	r3, #22
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d592:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	3317      	adds	r3, #23
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800d59e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	3318      	adds	r3, #24
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d5aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	3319      	adds	r3, #25
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800d5b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	331a      	adds	r3, #26
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800d5c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	331b      	adds	r3, #27
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800d5ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	331c      	adds	r3, #28
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d5da:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	331d      	adds	r3, #29
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800d5e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	331e      	adds	r3, #30
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800d5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	331f      	adds	r3, #31
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800d5fe:	701a      	strb	r2, [r3, #0]
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	22ff      	movs	r2, #255	; 0xff
 800d618:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	22ff      	movs	r2, #255	; 0xff
 800d61e:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	22ff      	movs	r2, #255	; 0xff
 800d624:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	22ff      	movs	r2, #255	; 0xff
 800d62a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d632:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d63a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d642:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d64a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d652:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d65a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d662:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d66a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d672:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d67a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d682:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d68a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d692:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d69a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6a2:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6aa:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6b2:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ba:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6c2:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	22ff      	movs	r2, #255	; 0xff
 800d6c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	6039      	str	r1, [r7, #0]
 800d6e2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2210      	movs	r2, #16
 800d6ec:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	79fa      	ldrb	r2, [r7, #7]
 800d6f2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73fb      	strb	r3, [r7, #15]
 800d6f8:	e017      	b.n	800d72a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 800d6fa:	7bfa      	ldrb	r2, [r7, #15]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	011b      	lsls	r3, r3, #4
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	683a      	ldr	r2, [r7, #0]
 800d706:	4413      	add	r3, r2
 800d708:	3304      	adds	r3, #4
 800d70a:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2203      	movs	r2, #3
 800d710:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2203      	movs	r2, #3
 800d716:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2204      	movs	r2, #4
 800d71c:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2200      	movs	r2, #0
 800d722:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	3301      	adds	r3, #1
 800d728:	73fb      	strb	r3, [r7, #15]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	7bfa      	ldrb	r2, [r7, #15]
 800d730:	429a      	cmp	r2, r3
 800d732:	d3e2      	bcc.n	800d6fa <V53L1_init_zone_results_structure+0x22>
	}
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 800d742:	b480      	push	{r7}
 800d744:	b087      	sub	sp, #28
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800d750:	3320      	adds	r3, #32
 800d752:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 800d758:	2310      	movs	r3, #16
 800d75a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d762:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800d764:	2300      	movs	r3, #0
 800d766:	75fb      	strb	r3, [r7, #23]
 800d768:	e016      	b.n	800d798 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53LX_p_003[z].dss_mode =
 800d76a:	7dfa      	ldrb	r2, [r7, #23]
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	4613      	mov	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	440b      	add	r3, r1
 800d778:	3304      	adds	r3, #4
 800d77a:	2201      	movs	r2, #1
 800d77c:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 800d77e:	7dfa      	ldrb	r2, [r7, #23]
 800d780:	68b9      	ldr	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	440b      	add	r3, r1
 800d78c:	3306      	adds	r3, #6
 800d78e:	2200      	movs	r2, #0
 800d790:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800d792:	7dfb      	ldrb	r3, [r7, #23]
 800d794:	3301      	adds	r3, #1
 800d796:	75fb      	strb	r3, [r7, #23]
 800d798:	7dfa      	ldrb	r2, [r7, #23]
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d3e4      	bcc.n	800d76a <V53L1_init_zone_dss_configs+0x28>
	}
}
 800d7a0:	bf00      	nop
 800d7a2:	bf00      	nop
 800d7a4:	371c      	adds	r7, #28
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800d7ae:	b490      	push	{r4, r7}
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	4608      	mov	r0, r1
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	4623      	mov	r3, r4
 800d7be:	71fb      	strb	r3, [r7, #7]
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	71bb      	strb	r3, [r7, #6]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	717b      	strb	r3, [r7, #5]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d7cc:	79bb      	ldrb	r3, [r7, #6]
 800d7ce:	011b      	lsls	r3, r3, #4
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7da:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d7dc:	793b      	ldrb	r3, [r7, #4]
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	797b      	ldrb	r3, [r7, #5]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d7ec:	7d3b      	ldrb	r3, [r7, #20]
 800d7ee:	011b      	lsls	r3, r3, #4
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	7c3b      	ldrb	r3, [r7, #16]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fa:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800d7fc:	7f3b      	ldrb	r3, [r7, #28]
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	b2da      	uxtb	r2, r3
 800d802:	7e3b      	ldrb	r3, [r7, #24]
 800d804:	4413      	add	r3, r2
 800d806:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800d80c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	b2da      	uxtb	r2, r3
 800d814:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d818:	4413      	add	r3, r2
 800d81a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800d820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d824:	011b      	lsls	r3, r3, #4
 800d826:	b2da      	uxtb	r2, r3
 800d828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d82c:	4413      	add	r3, r2
 800d82e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d85a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d85c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	b2da      	uxtb	r2, r3
 800d864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d868:	4413      	add	r3, r2
 800d86a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d876:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87a:	2200      	movs	r2, #0
 800d87c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8b4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8bc:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]

}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bc90      	pop	{r4, r7}
 800d8cc:	4770      	bx	lr

0800d8ce <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800d8ce:	b490      	push	{r4, r7}
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	4608      	mov	r0, r1
 800d8d8:	4611      	mov	r1, r2
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4623      	mov	r3, r4
 800d8de:	71fb      	strb	r3, [r7, #7]
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	71bb      	strb	r3, [r7, #6]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	717b      	strb	r3, [r7, #5]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800d8ec:	79bb      	ldrb	r3, [r7, #6]
 800d8ee:	011b      	lsls	r3, r3, #4
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	79fb      	ldrb	r3, [r7, #7]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800d8fc:	793b      	ldrb	r3, [r7, #4]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	b2da      	uxtb	r2, r3
 800d902:	797b      	ldrb	r3, [r7, #5]
 800d904:	4413      	add	r3, r2
 800d906:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800d90c:	7d3b      	ldrb	r3, [r7, #20]
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	b2da      	uxtb	r2, r3
 800d912:	7c3b      	ldrb	r3, [r7, #16]
 800d914:	4413      	add	r3, r2
 800d916:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	789a      	ldrb	r2, [r3, #2]
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	78da      	ldrb	r2, [r3, #3]
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	789a      	ldrb	r2, [r3, #2]
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800d944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d946:	78da      	ldrb	r2, [r3, #3]
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	791a      	ldrb	r2, [r3, #4]
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d95a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800d95c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d960:	011b      	lsls	r3, r3, #4
 800d962:	b2da      	uxtb	r2, r3
 800d964:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d968:	4413      	add	r3, r2
 800d96a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d976:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	2200      	movs	r2, #0
 800d97c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800d97e:	7f3b      	ldrb	r3, [r7, #28]
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	b2da      	uxtb	r2, r3
 800d984:	7e3b      	ldrb	r3, [r7, #24]
 800d986:	4413      	add	r3, r2
 800d988:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800d98e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d992:	011b      	lsls	r3, r3, #4
 800d994:	b2da      	uxtb	r2, r3
 800d996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d99a:	4413      	add	r3, r2
 800d99c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800d9a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d9a6:	011b      	lsls	r3, r3, #4
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9ae:	4413      	add	r3, r2
 800d9b0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	7bda      	ldrb	r2, [r3, #15]
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	7c1a      	ldrb	r2, [r3, #16]
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	7c5a      	ldrb	r2, [r3, #17]
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9d4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9dc:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	701a      	strb	r2, [r3, #0]
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bc90      	pop	{r4, r7}
 800d9ec:	4770      	bx	lr

0800d9ee <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 800d9ee:	b480      	push	{r7}
 800d9f0:	b087      	sub	sp, #28
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	220c      	movs	r2, #12
 800da16:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800da18:	897b      	ldrh	r3, [r7, #10]
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800da4e:	2300      	movs	r3, #0
 800da50:	82fb      	strh	r3, [r7, #22]
 800da52:	e015      	b.n	800da80 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 800da54:	8afa      	ldrh	r2, [r7, #22]
 800da56:	897b      	ldrh	r3, [r7, #10]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d207      	bcs.n	800da6c <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800da5c:	8afb      	ldrh	r3, [r7, #22]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	3302      	adds	r3, #2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	605a      	str	r2, [r3, #4]
 800da6a:	e006      	b.n	800da7a <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800da6c:	8afb      	ldrh	r3, [r7, #22]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	3302      	adds	r3, #2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	2200      	movs	r2, #0
 800da78:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800da7a:	8afb      	ldrh	r3, [r7, #22]
 800da7c:	3301      	adds	r3, #1
 800da7e:	82fb      	strh	r3, [r7, #22]
 800da80:	8afb      	ldrh	r3, [r7, #22]
 800da82:	2b0b      	cmp	r3, #11
 800da84:	d9e6      	bls.n	800da54 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 800da86:	bf00      	nop
 800da88:	bf00      	nop
 800da8a:	371c      	adds	r7, #28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	603a      	str	r2, [r7, #0]
 800da9e:	80fb      	strh	r3, [r7, #6]
 800daa0:	460b      	mov	r3, r1
 800daa2:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800daac:	88fb      	ldrh	r3, [r7, #6]
 800daae:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800dab0:	2300      	movs	r3, #0
 800dab2:	81fb      	strh	r3, [r7, #14]
 800dab4:	e00e      	b.n	800dad4 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800dab6:	88ba      	ldrh	r2, [r7, #4]
 800dab8:	89fb      	ldrh	r3, [r7, #14]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	3b01      	subs	r3, #1
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	4413      	add	r3, r2
 800dac2:	89ba      	ldrh	r2, [r7, #12]
 800dac4:	b2d2      	uxtb	r2, r2
 800dac6:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800dac8:	89bb      	ldrh	r3, [r7, #12]
 800daca:	0a1b      	lsrs	r3, r3, #8
 800dacc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800dace:	89fb      	ldrh	r3, [r7, #14]
 800dad0:	3301      	adds	r3, #1
 800dad2:	81fb      	strh	r3, [r7, #14]
 800dad4:	89fa      	ldrh	r2, [r7, #14]
 800dad6:	88bb      	ldrh	r3, [r7, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d3ec      	bcc.n	800dab6 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800dadc:	bf00      	nop
 800dade:	bf00      	nop
 800dae0:	3714      	adds	r7, #20
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800daea:	b480      	push	{r7}
 800daec:	b085      	sub	sp, #20
 800daee:	af00      	add	r7, sp, #0
 800daf0:	4603      	mov	r3, r0
 800daf2:	6039      	str	r1, [r7, #0]
 800daf4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800daf6:	2300      	movs	r3, #0
 800daf8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800dafa:	e00a      	b.n	800db12 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800dafc:	89fb      	ldrh	r3, [r7, #14]
 800dafe:	021b      	lsls	r3, r3, #8
 800db00:	b21a      	sxth	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	1c59      	adds	r1, r3, #1
 800db06:	6039      	str	r1, [r7, #0]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	4313      	orrs	r3, r2
 800db0e:	b21b      	sxth	r3, r3
 800db10:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800db12:	88fb      	ldrh	r3, [r7, #6]
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	80fa      	strh	r2, [r7, #6]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1ef      	bne.n	800dafc <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 800db1c:	89fb      	ldrh	r3, [r7, #14]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b085      	sub	sp, #20
 800db2e:	af00      	add	r7, sp, #0
 800db30:	4603      	mov	r3, r0
 800db32:	603a      	str	r2, [r7, #0]
 800db34:	80fb      	strh	r3, [r7, #6]
 800db36:	460b      	mov	r3, r1
 800db38:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800db42:	88fb      	ldrh	r3, [r7, #6]
 800db44:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800db46:	2300      	movs	r3, #0
 800db48:	81fb      	strh	r3, [r7, #14]
 800db4a:	e00f      	b.n	800db6c <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800db4c:	88ba      	ldrh	r2, [r7, #4]
 800db4e:	89fb      	ldrh	r3, [r7, #14]
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	3b01      	subs	r3, #1
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	4413      	add	r3, r2
 800db58:	89ba      	ldrh	r2, [r7, #12]
 800db5a:	b2d2      	uxtb	r2, r2
 800db5c:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800db5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db62:	121b      	asrs	r3, r3, #8
 800db64:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800db66:	89fb      	ldrh	r3, [r7, #14]
 800db68:	3301      	adds	r3, #1
 800db6a:	81fb      	strh	r3, [r7, #14]
 800db6c:	89fa      	ldrh	r2, [r7, #14]
 800db6e:	88bb      	ldrh	r3, [r7, #4]
 800db70:	429a      	cmp	r2, r3
 800db72:	d3eb      	bcc.n	800db4c <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800db82:	b480      	push	{r7}
 800db84:	b085      	sub	sp, #20
 800db86:	af00      	add	r7, sp, #0
 800db88:	4603      	mov	r3, r0
 800db8a:	6039      	str	r1, [r7, #0]
 800db8c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800db8e:	2300      	movs	r3, #0
 800db90:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	b25b      	sxtb	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	da0e      	bge.n	800dbba <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800db9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dba0:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800dba2:	e00a      	b.n	800dbba <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800dba4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dba8:	021b      	lsls	r3, r3, #8
 800dbaa:	b21a      	sxth	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	1c59      	adds	r1, r3, #1
 800dbb0:	6039      	str	r1, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	b21b      	sxth	r3, r3
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800dbba:	88fb      	ldrh	r3, [r7, #6]
 800dbbc:	1e5a      	subs	r2, r3, #1
 800dbbe:	80fa      	strh	r2, [r7, #6]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1ef      	bne.n	800dba4 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 800dbc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	460b      	mov	r3, r1
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800dbee:	2300      	movs	r3, #0
 800dbf0:	82fb      	strh	r3, [r7, #22]
 800dbf2:	e00e      	b.n	800dc12 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800dbf4:	897a      	ldrh	r2, [r7, #10]
 800dbf6:	8afb      	ldrh	r3, [r7, #22]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	4413      	add	r3, r2
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	b2d2      	uxtb	r2, r2
 800dc04:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	0a1b      	lsrs	r3, r3, #8
 800dc0a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800dc0c:	8afb      	ldrh	r3, [r7, #22]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	82fb      	strh	r3, [r7, #22]
 800dc12:	8afa      	ldrh	r2, [r7, #22]
 800dc14:	897b      	ldrh	r3, [r7, #10]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d3ec      	bcc.n	800dbf4 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 800dc1a:	bf00      	nop
 800dc1c:	bf00      	nop
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	6039      	str	r1, [r7, #0]
 800dc32:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dc38:	e007      	b.n	800dc4a <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	021a      	lsls	r2, r3, #8
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	1c59      	adds	r1, r3, #1
 800dc42:	6039      	str	r1, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dc4a:	88fb      	ldrh	r3, [r7, #6]
 800dc4c:	1e5a      	subs	r2, r3, #1
 800dc4e:	80fa      	strh	r2, [r7, #6]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1f2      	bne.n	800dc3a <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800dc54:	68fb      	ldr	r3, [r7, #12]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b085      	sub	sp, #20
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	4603      	mov	r3, r0
 800dc6a:	6039      	str	r1, [r7, #0]
 800dc6c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b25b      	sxtb	r3, r3
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	da0b      	bge.n	800dc94 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800dc82:	e007      	b.n	800dc94 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	021a      	lsls	r2, r3, #8
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	1c59      	adds	r1, r3, #1
 800dc8c:	6039      	str	r1, [r7, #0]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	1e5a      	subs	r2, r3, #1
 800dc98:	80fa      	strh	r2, [r7, #6]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1f2      	bne.n	800dc84 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	78fa      	ldrb	r2, [r7, #3]
 800dcc4:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a

	status = VL53LX_WrByte(
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f893 339a 	ldrb.w	r3, [r3, #922]	; 0x39a
 800dcce:	461a      	mov	r2, r3
 800dcd0:	2185      	movs	r1, #133	; 0x85
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f009 f8d0 	bl	8016e78 <VL53LX_WrByte>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800dcdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 800dcf4:	2101      	movs	r1, #1
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff ffd8 	bl	800dcac <VL53LX_set_firmware_enable_register>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800dd18:	2100      	movs	r1, #0
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7ff ffc6 	bl	800dcac <VL53LX_set_firmware_enable_register>
 800dd20:	4603      	mov	r3, r0
 800dd22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dd24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	78fa      	ldrb	r2, [r7, #3]
 800dd48:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	status = VL53LX_WrByte(
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800dd52:	461a      	mov	r2, r3
 800dd54:	2183      	movs	r1, #131	; 0x83
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f009 f88e 	bl	8016e78 <VL53LX_WrByte>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800dd60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800dd78:	2101      	movs	r1, #1
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ffd8 	bl	800dd30 <VL53LX_set_powerforce_register>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dd84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff ffc6 	bl	800dd30 <VL53LX_set_powerforce_register>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800dda8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	460a      	mov	r2, r1
 800ddbe:	80fb      	strh	r3, [r7, #6]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ddd0:	88fb      	ldrh	r3, [r7, #6]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f002 ff1f 	bl	8010c16 <VL53LX_calc_pll_period_us>
 800ddd8:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 800ddda:	797b      	ldrb	r3, [r7, #5]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f003 fb0b 	bl	80113f8 <VL53LX_decode_vcsel_period>
 800dde2:	4603      	mov	r3, r0
 800dde4:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	4613      	mov	r3, r2
 800ddea:	00db      	lsls	r3, r3, #3
 800ddec:	4413      	add	r3, r2
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	099b      	lsrs	r3, r3, #6
 800ddf6:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 800ddf8:	7cfa      	ldrb	r2, [r7, #19]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	fb02 f303 	mul.w	r3, r2, r3
 800de00:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	099b      	lsrs	r3, r3, #6
 800de06:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800de08:	68fb      	ldr	r3, [r7, #12]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
	...

0800de14 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800de14:	b480      	push	{r7}
 800de16:	b089      	sub	sp, #36	; 0x24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	4608      	mov	r0, r1
 800de1e:	4611      	mov	r1, r2
 800de20:	461a      	mov	r2, r3
 800de22:	4603      	mov	r3, r0
 800de24:	817b      	strh	r3, [r7, #10]
 800de26:	460b      	mov	r3, r1
 800de28:	813b      	strh	r3, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800de3e:	2300      	movs	r3, #0
 800de40:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	011b      	lsls	r3, r3, #4
 800de46:	4a23      	ldr	r2, [pc, #140]	; (800ded4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800de48:	fb82 1203 	smull	r1, r2, r2, r3
 800de4c:	1192      	asrs	r2, r2, #6
 800de4e:	17db      	asrs	r3, r3, #31
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800de54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	da03      	bge.n	800de64 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800de5c:	897b      	ldrh	r3, [r7, #10]
 800de5e:	425b      	negs	r3, r3
 800de60:	b29b      	uxth	r3, r3
 800de62:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800de64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	da03      	bge.n	800de74 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800de6c:	893b      	ldrh	r3, [r7, #8]
 800de6e:	425b      	negs	r3, r3
 800de70:	b29b      	uxth	r3, r3
 800de72:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800de74:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800de78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800de7c:	4413      	add	r3, r2
 800de7e:	015b      	lsls	r3, r3, #5
 800de80:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	4a13      	ldr	r2, [pc, #76]	; (800ded4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800de86:	fb82 1203 	smull	r1, r2, r2, r3
 800de8a:	1192      	asrs	r2, r2, #6
 800de8c:	17db      	asrs	r3, r3, #31
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	4413      	add	r3, r2
 800de98:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800de9a:	79fa      	ldrb	r2, [r7, #7]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	fb02 f303 	mul.w	r3, r2, r3
 800dea2:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	3310      	adds	r3, #16
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	da00      	bge.n	800deae <VL53LX_calc_range_ignore_threshold+0x9a>
 800deac:	331f      	adds	r3, #31
 800deae:	115b      	asrs	r3, r3, #5
 800deb0:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800deb8:	db03      	blt.n	800dec2 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800deba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800debe:	83fb      	strh	r3, [r7, #30]
 800dec0:	e001      	b.n	800dec6 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800dec6:	8bfb      	ldrh	r3, [r7, #30]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3724      	adds	r7, #36	; 0x24
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	10624dd3 	.word	0x10624dd3

0800ded8 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800dee2:	2300      	movs	r3, #0
 800dee4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	60fb      	str	r3, [r7, #12]
 800def0:	e008      	b.n	800df04 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	031a      	lsls	r2, r3, #12
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	085b      	lsrs	r3, r3, #1
 800defa:	441a      	add	r2, r3
		timeout_mclks   =
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	fbb2 f3f3 	udiv	r3, r2, r3
 800df02:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800df04:	68fb      	ldr	r3, [r7, #12]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 800df24:	6839      	ldr	r1, [r7, #0]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff ffd6 	bl	800ded8 <VL53LX_calc_timeout_mclks>
 800df2c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f887 	bl	800e042 <VL53LX_encode_timeout>
 800df34:	4603      	mov	r3, r0
 800df36:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800df38:	897b      	ldrh	r3, [r7, #10]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800df42:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800df46:	b087      	sub	sp, #28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800df4e:	2100      	movs	r1, #0
 800df50:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	f04f 0100 	mov.w	r1, #0
 800df5a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800df5e:	6879      	ldr	r1, [r7, #4]
 800df60:	2000      	movs	r0, #0
 800df62:	4688      	mov	r8, r1
 800df64:	4681      	mov	r9, r0
 800df66:	6839      	ldr	r1, [r7, #0]
 800df68:	2000      	movs	r0, #0
 800df6a:	460c      	mov	r4, r1
 800df6c:	4605      	mov	r5, r0
 800df6e:	fb04 f009 	mul.w	r0, r4, r9
 800df72:	fb08 f105 	mul.w	r1, r8, r5
 800df76:	4401      	add	r1, r0
 800df78:	fba8 2304 	umull	r2, r3, r8, r4
 800df7c:	4419      	add	r1, r3
 800df7e:	460b      	mov	r3, r1
 800df80:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800df84:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800df88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df8c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800df90:	f143 0b00 	adc.w	fp, r3, #0
 800df94:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800df98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df9c:	f04f 0200 	mov.w	r2, #0
 800dfa0:	f04f 0300 	mov.w	r3, #0
 800dfa4:	0b02      	lsrs	r2, r0, #12
 800dfa6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800dfaa:	0b0b      	lsrs	r3, r1, #12
 800dfac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800dfb4:	697b      	ldr	r3, [r7, #20]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	371c      	adds	r7, #28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dfc0:	4770      	bx	lr
	...

0800dfc4 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800dfd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800dfdc:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800dfde:	4413      	add	r3, r2
 800dfe0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	da02      	bge.n	800dfee <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e005      	b.n	800dffa <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dff4:	db01      	blt.n	800dffa <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800dff6:	4b05      	ldr	r3, [pc, #20]	; (800e00c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 800dff8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800dffe:	68bb      	ldr	r3, [r7, #8]

}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	0003ffff 	.word	0x0003ffff

0800e010 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	6039      	str	r1, [r7, #0]
 800e01a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800e020:	2300      	movs	r3, #0
 800e022:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 800e024:	88fb      	ldrh	r3, [r7, #6]
 800e026:	4618      	mov	r0, r3
 800e028:	f000 f837 	bl	800e09a <VL53LX_decode_timeout>
 800e02c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff ff86 	bl	800df42 <VL53LX_calc_timeout_us>
 800e036:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800e038:	68bb      	ldr	r3, [r7, #8]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 800e042:	b480      	push	{r7}
 800e044:	b087      	sub	sp, #28
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d017      	beq.n	800e08c <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3b01      	subs	r3, #1
 800e060:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e062:	e005      	b.n	800e070 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	085b      	lsrs	r3, r3, #1
 800e068:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e06a:	89fb      	ldrh	r3, [r7, #14]
 800e06c:	3301      	adds	r3, #1
 800e06e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1f4      	bne.n	800e064 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e07a:	89fb      	ldrh	r3, [r7, #14]
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	b29b      	uxth	r3, r3
 800e084:	b2db      	uxtb	r3, r3
 800e086:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e088:	4413      	add	r3, r2
 800e08a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e08c:	8afb      	ldrh	r3, [r7, #22]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	371c      	adds	r7, #28
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b085      	sub	sp, #20
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e0a8:	88fb      	ldrh	r3, [r7, #6]
 800e0aa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e0ac:	88fa      	ldrh	r2, [r7, #6]
 800e0ae:	0a12      	lsrs	r2, r2, #8
 800e0b0:	b292      	uxth	r2, r2
 800e0b2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b088      	sub	sp, #32
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	60f8      	str	r0, [r7, #12]
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
 800e0d2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800e0e4:	887b      	ldrh	r3, [r7, #2]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d102      	bne.n	800e0f0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e0ea:	23f1      	movs	r3, #241	; 0xf1
 800e0ec:	77fb      	strb	r3, [r7, #31]
 800e0ee:	e05d      	b.n	800e1ac <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	799a      	ldrb	r2, [r3, #6]
 800e0f4:	887b      	ldrh	r3, [r7, #2]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff fe5b 	bl	800ddb4 <VL53LX_calc_macro_period_us>
 800e0fe:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 800e100:	6979      	ldr	r1, [r7, #20]
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f7ff fee8 	bl	800ded8 <VL53LX_calc_timeout_mclks>
 800e108:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	2bff      	cmp	r3, #255	; 0xff
 800e10e:	d901      	bls.n	800e114 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800e110:	23ff      	movs	r3, #255	; 0xff
 800e112:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800e11c:	6979      	ldr	r1, [r7, #20]
 800e11e:	68b8      	ldr	r0, [r7, #8]
 800e120:	f7ff fef7 	bl	800df12 <VL53LX_calc_encoded_timeout>
 800e124:	4603      	mov	r3, r0
 800e126:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e128:	8a7b      	ldrh	r3, [r7, #18]
 800e12a:	0a1b      	lsrs	r3, r3, #8
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e134:	8a7b      	ldrh	r3, [r7, #18]
 800e136:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800e13c:	6979      	ldr	r1, [r7, #20]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff fee7 	bl	800df12 <VL53LX_calc_encoded_timeout>
 800e144:	4603      	mov	r3, r0
 800e146:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e148:	8a7b      	ldrh	r3, [r7, #18]
 800e14a:	0a1b      	lsrs	r3, r3, #8
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e154:	8a7b      	ldrh	r3, [r7, #18]
 800e156:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	7a5a      	ldrb	r2, [r3, #9]
 800e160:	887b      	ldrh	r3, [r7, #2]
 800e162:	4611      	mov	r1, r2
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fe25 	bl	800ddb4 <VL53LX_calc_macro_period_us>
 800e16a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800e16c:	6979      	ldr	r1, [r7, #20]
 800e16e:	68b8      	ldr	r0, [r7, #8]
 800e170:	f7ff fecf 	bl	800df12 <VL53LX_calc_encoded_timeout>
 800e174:	4603      	mov	r3, r0
 800e176:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e178:	8a7b      	ldrh	r3, [r7, #18]
 800e17a:	0a1b      	lsrs	r3, r3, #8
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e184:	8a7b      	ldrh	r3, [r7, #18]
 800e186:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800e18c:	6979      	ldr	r1, [r7, #20]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff febf 	bl	800df12 <VL53LX_calc_encoded_timeout>
 800e194:	4603      	mov	r3, r0
 800e196:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800e198:	8a7b      	ldrh	r3, [r7, #18]
 800e19a:	0a1b      	lsrs	r3, r3, #8
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800e1a4:	8a7b      	ldrh	r3, [r7, #18]
 800e1a6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800e1ac:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3720      	adds	r7, #32
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e1b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1bc:	b09e      	sub	sp, #120	; 0x78
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6578      	str	r0, [r7, #84]	; 0x54
 800e1c2:	6539      	str	r1, [r7, #80]	; 0x50


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800e1ca:	f04f 0200 	mov.w	r2, #0
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800e1d6:	f04f 0200 	mov.w	r2, #0
 800e1da:	f04f 0300 	mov.w	r3, #0
 800e1de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800e1e2:	f04f 0200 	mov.w	r2, #0
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800e1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f0:	885b      	ldrh	r3, [r3, #2]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d103      	bne.n	800e1fe <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e1f6:	23f1      	movs	r3, #241	; 0xf1
 800e1f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e1fc:	e0d6      	b.n	800e3ac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800e1fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b00      	cmp	r3, #0
 800e204:	f000 80d2 	beq.w	800e3ac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800e208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e20a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f040 80cd 	bne.w	800e3ac <VL53LX_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800e212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e218:	2200      	movs	r2, #0
 800e21a:	643b      	str	r3, [r7, #64]	; 0x40
 800e21c:	647a      	str	r2, [r7, #68]	; 0x44
 800e21e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e222:	460b      	mov	r3, r1
 800e224:	3301      	adds	r3, #1
 800e226:	623b      	str	r3, [r7, #32]
 800e228:	4613      	mov	r3, r2
 800e22a:	f143 0300 	adc.w	r3, r3, #0
 800e22e:	627b      	str	r3, [r7, #36]	; 0x24
 800e230:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e234:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800e238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e23a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e23e:	b29b      	uxth	r3, r3
 800e240:	2200      	movs	r2, #0
 800e242:	64bb      	str	r3, [r7, #72]	; 0x48
 800e244:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800e246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e248:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e24c:	4602      	mov	r2, r0
 800e24e:	fb02 f203 	mul.w	r2, r2, r3
 800e252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e254:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800e258:	fb01 f303 	mul.w	r3, r1, r3
 800e25c:	441a      	add	r2, r3
 800e25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e260:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e262:	fba3 4501 	umull	r4, r5, r3, r1
 800e266:	1953      	adds	r3, r2, r5
 800e268:	461d      	mov	r5, r3
 800e26a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800e26e:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800e272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	2200      	movs	r2, #0
 800e278:	63bb      	str	r3, [r7, #56]	; 0x38
 800e27a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e27c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e280:	460b      	mov	r3, r1
 800e282:	3301      	adds	r3, #1
 800e284:	61bb      	str	r3, [r7, #24]
 800e286:	4613      	mov	r3, r2
 800e288:	f143 0300 	adc.w	r3, r3, #0
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e292:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800e296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e298:	885b      	ldrh	r3, [r3, #2]
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	2200      	movs	r2, #0
 800e29e:	633b      	str	r3, [r7, #48]	; 0x30
 800e2a0:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800e2a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e2a8:	4622      	mov	r2, r4
 800e2aa:	fb02 f203 	mul.w	r2, r2, r3
 800e2ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	fb01 f303 	mul.w	r3, r1, r3
 800e2b6:	441a      	add	r2, r3
 800e2b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	fba3 ab01 	umull	sl, fp, r3, r1
 800e2c0:	eb02 030b 	add.w	r3, r2, fp
 800e2c4:	469b      	mov	fp, r3
 800e2c6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800e2ca:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800e2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	17da      	asrs	r2, r3, #31
 800e2d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2d6:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800e2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e2de:	4622      	mov	r2, r4
 800e2e0:	fb02 f203 	mul.w	r2, r2, r3
 800e2e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	fb01 f303 	mul.w	r3, r1, r3
 800e2ec:	4413      	add	r3, r2
 800e2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	fba2 8901 	umull	r8, r9, r2, r1
 800e2f6:	444b      	add	r3, r9
 800e2f8:	4699      	mov	r9, r3
 800e2fa:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800e2fe:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800e302:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e306:	0fd9      	lsrs	r1, r3, #31
 800e308:	2000      	movs	r0, #0
 800e30a:	6139      	str	r1, [r7, #16]
 800e30c:	6178      	str	r0, [r7, #20]
 800e30e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e312:	4621      	mov	r1, r4
 800e314:	1889      	adds	r1, r1, r2
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	4629      	mov	r1, r5
 800e31a:	eb43 0101 	adc.w	r1, r3, r1
 800e31e:	60f9      	str	r1, [r7, #12]
 800e320:	f04f 0200 	mov.w	r2, #0
 800e324:	f04f 0300 	mov.w	r3, #0
 800e328:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e32c:	4621      	mov	r1, r4
 800e32e:	084a      	lsrs	r2, r1, #1
 800e330:	4629      	mov	r1, r5
 800e332:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e336:	4629      	mov	r1, r5
 800e338:	104b      	asrs	r3, r1, #1
 800e33a:	4610      	mov	r0, r2
 800e33c:	4619      	mov	r1, r3
 800e33e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e342:	1814      	adds	r4, r2, r0
 800e344:	603c      	str	r4, [r7, #0]
 800e346:	414b      	adcs	r3, r1
 800e348:	607b      	str	r3, [r7, #4]
 800e34a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e34e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800e352:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e356:	4313      	orrs	r3, r2
 800e358:	d009      	beq.n	800e36e <VL53LX_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800e35a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e35e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e362:	f7f2 fb63 	bl	8000a2c <__aeabi_ldivmod>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800e36e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e372:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 800e376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e378:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 800e37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 800e382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800e388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e38a:	7852      	ldrb	r2, [r2, #1]
 800e38c:	0852      	lsrs	r2, r2, #1
 800e38e:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800e390:	441a      	add	r2, r3
 800e392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e394:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 800e398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800e39e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3a0:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 800e3a2:	fb93 f2f2 	sdiv	r2, r3, r2
 800e3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800e3ac:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3778      	adds	r7, #120	; 0x78
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e3ba <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800e3ba:	b480      	push	{r7}
 800e3bc:	b087      	sub	sp, #28
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
	amb_thresh_low  = 1024 *
 800e3da:	029b      	lsls	r3, r3, #10
 800e3dc:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	amb_thresh_high = 1024 *
 800e3e4:	029b      	lsls	r3, r3, #10
 800e3e6:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f040 8095 	bne.w	800e522 <VL53LX_hist_get_bin_sequence_config+0x168>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
		pdata->bin_seq[5] =
 800e3fe:	091b      	lsrs	r3, r3, #4
 800e400:	b2da      	uxtb	r2, r3
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800e40c:	f003 030f 	and.w	r3, r3, #15
 800e410:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		pdata->bin_seq[3] =
 800e41c:	091b      	lsrs	r3, r3, #4
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e42a:	f003 030f 	and.w	r3, r3, #15
 800e42e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
		pdata->bin_seq[1] =
 800e43a:	091b      	lsrs	r3, r3, #4
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e448:	f003 030f 	and.w	r3, r3, #15
 800e44c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	da2c      	bge.n	800e4b8 <VL53LX_hist_get_bin_sequence_config+0xfe>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[5] =
 800e464:	091b      	lsrs	r3, r3, #4
 800e466:	b2da      	uxtb	r2, r3
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800e472:	f003 030f 	and.w	r3, r3, #15
 800e476:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[3] =
 800e482:	091b      	lsrs	r3, r3, #4
 800e484:	b2da      	uxtb	r2, r3
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800e490:	f003 030f 	and.w	r3, r3, #15
 800e494:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[1] =
 800e4a0:	091b      	lsrs	r3, r3, #4
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800e4ae:	f003 030f 	and.w	r3, r3, #15
 800e4b2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	f340 80c2 	ble.w	800e64a <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			pdata->bin_seq[5] =
 800e4cc:	091b      	lsrs	r3, r3, #4
 800e4ce:	b2da      	uxtb	r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
			& 0x0F;
 800e4da:	f003 030f 	and.w	r3, r3, #15
 800e4de:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			pdata->bin_seq[3] =
 800e4ea:	091b      	lsrs	r3, r3, #4
 800e4ec:	b2da      	uxtb	r2, r3
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
			& 0x0F;
 800e4f8:	f003 030f 	and.w	r3, r3, #15
 800e4fc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			pdata->bin_seq[1] =
 800e508:	091b      	lsrs	r3, r3, #4
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
			& 0x0F;
 800e516:	f003 030f 	and.w	r3, r3, #15
 800e51a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	731a      	strb	r2, [r3, #12]
 800e520:	e093      	b.n	800e64a <VL53LX_hist_get_bin_sequence_config+0x290>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800e528:	f003 030f 	and.w	r3, r3, #15
 800e52c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
			& 0x0F;
 800e538:	f003 030f 	and.w	r3, r3, #15
 800e53c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	f893 3328 	ldrb.w	r3, [r3, #808]	; 0x328
		pdata->bin_seq[3] =
 800e548:	091b      	lsrs	r3, r3, #4
 800e54a:	b2da      	uxtb	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e556:	f003 030f 	and.w	r3, r3, #15
 800e55a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
		pdata->bin_seq[1] =
 800e566:	091b      	lsrs	r3, r3, #4
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f893 3326 	ldrb.w	r3, [r3, #806]	; 0x326
			& 0x0F;
 800e574:	f003 030f 	and.w	r3, r3, #15
 800e578:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	429a      	cmp	r2, r3
 800e588:	da2c      	bge.n	800e5e4 <VL53LX_hist_get_bin_sequence_config+0x22a>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			pdata->bin_seq[5] =
 800e590:	091b      	lsrs	r3, r3, #4
 800e592:	b2da      	uxtb	r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
			& 0x0F;
 800e59e:	f003 030f 	and.w	r3, r3, #15
 800e5a2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			pdata->bin_seq[3] =
 800e5ae:	091b      	lsrs	r3, r3, #4
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
			& 0x0F;
 800e5bc:	f003 030f 	and.w	r3, r3, #15
 800e5c0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[1] =
 800e5cc:	091b      	lsrs	r3, r3, #4
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800e5da:	f003 030f 	and.w	r3, r3, #15
 800e5de:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	dd2c      	ble.n	800e64a <VL53LX_hist_get_bin_sequence_config+0x290>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			pdata->bin_seq[5] =
 800e5f6:	091b      	lsrs	r3, r3, #4
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
			& 0x0F;
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			pdata->bin_seq[3] =
 800e614:	091b      	lsrs	r3, r3, #4
 800e616:	b2da      	uxtb	r2, r3
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
			& 0x0F;
 800e622:	f003 030f 	and.w	r3, r3, #15
 800e626:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			pdata->bin_seq[1] =
 800e632:	091b      	lsrs	r3, r3, #4
 800e634:	b2da      	uxtb	r2, r3
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
			& 0x0F;
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e64a:	2300      	movs	r3, #0
 800e64c:	75fb      	strb	r3, [r7, #23]
 800e64e:	e007      	b.n	800e660 <VL53LX_hist_get_bin_sequence_config+0x2a6>
		pdata->bin_rep[i] = 1;
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	4413      	add	r3, r2
 800e656:	2201      	movs	r2, #1
 800e658:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	3301      	adds	r3, #1
 800e65e:	75fb      	strb	r3, [r7, #23]
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	2b05      	cmp	r3, #5
 800e664:	d9f4      	bls.n	800e650 <VL53LX_hist_get_bin_sequence_config+0x296>

	LOG_FUNCTION_END(0);

}
 800e666:	bf00      	nop
 800e668:	bf00      	nop
 800e66a:	371c      	adds	r7, #28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b093      	sub	sp, #76	; 0x4c
 800e678:	af04      	add	r7, sp, #16
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
 800e680:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800e682:	2300      	movs	r3, #0
 800e684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800e68c:	2300      	movs	r3, #0
 800e68e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800e692:	2300      	movs	r3, #0
 800e694:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	f893 326f 	ldrb.w	r3, [r3, #623]	; 0x26f
 800e6b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800e6bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 800e6c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
 800e6cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800e6d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6d4:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800e6d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6d8:	021b      	lsls	r3, r3, #8
 800e6da:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	2b07      	cmp	r3, #7
 800e6e2:	d006      	beq.n	800e6f2 <VL53LX_hist_phase_consistency_check+0x7e>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 800e6e8:	2b08      	cmp	r3, #8
 800e6ea:	d002      	beq.n	800e6f2 <VL53LX_hist_phase_consistency_check+0x7e>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800e6ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e6f0:	e0ec      	b.n	800e8cc <VL53LX_hist_phase_consistency_check+0x258>



	if (phase_tolerance == 0)
 800e6f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d102      	bne.n	800e6fe <VL53LX_hist_phase_consistency_check+0x8a>
		return status;
 800e6f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e6fc:	e0e6      	b.n	800e8cc <VL53LX_hist_phase_consistency_check+0x258>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e6fe:	2300      	movs	r3, #0
 800e700:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e704:	e0d9      	b.n	800e8ba <VL53LX_hist_phase_consistency_check+0x246>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800e706:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	214c      	movs	r1, #76	; 0x4c
 800e70e:	fb01 f303 	mul.w	r3, r1, r3
 800e712:	4413      	add	r3, r2
 800e714:	335e      	adds	r3, #94	; 0x5e
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b09      	cmp	r3, #9
 800e71a:	d00b      	beq.n	800e734 <VL53LX_hist_phase_consistency_check+0xc0>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800e71c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	214c      	movs	r1, #76	; 0x4c
 800e724:	fb01 f303 	mul.w	r3, r1, r3
 800e728:	4413      	add	r3, r2
 800e72a:	335e      	adds	r3, #94	; 0x5e
 800e72c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 800e72e:	2b13      	cmp	r3, #19
 800e730:	f040 80bd 	bne.w	800e8ae <VL53LX_hist_phase_consistency_check+0x23a>





		if (prange_prev->active_objects == 0)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	795b      	ldrb	r3, [r3, #5]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10a      	bne.n	800e752 <VL53LX_hist_phase_consistency_check+0xde>
			prange_curr->VL53LX_p_003[lc].range_status =
 800e73c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	214c      	movs	r1, #76	; 0x4c
 800e744:	fb01 f303 	mul.w	r3, r1, r3
 800e748:	4413      	add	r3, r2
 800e74a:	335e      	adds	r3, #94	; 0x5e
 800e74c:	2217      	movs	r2, #23
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e009      	b.n	800e766 <VL53LX_hist_phase_consistency_check+0xf2>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 800e752:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	214c      	movs	r1, #76	; 0x4c
 800e75a:	fb01 f303 	mul.w	r3, r1, r3
 800e75e:	4413      	add	r3, r2
 800e760:	335e      	adds	r3, #94	; 0x5e
 800e762:	2207      	movs	r2, #7
 800e764:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800e766:	2300      	movs	r3, #0
 800e768:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e76c:	e097      	b.n	800e89e <VL53LX_hist_phase_consistency_check+0x22a>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800e76e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	214c      	movs	r1, #76	; 0x4c
 800e776:	fb01 f303 	mul.w	r3, r1, r3
 800e77a:	4413      	add	r3, r2
 800e77c:	3354      	adds	r3, #84	; 0x54
 800e77e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 800e780:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	4613      	mov	r3, r2
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	4413      	add	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4403      	add	r3, r0
 800e790:	3310      	adds	r3, #16
 800e792:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800e794:	4299      	cmp	r1, r3
 800e796:	d915      	bls.n	800e7c4 <VL53LX_hist_phase_consistency_check+0x150>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 800e798:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	214c      	movs	r1, #76	; 0x4c
 800e7a0:	fb01 f303 	mul.w	r3, r1, r3
 800e7a4:	4413      	add	r3, r2
 800e7a6:	3354      	adds	r3, #84	; 0x54
 800e7a8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 800e7aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	4413      	add	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4403      	add	r3, r0
 800e7ba:	3310      	adds	r3, #16
 800e7bc:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e7be:	1acb      	subs	r3, r1, r3
 800e7c0:	867b      	strh	r3, [r7, #50]	; 0x32
 800e7c2:	e014      	b.n	800e7ee <VL53LX_hist_phase_consistency_check+0x17a>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 800e7c4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e7c8:	6879      	ldr	r1, [r7, #4]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	4413      	add	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	440b      	add	r3, r1
 800e7d4:	3310      	adds	r3, #16
 800e7d6:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 800e7d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7dc:	6839      	ldr	r1, [r7, #0]
 800e7de:	204c      	movs	r0, #76	; 0x4c
 800e7e0:	fb00 f303 	mul.w	r3, r0, r3
 800e7e4:	440b      	add	r3, r1
 800e7e6:	3354      	adds	r3, #84	; 0x54
 800e7e8:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800e7ee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e7f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d24e      	bcs.n	800e894 <VL53LX_hist_phase_consistency_check+0x220>





				if (status == VL53LX_ERROR_NONE)
 800e7f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d125      	bne.n	800e84a <VL53LX_hist_phase_consistency_check+0x1d6>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800e7fe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 800e802:	4613      	mov	r3, r2
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	3308      	adds	r3, #8
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800e810:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 800e814:	224c      	movs	r2, #76	; 0x4c
 800e816:	fb02 f303 	mul.w	r3, r2, r3
 800e81a:	3310      	adds	r3, #16
 800e81c:	683a      	ldr	r2, [r7, #0]
 800e81e:	4413      	add	r3, r2
 800e820:	3304      	adds	r3, #4
 800e822:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800e824:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800e828:	f107 0217 	add.w	r2, r7, #23
 800e82c:	9203      	str	r2, [sp, #12]
 800e82e:	f107 021c 	add.w	r2, r7, #28
 800e832:	9202      	str	r2, [sp, #8]
 800e834:	f107 0218 	add.w	r2, r7, #24
 800e838:	9201      	str	r2, [sp, #4]
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	4623      	mov	r3, r4
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	f000 f848 	bl	800e8d4 <VL53LX_hist_events_consistency_check>
 800e844:	4603      	mov	r3, r0
 800e846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800e84a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d115      	bne.n	800e87e <VL53LX_hist_phase_consistency_check+0x20a>
					range_status ==
 800e852:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800e854:	2b09      	cmp	r3, #9
 800e856:	d112      	bne.n	800e87e <VL53LX_hist_phase_consistency_check+0x20a>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800e858:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800e85c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 800e860:	224c      	movs	r2, #76	; 0x4c
 800e862:	fb02 f303 	mul.w	r3, r2, r3
 800e866:	3310      	adds	r3, #16
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	4413      	add	r3, r2
 800e86c:	3304      	adds	r3, #4
 800e86e:	f107 0217 	add.w	r2, r7, #23
 800e872:	4619      	mov	r1, r3
 800e874:	f000 fb44 	bl	800ef00 <VL53LX_hist_merged_pulse_check>
 800e878:	4603      	mov	r3, r0
 800e87a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 800e87e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e882:	7df8      	ldrb	r0, [r7, #23]
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	214c      	movs	r1, #76	; 0x4c
 800e888:	fb01 f303 	mul.w	r3, r1, r3
 800e88c:	4413      	add	r3, r2
 800e88e:	335e      	adds	r3, #94	; 0x5e
 800e890:	4602      	mov	r2, r0
 800e892:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800e894:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e898:	3301      	adds	r3, #1
 800e89a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	795b      	ldrb	r3, [r3, #5]
 800e8a2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	f4ff af61 	bcc.w	800e76e <VL53LX_hist_phase_consistency_check+0xfa>
 800e8ac:	e000      	b.n	800e8b0 <VL53LX_hist_phase_consistency_check+0x23c>
			continue;
 800e8ae:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800e8b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	7c9b      	ldrb	r3, [r3, #18]
 800e8be:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	f4ff af1f 	bcc.w	800e706 <VL53LX_hist_phase_consistency_check+0x92>

	}

	LOG_FUNCTION_END(status);

	return status;
 800e8c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	373c      	adds	r7, #60	; 0x3c
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}

0800e8d4 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800e8d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8d8:	b0d4      	sub	sp, #336	; 0x150
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800e8e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800e8f6:	f04f 0200 	mov.w	r2, #0
 800e8fa:	f04f 0300 	mov.w	r3, #0
 800e8fe:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800e902:	f04f 0200 	mov.w	r2, #0
 800e906:	f04f 0300 	mov.w	r3, #0
 800e90a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800e90e:	f04f 0200 	mov.w	r2, #0
 800e912:	f04f 0300 	mov.w	r3, #0
 800e916:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800e91a:	f04f 0200 	mov.w	r2, #0
 800e91e:	f04f 0300 	mov.w	r3, #0
 800e922:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800e926:	f04f 0200 	mov.w	r2, #0
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800e932:	f04f 0200 	mov.w	r2, #0
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800e93e:	f04f 0200 	mov.w	r2, #0
 800e942:	f04f 0300 	mov.w	r3, #0
 800e946:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800e94a:	f04f 0200 	mov.w	r2, #0
 800e94e:	f04f 0300 	mov.w	r3, #0
 800e952:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800e962:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800e966:	2b00      	cmp	r3, #0
 800e968:	d106      	bne.n	800e978 <VL53LX_hist_events_consistency_check+0xa4>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800e96a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800e96e:	2209      	movs	r2, #9
 800e970:	701a      	strb	r2, [r3, #0]
		return status;
 800e972:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800e976:	e2bd      	b.n	800eef4 <VL53LX_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800e978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e984:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800e988:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e98c:	460b      	mov	r3, r1
 800e98e:	3301      	adds	r3, #1
 800e990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e994:	4613      	mov	r3, r2
 800e996:	f143 0300 	adc.w	r3, r3, #0
 800e99a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e99e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e9a2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800e9a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e9aa:	885b      	ldrh	r3, [r3, #2]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	469a      	mov	sl, r3
 800e9b2:	4693      	mov	fp, r2
 800e9b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800e9b8:	fb0a f203 	mul.w	r2, sl, r3
 800e9bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e9c0:	fb0b f303 	mul.w	r3, fp, r3
 800e9c4:	441a      	add	r2, r3
 800e9c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e9ca:	fba3 450a 	umull	r4, r5, r3, sl
 800e9ce:	1953      	adds	r3, r2, r5
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800e9d6:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800e9da:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e9e6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e9ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	f143 0300 	adc.w	r3, r3, #0
 800e9fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea00:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800ea04:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800ea08:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ea0c:	8adb      	ldrh	r3, [r3, #22]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	2200      	movs	r2, #0
 800ea12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea16:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ea1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ea1e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800ea22:	4622      	mov	r2, r4
 800ea24:	fb02 f203 	mul.w	r2, r2, r3
 800ea28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	fb01 f303 	mul.w	r3, r1, r3
 800ea32:	441a      	add	r2, r3
 800ea34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea38:	4621      	mov	r1, r4
 800ea3a:	fba3 8901 	umull	r8, r9, r3, r1
 800ea3e:	eb02 0309 	add.w	r3, r2, r9
 800ea42:	4699      	mov	r9, r3
 800ea44:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800ea48:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800ea4c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800ea50:	f04f 0000 	mov.w	r0, #0
 800ea54:	f04f 0100 	mov.w	r1, #0
 800ea58:	0319      	lsls	r1, r3, #12
 800ea5a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ea5e:	0310      	lsls	r0, r2, #12
 800ea60:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	if (tmpc != 0) {
 800ea64:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	d035      	beq.n	800ead8 <VL53LX_hist_events_consistency_check+0x204>
		events_scaler += (tmpc/2);
 800ea6c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800ea70:	0fd9      	lsrs	r1, r3, #31
 800ea72:	2000      	movs	r0, #0
 800ea74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ea78:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800ea7c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800ea80:	4621      	mov	r1, r4
 800ea82:	1889      	adds	r1, r1, r2
 800ea84:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ea88:	4629      	mov	r1, r5
 800ea8a:	eb43 0101 	adc.w	r1, r3, r1
 800ea8e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800ea92:	f04f 0200 	mov.w	r2, #0
 800ea96:	f04f 0300 	mov.w	r3, #0
 800ea9a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	084a      	lsrs	r2, r1, #1
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	104b      	asrs	r3, r1, #1
 800eaac:	4610      	mov	r0, r2
 800eaae:	4619      	mov	r1, r3
 800eab0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800eab4:	1814      	adds	r4, r2, r0
 800eab6:	67bc      	str	r4, [r7, #120]	; 0x78
 800eab8:	414b      	adcs	r3, r1
 800eaba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eabc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800eac0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
		events_scaler  = do_division_s(events_scaler, tmpc);
 800eac4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800eac8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800eacc:	f7f1 ffae 	bl	8000a2c <__aeabi_ldivmod>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	}

	events_scaler_sq  = events_scaler * events_scaler;
 800ead8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800eadc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eae0:	fb03 f102 	mul.w	r1, r3, r2
 800eae4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800eae8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eaec:	fb02 f303 	mul.w	r3, r2, r3
 800eaf0:	18ca      	adds	r2, r1, r3
 800eaf2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eaf6:	fba3 1303 	umull	r1, r3, r3, r3
 800eafa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eafe:	460b      	mov	r3, r1
 800eb00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eb04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb08:	18d3      	adds	r3, r2, r3
 800eb0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb0e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800eb12:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800eb16:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800eb1a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800eb1e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800eb22:	6739      	str	r1, [r7, #112]	; 0x70
 800eb24:	f143 0300 	adc.w	r3, r3, #0
 800eb28:	677b      	str	r3, [r7, #116]	; 0x74
 800eb2a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800eb2e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800eb32:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	da08      	bge.n	800eb4c <VL53LX_hist_events_consistency_check+0x278>
 800eb3a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800eb3e:	1851      	adds	r1, r2, r1
 800eb40:	66b9      	str	r1, [r7, #104]	; 0x68
 800eb42:	f143 0300 	adc.w	r3, r3, #0
 800eb46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800eb4c:	f04f 0000 	mov.w	r0, #0
 800eb50:	f04f 0100 	mov.w	r1, #0
 800eb54:	0b10      	lsrs	r0, r2, #12
 800eb56:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800eb5a:	1319      	asrs	r1, r3, #12
 800eb5c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 800eb60:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb66:	2200      	movs	r2, #0
 800eb68:	663b      	str	r3, [r7, #96]	; 0x60
 800eb6a:	667a      	str	r2, [r7, #100]	; 0x64
 800eb6c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800eb70:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 800eb74:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eb80:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800eb84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eb88:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	1a51      	subs	r1, r2, r1
 800eb90:	65b9      	str	r1, [r7, #88]	; 0x58
 800eb92:	4629      	mov	r1, r5
 800eb94:	eb63 0301 	sbc.w	r3, r3, r1
 800eb98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb9a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800eb9e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800eba2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800eba6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebaa:	fb03 f102 	mul.w	r1, r3, r2
 800ebae:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ebb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ebb6:	fb02 f303 	mul.w	r3, r2, r3
 800ebba:	4419      	add	r1, r3
 800ebbc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800ebc0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ebc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ebc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ebcc:	4613      	mov	r3, r2
 800ebce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ebd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebd6:	18cb      	adds	r3, r1, r3
 800ebd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ebdc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800ebe0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800ebe4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800ebe8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ebec:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ebf0:	6539      	str	r1, [r7, #80]	; 0x50
 800ebf2:	f143 0300 	adc.w	r3, r3, #0
 800ebf6:	657b      	str	r3, [r7, #84]	; 0x54
 800ebf8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800ebfc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800ec00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	da08      	bge.n	800ec1a <VL53LX_hist_events_consistency_check+0x346>
 800ec08:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ec0c:	1851      	adds	r1, r2, r1
 800ec0e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ec10:	f143 0300 	adc.w	r3, r3, #0
 800ec14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ec1a:	f04f 0000 	mov.w	r0, #0
 800ec1e:	f04f 0100 	mov.w	r1, #0
 800ec22:	0b10      	lsrs	r0, r2, #12
 800ec24:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ec28:	1319      	asrs	r1, r3, #12
 800ec2a:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800ec2e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ec32:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800ec36:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ec3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ec42:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ec46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ec4a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800ec4e:	4622      	mov	r2, r4
 800ec50:	fb02 f203 	mul.w	r2, r2, r3
 800ec54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ec58:	4629      	mov	r1, r5
 800ec5a:	fb01 f303 	mul.w	r3, r1, r3
 800ec5e:	441a      	add	r2, r3
 800ec60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ec64:	4621      	mov	r1, r4
 800ec66:	fba3 1301 	umull	r1, r3, r3, r1
 800ec6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec6e:	460b      	mov	r3, r1
 800ec70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec78:	18d3      	adds	r3, r2, r3
 800ec7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ec7e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800ec82:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800ec86:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800ec8a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ec8e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ec92:	6439      	str	r1, [r7, #64]	; 0x40
 800ec94:	f143 0300 	adc.w	r3, r3, #0
 800ec98:	647b      	str	r3, [r7, #68]	; 0x44
 800ec9a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ec9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800eca2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da08      	bge.n	800ecbc <VL53LX_hist_events_consistency_check+0x3e8>
 800ecaa:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ecae:	1851      	adds	r1, r2, r1
 800ecb0:	63b9      	str	r1, [r7, #56]	; 0x38
 800ecb2:	f143 0300 	adc.w	r3, r3, #0
 800ecb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ecbc:	f04f 0000 	mov.w	r0, #0
 800ecc0:	f04f 0100 	mov.w	r1, #0
 800ecc4:	0b10      	lsrs	r0, r2, #12
 800ecc6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800ecca:	1319      	asrs	r1, r3, #12
 800eccc:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800ecd0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ecd4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800ecd8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ece4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ece8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecec:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	fb02 f203 	mul.w	r2, r2, r3
 800ecf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	fb01 f303 	mul.w	r3, r1, r3
 800ed00:	441a      	add	r2, r3
 800ed02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ed06:	4621      	mov	r1, r4
 800ed08:	fba3 1301 	umull	r1, r3, r3, r1
 800ed0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ed10:	460b      	mov	r3, r1
 800ed12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ed1a:	18d3      	adds	r3, r2, r3
 800ed1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ed20:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800ed24:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800ed28:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800ed2c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed30:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800ed34:	6339      	str	r1, [r7, #48]	; 0x30
 800ed36:	f143 0300 	adc.w	r3, r3, #0
 800ed3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed3c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ed40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800ed44:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	2900      	cmp	r1, #0
 800ed4e:	da08      	bge.n	800ed62 <VL53LX_hist_events_consistency_check+0x48e>
 800ed50:	f640 73ff 	movw	r3, #4095	; 0xfff
 800ed54:	18c3      	adds	r3, r0, r3
 800ed56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed58:	f141 0300 	adc.w	r3, r1, #0
 800ed5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ed62:	f04f 0200 	mov.w	r2, #0
 800ed66:	f04f 0300 	mov.w	r3, #0
 800ed6a:	0b02      	lsrs	r2, r0, #12
 800ed6c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800ed70:	130b      	asrs	r3, r1, #12
 800ed72:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800ed76:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed7a:	1c91      	adds	r1, r2, #2
 800ed7c:	6239      	str	r1, [r7, #32]
 800ed7e:	f143 0300 	adc.w	r3, r3, #0
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
 800ed84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ed88:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800ed8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	da06      	bge.n	800eda2 <VL53LX_hist_events_consistency_check+0x4ce>
 800ed94:	1cd1      	adds	r1, r2, #3
 800ed96:	61b9      	str	r1, [r7, #24]
 800ed98:	f143 0300 	adc.w	r3, r3, #0
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eda2:	f04f 0000 	mov.w	r0, #0
 800eda6:	f04f 0100 	mov.w	r1, #0
 800edaa:	0890      	lsrs	r0, r2, #2
 800edac:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800edb0:	1099      	asrs	r1, r3, #2
 800edb2:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 800edb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edba:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800edbc:	2200      	movs	r2, #0
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	617a      	str	r2, [r7, #20]
 800edc2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800edc6:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800edca:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800edce:	1c91      	adds	r1, r2, #2
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	f143 0300 	adc.w	r3, r3, #0
 800edd6:	60fb      	str	r3, [r7, #12]
 800edd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800eddc:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800ede0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	da06      	bge.n	800edf6 <VL53LX_hist_events_consistency_check+0x522>
 800ede8:	1cd1      	adds	r1, r2, #3
 800edea:	6039      	str	r1, [r7, #0]
 800edec:	f143 0300 	adc.w	r3, r3, #0
 800edf0:	607b      	str	r3, [r7, #4]
 800edf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edf6:	f04f 0000 	mov.w	r0, #0
 800edfa:	f04f 0100 	mov.w	r1, #0
 800edfe:	0890      	lsrs	r0, r2, #2
 800ee00:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ee04:	1099      	asrs	r1, r3, #2
 800ee06:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800ee0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee0e:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800ee10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53LX_p_017 +
 800ee14:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800ee16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800ee1a:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800ee1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800ee20:	4413      	add	r3, r2
 800ee22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 800ee26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee2a:	011b      	lsls	r3, r3, #4
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f001 fffb 	bl	8010e28 <VL53LX_isqrt>
 800ee32:	4603      	mov	r3, r0
 800ee34:	461a      	mov	r2, r3
	*pevents_tolerance =
 800ee36:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee3a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800ee3c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800ee46:	fb03 f202 	mul.w	r2, r3, r2
 800ee4a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee4e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800ee50:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f103 0220 	add.w	r2, r3, #32
 800ee5a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee5e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800ee60:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	da00      	bge.n	800ee6c <VL53LX_hist_events_consistency_check+0x598>
 800ee6a:	333f      	adds	r3, #63	; 0x3f
 800ee6c:	119b      	asrs	r3, r3, #6
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800ee74:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800ee76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800ee80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee8c:	1a9b      	subs	r3, r3, r2
 800ee8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800ee92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee96:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	da08      	bge.n	800eeb0 <VL53LX_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800ee9e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800eea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eea6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800eea8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e007      	b.n	800eec0 <VL53LX_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800eeb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eeb4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800eeb8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800eeba:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eebe:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800eec0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	429a      	cmp	r2, r3
 800eece:	dd0b      	ble.n	800eee8 <VL53LX_hist_events_consistency_check+0x614>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800eed0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800eed4:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800eed6:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d204      	bcs.n	800eee8 <VL53LX_hist_events_consistency_check+0x614>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800eede:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800eee2:	2214      	movs	r2, #20
 800eee4:	701a      	strb	r2, [r3, #0]
 800eee6:	e003      	b.n	800eef0 <VL53LX_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800eee8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800eeec:	2209      	movs	r2, #9
 800eeee:	701a      	strb	r2, [r3, #0]





	return status;
 800eef0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800eefa:	46bd      	mov	sp, r7
 800eefc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef00 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef22:	429a      	cmp	r2, r3
 800ef24:	dd0b      	ble.n	800ef3e <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	1ad3      	subs	r3, r2, r3
 800ef38:	b29b      	uxth	r3, r3
		delta_mm =
 800ef3a:	82fb      	strh	r3, [r7, #22]
 800ef3c:	e00a      	b.n	800ef54 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	b29b      	uxth	r3, r3
		delta_mm =
 800ef52:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800ef54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	dd09      	ble.n	800ef70 <VL53LX_hist_merged_pulse_check+0x70>
 800ef5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	dd03      	ble.n	800ef70 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2216      	movs	r2, #22
 800ef6c:	701a      	strb	r2, [r3, #0]
 800ef6e:	e002      	b.n	800ef76 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2209      	movs	r2, #9
 800ef74:	701a      	strb	r2, [r3, #0]

	return status;
 800ef76:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	371c      	adds	r7, #28
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b08e      	sub	sp, #56	; 0x38
 800ef8a:	af04      	add	r7, sp, #16
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
 800ef92:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ef94:	2300      	movs	r3, #0
 800ef96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
 800efac:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 800efb4:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800efbc:	2b09      	cmp	r3, #9
 800efbe:	d009      	beq.n	800efd4 <VL53LX_hist_xmonitor_consistency_check+0x4e>
		prange_curr->range_status ==
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800efc6:	2b13      	cmp	r3, #19
 800efc8:	d004      	beq.n	800efd4 <VL53LX_hist_xmonitor_consistency_check+0x4e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800efd0:	2b14      	cmp	r3, #20
 800efd2:	d129      	bne.n	800f028 <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efda:	2b09      	cmp	r3, #9
 800efdc:	d009      	beq.n	800eff2 <VL53LX_hist_xmonitor_consistency_check+0x6c>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800efe4:	2b13      	cmp	r3, #19
 800efe6:	d004      	beq.n	800eff2 <VL53LX_hist_xmonitor_consistency_check+0x6c>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800efee:	2b14      	cmp	r3, #20
 800eff0:	d11a      	bne.n	800f028 <VL53LX_hist_xmonitor_consistency_check+0xa2>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	2209      	movs	r2, #9
 800eff6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800f004:	8bb9      	ldrh	r1, [r7, #28]
 800f006:	7ff8      	ldrb	r0, [r7, #31]
 800f008:	9303      	str	r3, [sp, #12]
 800f00a:	f107 0318 	add.w	r3, r7, #24
 800f00e:	9302      	str	r3, [sp, #8]
 800f010:	f107 0314 	add.w	r3, r7, #20
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	4613      	mov	r3, r2
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	f7ff fc59 	bl	800e8d4 <VL53LX_hist_events_consistency_check>
 800f022:	4603      	mov	r3, r0
 800f024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800f028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3728      	adds	r7, #40	; 0x28
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800f040:	2300      	movs	r3, #0
 800f042:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800f044:	2300      	movs	r3, #0
 800f046:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800f048:	2300      	movs	r3, #0
 800f04a:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d019      	beq.n	800f094 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f066:	4618      	mov	r0, r3
 800f068:	f002 f845 	bl	80110f6 <VL53LX_calc_pll_period_mm>
 800f06c:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800f074:	021b      	lsls	r3, r3, #8
 800f076:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	fb02 f303 	mul.w	r3, r2, r3
 800f080:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f088:	0bdb      	lsrs	r3, r3, #15
 800f08a:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	b21a      	sxth	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800f0a0:	b590      	push	{r4, r7, lr}
 800f0a2:	b08d      	sub	sp, #52	; 0x34
 800f0a4:	af04      	add	r7, sp, #16
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4623      	mov	r3, r4
 800f0b0:	80fb      	strh	r3, [r7, #6]
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	80bb      	strh	r3, [r7, #4]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70fb      	strb	r3, [r7, #3]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800f0de:	78b9      	ldrb	r1, [r7, #2]
 800f0e0:	78f8      	ldrb	r0, [r7, #3]
 800f0e2:	f107 030c 	add.w	r3, r7, #12
 800f0e6:	9303      	str	r3, [sp, #12]
 800f0e8:	f107 030e 	add.w	r3, r7, #14
 800f0ec:	9302      	str	r3, [sp, #8]
 800f0ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f0f2:	9301      	str	r3, [sp, #4]
 800f0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	23ff      	movs	r3, #255	; 0xff
 800f0fa:	22c7      	movs	r2, #199	; 0xc7
 800f0fc:	f000 fa03 	bl	800f506 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800f100:	89fb      	ldrh	r3, [r7, #14]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d050      	beq.n	800f1a8 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800f106:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d04d      	beq.n	800f1a8 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800f10c:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800f110:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f114:	78b9      	ldrb	r1, [r7, #2]
 800f116:	78f8      	ldrb	r0, [r7, #3]
 800f118:	f107 0308 	add.w	r3, r7, #8
 800f11c:	9303      	str	r3, [sp, #12]
 800f11e:	f107 030a 	add.w	r3, r7, #10
 800f122:	9302      	str	r3, [sp, #8]
 800f124:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f128:	9301      	str	r3, [sp, #4]
 800f12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	4623      	mov	r3, r4
 800f130:	f000 f9e9 	bl	800f506 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800f138:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800f13a:	897b      	ldrh	r3, [r7, #10]
 800f13c:	461a      	mov	r2, r3
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	fb02 f303 	mul.w	r3, r2, r3
 800f144:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	461a      	mov	r2, r3
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f150:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800f156:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800f158:	893b      	ldrh	r3, [r7, #8]
 800f15a:	461a      	mov	r2, r3
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	fb02 f303 	mul.w	r3, r2, r3
 800f162:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800f164:	89bb      	ldrh	r3, [r7, #12]
 800f166:	461a      	mov	r2, r3
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f16e:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800f170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f174:	69ba      	ldr	r2, [r7, #24]
 800f176:	fb02 f303 	mul.w	r3, r2, r3
 800f17a:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800f17c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f180:	697a      	ldr	r2, [r7, #20]
 800f182:	fb02 f303 	mul.w	r3, r2, r3
 800f186:	69fa      	ldr	r2, [r7, #28]
 800f188:	4413      	add	r3, r2
 800f18a:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f18c:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800f18e:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800f190:	4413      	add	r3, r2
 800f192:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d008      	beq.n	800f1ac <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	009a      	lsls	r2, r3, #2
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1a4:	61fb      	str	r3, [r7, #28]
 800f1a6:	e002      	b.n	800f1ae <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800f1a8:	bf00      	nop
 800f1aa:	e000      	b.n	800f1ae <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800f1ac:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	b21a      	sxth	r2, r3
 800f1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1b4:	801a      	strh	r2, [r3, #0]

}
 800f1b6:	bf00      	nop
 800f1b8:	3724      	adds	r7, #36	; 0x24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd90      	pop	{r4, r7, pc}

0800f1be <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800f1be:	b480      	push	{r7}
 800f1c0:	b085      	sub	sp, #20
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
 800f1d0:	08db      	lsrs	r3, r3, #3
 800f1d2:	b2da      	uxtb	r2, r3
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800f1d8:	7bfb      	ldrb	r3, [r7, #15]
 800f1da:	f003 0307 	and.w	r3, r3, #7
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	4093      	lsls	r3, r2
 800f1ee:	b2da      	uxtb	r2, r3
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	701a      	strb	r2, [r3, #0]

}
 800f1f4:	bf00      	nop
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	603a      	str	r2, [r7, #0]
 800f20a:	71fb      	strb	r3, [r7, #7]
 800f20c:	460b      	mov	r3, r1
 800f20e:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800f210:	79fb      	ldrb	r3, [r7, #7]
 800f212:	2b07      	cmp	r3, #7
 800f214:	d90a      	bls.n	800f22c <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800f216:	79bb      	ldrb	r3, [r7, #6]
 800f218:	00db      	lsls	r3, r3, #3
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	79fb      	ldrb	r3, [r7, #7]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	b2db      	uxtb	r3, r3
 800f222:	3b71      	subs	r3, #113	; 0x71
 800f224:	b2da      	uxtb	r2, r3
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800f22a:	e00a      	b.n	800f242 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800f22c:	79bb      	ldrb	r3, [r7, #6]
 800f22e:	f1c3 030f 	rsb	r3, r3, #15
 800f232:	b2db      	uxtb	r3, r3
 800f234:	00db      	lsls	r3, r3, #3
 800f236:	b2da      	uxtb	r2, r3
 800f238:	79fb      	ldrb	r3, [r7, #7]
 800f23a:	4413      	add	r3, r2
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	701a      	strb	r2, [r3, #0]
}
 800f242:	bf00      	nop
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	4603      	mov	r3, r0
 800f256:	60b9      	str	r1, [r7, #8]
 800f258:	607a      	str	r2, [r7, #4]
 800f25a:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	091b      	lsrs	r3, r3, #4
 800f260:	b2da      	uxtb	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	f003 030f 	and.w	r3, r3, #15
 800f26c:	b2da      	uxtb	r2, r3
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	701a      	strb	r2, [r3, #0]

}
 800f272:	bf00      	nop
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800f27e:	b480      	push	{r7}
 800f280:	b083      	sub	sp, #12
 800f282:	af00      	add	r7, sp, #0
 800f284:	4603      	mov	r3, r0
 800f286:	603a      	str	r2, [r7, #0]
 800f288:	71fb      	strb	r3, [r7, #7]
 800f28a:	460b      	mov	r3, r1
 800f28c:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800f28e:	79bb      	ldrb	r3, [r7, #6]
 800f290:	011b      	lsls	r3, r3, #4
 800f292:	b2da      	uxtb	r2, r3
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	4413      	add	r3, r2
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	701a      	strb	r2, [r3, #0]

}
 800f29e:	bf00      	nop
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b086      	sub	sp, #24
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	60ba      	str	r2, [r7, #8]
 800f2b2:	607b      	str	r3, [r7, #4]
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800f2cc:	f107 0217 	add.w	r2, r7, #23
 800f2d0:	f107 0116 	add.w	r1, r7, #22
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f002 f988 	bl	80115ec <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800f2dc:	f107 0214 	add.w	r2, r7, #20
 800f2e0:	f107 0115 	add.w	r1, r7, #21
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7ff ffb1 	bl	800f24e <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	7d7b      	ldrb	r3, [r7, #21]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	0fd9      	lsrs	r1, r3, #31
 800f2f6:	440b      	add	r3, r1
 800f2f8:	105b      	asrs	r3, r3, #1
 800f2fa:	425b      	negs	r3, r3
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4413      	add	r3, r2
 800f300:	b29b      	uxth	r3, r3
 800f302:	b21a      	sxth	r2, r3
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	da02      	bge.n	800f318 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	2200      	movs	r2, #0
 800f316:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f31e:	b29a      	uxth	r2, r3
 800f320:	7d7b      	ldrb	r3, [r7, #21]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4413      	add	r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	b21a      	sxth	r2, r3
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f334:	2b0f      	cmp	r3, #15
 800f336:	dd02      	ble.n	800f33e <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	220f      	movs	r2, #15
 800f33c:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800f33e:	7dbb      	ldrb	r3, [r7, #22]
 800f340:	b29a      	uxth	r2, r3
 800f342:	7d3b      	ldrb	r3, [r7, #20]
 800f344:	3301      	adds	r3, #1
 800f346:	0fd9      	lsrs	r1, r3, #31
 800f348:	440b      	add	r3, r1
 800f34a:	105b      	asrs	r3, r3, #1
 800f34c:	425b      	negs	r3, r3
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4413      	add	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	b21a      	sxth	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f360:	2b00      	cmp	r3, #0
 800f362:	da02      	bge.n	800f36a <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f370:	b29a      	uxth	r2, r3
 800f372:	7d3b      	ldrb	r3, [r7, #20]
 800f374:	b29b      	uxth	r3, r3
 800f376:	4413      	add	r3, r2
 800f378:	b29b      	uxth	r3, r3
 800f37a:	b21a      	sxth	r2, r3
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f386:	2b0f      	cmp	r3, #15
 800f388:	dd02      	ble.n	800f390 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	220f      	movs	r2, #15
 800f38e:	801a      	strh	r2, [r3, #0]
}
 800f390:	bf00      	nop
 800f392:	3718      	adds	r7, #24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	460a      	mov	r2, r1
 800f3a2:	71fb      	strb	r3, [r7, #7]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	f003 0303 	and.w	r3, r3, #3
 800f3b2:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800f3b4:	79bb      	ldrb	r3, [r7, #6]
 800f3b6:	f003 0303 	and.w	r3, r3, #3
 800f3ba:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800f3bc:	7bbb      	ldrb	r3, [r7, #14]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d104      	bne.n	800f3cc <VL53LX_is_aperture_location+0x34>
 800f3c2:	7b7b      	ldrb	r3, [r7, #13]
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d101      	bne.n	800f3cc <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d104      	bne.n	800f3dc <VL53LX_is_aperture_location+0x44>
 800f3d2:	7b7b      	ldrb	r3, [r7, #13]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d101      	bne.n	800f3dc <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800f3ea:	b590      	push	{r4, r7, lr}
 800f3ec:	b08b      	sub	sp, #44	; 0x2c
 800f3ee:	af02      	add	r7, sp, #8
 800f3f0:	603a      	str	r2, [r7, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	71fb      	strb	r3, [r7, #7]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	71bb      	strb	r3, [r7, #6]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800f41c:	2300      	movs	r3, #0
 800f41e:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800f424:	2300      	movs	r3, #0
 800f426:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800f42c:	f107 0416 	add.w	r4, r7, #22
 800f430:	f107 0218 	add.w	r2, r7, #24
 800f434:	79b9      	ldrb	r1, [r7, #6]
 800f436:	79f8      	ldrb	r0, [r7, #7]
 800f438:	f107 0312 	add.w	r3, r7, #18
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	f107 0314 	add.w	r3, r7, #20
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	4623      	mov	r3, r4
 800f446:	f7ff ff30 	bl	800f2aa <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	2200      	movs	r2, #0
 800f44e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f450:	8afb      	ldrh	r3, [r7, #22]
 800f452:	83bb      	strh	r3, [r7, #28]
 800f454:	e04c      	b.n	800f4f0 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f456:	8b3b      	ldrh	r3, [r7, #24]
 800f458:	83fb      	strh	r3, [r7, #30]
 800f45a:	e03d      	b.n	800f4d8 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800f45c:	8bbb      	ldrh	r3, [r7, #28]
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	8bfa      	ldrh	r2, [r7, #30]
 800f462:	b2d1      	uxtb	r1, r2
 800f464:	f107 0211 	add.w	r2, r7, #17
 800f468:	4618      	mov	r0, r3
 800f46a:	f7ff fec9 	bl	800f200 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800f46e:	7c78      	ldrb	r0, [r7, #17]
 800f470:	f107 030e 	add.w	r3, r7, #14
 800f474:	f107 020f 	add.w	r2, r7, #15
 800f478:	f107 0110 	add.w	r1, r7, #16
 800f47c:	f7ff fe9f 	bl	800f1be <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f480:	7c3b      	ldrb	r3, [r7, #16]
 800f482:	461a      	mov	r2, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	4413      	add	r3, r2
 800f488:	781a      	ldrb	r2, [r3, #0]
 800f48a:	7bbb      	ldrb	r3, [r7, #14]
 800f48c:	4013      	ands	r3, r2
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d01b      	beq.n	800f4cc <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800f494:	8bbb      	ldrh	r3, [r7, #28]
 800f496:	b2db      	uxtb	r3, r3
 800f498:	8bfa      	ldrh	r2, [r7, #30]
 800f49a:	b2d2      	uxtb	r2, r2
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff ff7a 	bl	800f398 <VL53LX_is_aperture_location>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f4a8:	7efb      	ldrb	r3, [r7, #27]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d007      	beq.n	800f4be <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	881a      	ldrh	r2, [r3, #0]
 800f4b2:	88bb      	ldrh	r3, [r7, #4]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	801a      	strh	r2, [r3, #0]
 800f4bc:	e006      	b.n	800f4cc <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f4cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	83fb      	strh	r3, [r7, #30]
 800f4d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f4dc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	ddbb      	ble.n	800f45c <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f4e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	83bb      	strh	r3, [r7, #28]
 800f4f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4f4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	ddac      	ble.n	800f456 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	3724      	adds	r7, #36	; 0x24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd90      	pop	{r4, r7, pc}

0800f506 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800f506:	b590      	push	{r4, r7, lr}
 800f508:	b08d      	sub	sp, #52	; 0x34
 800f50a:	af02      	add	r7, sp, #8
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	461a      	mov	r2, r3
 800f514:	4623      	mov	r3, r4
 800f516:	71fb      	strb	r3, [r7, #7]
 800f518:	4603      	mov	r3, r0
 800f51a:	71bb      	strb	r3, [r7, #6]
 800f51c:	460b      	mov	r3, r1
 800f51e:	717b      	strb	r3, [r7, #5]
 800f520:	4613      	mov	r3, r2
 800f522:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800f524:	2300      	movs	r3, #0
 800f526:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800f528:	2300      	movs	r3, #0
 800f52a:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800f540:	2300      	movs	r3, #0
 800f542:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800f544:	2300      	movs	r3, #0
 800f546:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800f554:	2300      	movs	r3, #0
 800f556:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800f558:	2300      	movs	r3, #0
 800f55a:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800f566:	f107 041c 	add.w	r4, r7, #28
 800f56a:	f107 021e 	add.w	r2, r7, #30
 800f56e:	79b9      	ldrb	r1, [r7, #6]
 800f570:	79f8      	ldrb	r0, [r7, #7]
 800f572:	f107 0318 	add.w	r3, r7, #24
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	f107 031a 	add.w	r3, r7, #26
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	4623      	mov	r3, r4
 800f580:	f7ff fe93 	bl	800f2aa <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800f584:	f107 0414 	add.w	r4, r7, #20
 800f588:	f107 0216 	add.w	r2, r7, #22
 800f58c:	7939      	ldrb	r1, [r7, #4]
 800f58e:	7978      	ldrb	r0, [r7, #5]
 800f590:	f107 0310 	add.w	r3, r7, #16
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	f107 0312 	add.w	r3, r7, #18
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	4623      	mov	r3, r4
 800f59e:	f7ff fe84 	bl	800f2aa <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800f5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800f5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f5ae:	8abb      	ldrh	r3, [r7, #20]
 800f5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f5b2:	e06c      	b.n	800f68e <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f5b4:	8afb      	ldrh	r3, [r7, #22]
 800f5b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f5b8:	e05d      	b.n	800f676 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800f5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5c0:	b2d1      	uxtb	r1, r2
 800f5c2:	f107 020f 	add.w	r2, r7, #15
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff fe1a 	bl	800f200 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800f5cc:	7bf8      	ldrb	r0, [r7, #15]
 800f5ce:	f107 030c 	add.w	r3, r7, #12
 800f5d2:	f107 020d 	add.w	r2, r7, #13
 800f5d6:	f107 010e 	add.w	r1, r7, #14
 800f5da:	f7ff fdf0 	bl	800f1be <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e4:	4413      	add	r3, r2
 800f5e6:	781a      	ldrb	r2, [r3, #0]
 800f5e8:	7b3b      	ldrb	r3, [r7, #12]
 800f5ea:	4013      	ands	r3, r2
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d03b      	beq.n	800f66a <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800f5f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5f8:	b2d2      	uxtb	r2, r2
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fecb 	bl	800f398 <VL53LX_is_aperture_location>
 800f602:	4603      	mov	r3, r0
 800f604:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800f608:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d002      	beq.n	800f616 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800f610:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f612:	847b      	strh	r3, [r7, #34]	; 0x22
 800f614:	e002      	b.n	800f61c <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800f616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f61a:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f61c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f620:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f624:	429a      	cmp	r2, r3
 800f626:	db19      	blt.n	800f65c <VL53LX_calc_mm_effective_spads+0x156>
 800f628:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f62c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f630:	429a      	cmp	r2, r3
 800f632:	dc13      	bgt.n	800f65c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f634:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800f638:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f63c:	429a      	cmp	r2, r3
 800f63e:	db0d      	blt.n	800f65c <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800f640:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f644:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f648:	429a      	cmp	r2, r3
 800f64a:	dc07      	bgt.n	800f65c <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800f64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f64e:	881a      	ldrh	r2, [r3, #0]
 800f650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f652:	4413      	add	r3, r2
 800f654:	b29a      	uxth	r2, r3
 800f656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f658:	801a      	strh	r2, [r3, #0]
 800f65a:	e006      	b.n	800f66a <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800f65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f65e:	881a      	ldrh	r2, [r3, #0]
 800f660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f662:	4413      	add	r3, r2
 800f664:	b29a      	uxth	r2, r3
 800f666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f668:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800f66a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f66e:	b29b      	uxth	r3, r3
 800f670:	3301      	adds	r3, #1
 800f672:	b29b      	uxth	r3, r3
 800f674:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f676:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f67a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800f67e:	429a      	cmp	r2, r3
 800f680:	dd9b      	ble.n	800f5ba <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800f682:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f686:	b29b      	uxth	r3, r3
 800f688:	3301      	adds	r3, #1
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f68e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f692:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800f696:	429a      	cmp	r2, r3
 800f698:	dd8c      	ble.n	800f5b4 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800f69a:	bf00      	nop
 800f69c:	bf00      	nop
 800f69e:	372c      	adds	r7, #44	; 0x2c
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd90      	pop	{r4, r7, pc}

0800f6a4 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	607a      	str	r2, [r7, #4]
 800f6b0:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7fd ffa8 	bl	800d60c <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	7c9a      	ldrb	r2, [r3, #18]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	3314      	adds	r3, #20
 800f6e6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	75fb      	strb	r3, [r7, #23]
 800f6ec:	e06b      	b.n	800f7c6 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800f6ee:	7dfb      	ldrb	r3, [r7, #23]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d002      	beq.n	800f6fa <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d034      	beq.n	800f762 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800f6f8:	e05f      	b.n	800f7ba <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f732:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	8a9a      	ldrh	r2, [r3, #20]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	601a      	str	r2, [r3, #0]

			break;
 800f760:	e02b      	b.n	800f7ba <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800f792:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	611a      	str	r2, [r3, #16]
			break;
 800f7b8:	bf00      	nop
		}

		pdata++;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	334c      	adds	r3, #76	; 0x4c
 800f7be:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800f7c0:	7dfb      	ldrb	r3, [r7, #23]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	75fb      	strb	r3, [r7, #23]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	7c9b      	ldrb	r3, [r3, #18]
 800f7ca:	7dfa      	ldrb	r2, [r7, #23]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d38e      	bcc.n	800f6ee <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800f7d0:	bf00      	nop
 800f7d2:	bf00      	nop
 800f7d4:	3718      	adds	r7, #24
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b089      	sub	sp, #36	; 0x24
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800f7f0:	3320      	adds	r3, #32
 800f7f2:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800f7fa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f802:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800f804:	4613      	mov	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	4413      	add	r3, r2
 800f814:	3302      	adds	r3, #2
 800f816:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800f83c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3724      	adds	r7, #36	; 0x24
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b08b      	sub	sp, #44	; 0x2c
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f856:	2300      	movs	r3, #0
 800f858:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800f864:	3320      	adds	r3, #32
 800f866:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800f86e:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f876:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800f87e:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800f880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f884:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800f886:	7bfa      	ldrb	r2, [r7, #15]
 800f888:	6939      	ldr	r1, [r7, #16]
 800f88a:	4613      	mov	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4413      	add	r3, r2
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	440b      	add	r3, r1
 800f894:	3306      	adds	r3, #6
 800f896:	2200      	movs	r2, #0
 800f898:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f8a0:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8a8:	e01a      	b.n	800f8e0 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800f8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	214c      	movs	r1, #76	; 0x4c
 800f8b2:	fb01 f303 	mul.w	r3, r1, r3
 800f8b6:	4413      	add	r3, r2
 800f8b8:	334a      	adds	r3, #74	; 0x4a
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d209      	bcs.n	800f8d6 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800f8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800f8c6:	683a      	ldr	r2, [r7, #0]
 800f8c8:	214c      	movs	r1, #76	; 0x4c
 800f8ca:	fb01 f303 	mul.w	r3, r1, r3
 800f8ce:	4413      	add	r3, r2
 800f8d0:	334a      	adds	r3, #74	; 0x4a
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800f8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8da:	3301      	adds	r3, #1
 800f8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	7c9b      	ldrb	r3, [r3, #18]
 800f8e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d3de      	bcc.n	800f8aa <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800f8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d103      	bne.n	800f8fa <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800f8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8f6:	623b      	str	r3, [r7, #32]
 800f8f8:	e00e      	b.n	800f918 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800f8fa:	89bb      	ldrh	r3, [r7, #12]
 800f8fc:	039b      	lsls	r3, r3, #14
 800f8fe:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800f900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	fbb2 f3f3 	udiv	r3, r2, r3
 800f908:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800f90a:	6a3b      	ldr	r3, [r7, #32]
 800f90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f910:	d302      	bcc.n	800f918 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800f912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f916:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800f918:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800f91e:	6939      	ldr	r1, [r7, #16]
 800f920:	4613      	mov	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	4413      	add	r3, r2
 800f926:	005b      	lsls	r3, r3, #1
 800f928:	440b      	add	r3, r1
 800f92a:	3306      	adds	r3, #6
 800f92c:	4602      	mov	r2, r0
 800f92e:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800f930:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f934:	4618      	mov	r0, r3
 800f936:	372c      	adds	r7, #44	; 0x2c
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b08a      	sub	sp, #40	; 0x28
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f948:	2300      	movs	r3, #0
 800f94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	332c      	adds	r3, #44	; 0x2c
 800f956:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800f958:	6a3b      	ldr	r3, [r7, #32]
 800f95a:	33c2      	adds	r3, #194	; 0xc2
 800f95c:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800f964:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	3302      	adds	r3, #2
 800f96a:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	785b      	ldrb	r3, [r3, #1]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f97c:	461a      	mov	r2, r3
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	4413      	add	r3, r2
 800f982:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f986:	2b01      	cmp	r3, #1
 800f988:	d11e      	bne.n	800f9c8 <VL53LX_multizone_hist_bins_update+0x88>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10b      	bne.n	800f9a8 <VL53LX_multizone_hist_bins_update+0x68>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d05d      	beq.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	719a      	strb	r2, [r3, #6]
 800f9c6:	e050      	b.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	4413      	add	r3, r2
 800f9d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d11e      	bne.n	800fa1a <VL53LX_multizone_hist_bins_update+0xda>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800f9dc:	7bfb      	ldrb	r3, [r7, #15]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10b      	bne.n	800f9fa <VL53LX_multizone_hist_bins_update+0xba>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800f9fa:	7bfb      	ldrb	r3, [r7, #15]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d034      	beq.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	719a      	strb	r2, [r3, #6]
 800fa18:	e027      	b.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fa20:	461a      	mov	r2, r3
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	4413      	add	r3, r2
 800fa26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d11d      	bne.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800fa2e:	7bfb      	ldrb	r3, [r7, #15]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10b      	bne.n	800fa4c <VL53LX_multizone_hist_bins_update+0x10c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800fa4c:	7bfb      	ldrb	r3, [r7, #15]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00b      	beq.n	800fa6a <VL53LX_multizone_hist_bins_update+0x12a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800fa6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d109      	bne.n	800fa86 <VL53LX_multizone_hist_bins_update+0x146>
		VL53LX_copy_hist_bins_to_static_cfg(
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	f203 3136 	addw	r1, r3, #822	; 0x336
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6978      	ldr	r0, [r7, #20]
 800fa82:	f7fd f997 	bl	800cdb4 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800fa86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3728      	adds	r7, #40	; 0x28
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b089      	sub	sp, #36	; 0x24
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	60f8      	str	r0, [r7, #12]
 800fa9a:	607a      	str	r2, [r7, #4]
 800fa9c:	603b      	str	r3, [r7, #0]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800faa2:	2300      	movs	r3, #0
 800faa4:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	f893 3357 	ldrb.w	r3, [r3, #855]	; 0x357
 800fab0:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800fab2:	7dfb      	ldrb	r3, [r7, #23]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d103      	bne.n	800fac0 <VL53LX_update_internal_stream_counters+0x2e>


		*pinternal_stream_count = external_stream_count;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	7afa      	ldrb	r2, [r7, #11]
 800fabc:	701a      	strb	r2, [r3, #0]
 800fabe:	e01e      	b.n	800fafe <VL53LX_update_internal_stream_counters+0x6c>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	461a      	mov	r2, r3
 800fac6:	7dfb      	ldrb	r3, [r7, #23]
 800fac8:	3b01      	subs	r3, #1
 800faca:	429a      	cmp	r2, r3
 800facc:	d111      	bne.n	800faf2 <VL53LX_update_internal_stream_counters+0x60>


		if (*pinternal_stream_count == 0xFF)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	2bff      	cmp	r3, #255	; 0xff
 800fad4:	d103      	bne.n	800fade <VL53LX_update_internal_stream_counters+0x4c>
			*pinternal_stream_count = 0x80;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2280      	movs	r2, #128	; 0x80
 800fada:	701a      	strb	r2, [r3, #0]
 800fadc:	e005      	b.n	800faea <VL53LX_update_internal_stream_counters+0x58>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	3301      	adds	r3, #1
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2200      	movs	r2, #0
 800faee:	701a      	strb	r2, [r3, #0]
 800faf0:	e005      	b.n	800fafe <VL53LX_update_internal_stream_counters+0x6c>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	3301      	adds	r3, #1
 800faf8:	b2da      	uxtb	r2, r3
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800fafe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3724      	adds	r7, #36	; 0x24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800fb0e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb12:	b0a2      	sub	sp, #136	; 0x88
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800fb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb20:	673b      	str	r3, [r7, #112]	; 0x70
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800fb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb24:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800fb28:	3320      	adds	r3, #32
 800fb2a:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53LX_smudge_corrector_config_t *pconfig =
 800fb2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb2e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800fb32:	330c      	adds	r3, #12
 800fb34:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800fb36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb38:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800fb3c:	3310      	adds	r3, #16
 800fb3e:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800fb40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb42:	663b      	str	r3, [r7, #96]	; 0x60
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800fb44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb4a:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800fb4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800fb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800fb58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800fb5c:	4413      	add	r3, r2
 800fb5e:	2200      	movs	r2, #0
 800fb60:	461c      	mov	r4, r3
 800fb62:	4615      	mov	r5, r2
 800fb64:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	if (peak_duration_us == 0)
 800fb68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d103      	bne.n	800fb78 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x6a>
		peak_duration_us = 1000;
 800fb70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800fb78:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	462b      	mov	r3, r5
 800fb80:	f04f 0000 	mov.w	r0, #0
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	0159      	lsls	r1, r3, #5
 800fb8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fb8e:	0150      	lsls	r0, r2, #5
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	ebb2 0804 	subs.w	r8, r2, r4
 800fb98:	eb63 0905 	sbc.w	r9, r3, r5
 800fb9c:	f04f 0200 	mov.w	r2, #0
 800fba0:	f04f 0300 	mov.w	r3, #0
 800fba4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800fba8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800fbac:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800fbb0:	4690      	mov	r8, r2
 800fbb2:	4699      	mov	r9, r3
 800fbb4:	eb18 0304 	adds.w	r3, r8, r4
 800fbb8:	633b      	str	r3, [r7, #48]	; 0x30
 800fbba:	eb49 0305 	adc.w	r3, r9, r5
 800fbbe:	637b      	str	r3, [r7, #52]	; 0x34
 800fbc0:	f04f 0200 	mov.w	r2, #0
 800fbc4:	f04f 0300 	mov.w	r3, #0
 800fbc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800fbcc:	4629      	mov	r1, r5
 800fbce:	00cb      	lsls	r3, r1, #3
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	00ca      	lsls	r2, r1, #3
 800fbda:	4610      	mov	r0, r2
 800fbdc:	4619      	mov	r1, r3
 800fbde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	643b      	str	r3, [r7, #64]	; 0x40
 800fbe6:	647a      	str	r2, [r7, #68]	; 0x44
 800fbe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fbec:	f7f0 ff6e 	bl	8000acc <__aeabi_uldivmod>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800fbf8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	462b      	mov	r3, r5
 800fc00:	f04f 0000 	mov.w	r0, #0
 800fc04:	f04f 0100 	mov.w	r1, #0
 800fc08:	0159      	lsls	r1, r3, #5
 800fc0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fc0e:	0150      	lsls	r0, r2, #5
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	ebb2 0a04 	subs.w	sl, r2, r4
 800fc18:	eb63 0b05 	sbc.w	fp, r3, r5
 800fc1c:	f04f 0200 	mov.w	r2, #0
 800fc20:	f04f 0300 	mov.w	r3, #0
 800fc24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fc28:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800fc2c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800fc30:	4692      	mov	sl, r2
 800fc32:	469b      	mov	fp, r3
 800fc34:	eb1a 0304 	adds.w	r3, sl, r4
 800fc38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc3a:	eb4b 0305 	adc.w	r3, fp, r5
 800fc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc40:	f04f 0200 	mov.w	r2, #0
 800fc44:	f04f 0300 	mov.w	r3, #0
 800fc48:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	00cb      	lsls	r3, r1, #3
 800fc50:	4621      	mov	r1, r4
 800fc52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fc56:	4621      	mov	r1, r4
 800fc58:	00ca      	lsls	r2, r1, #3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc62:	2200      	movs	r2, #0
 800fc64:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc66:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fc68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fc6c:	f7f0 ff2e 	bl	8000acc <__aeabi_uldivmod>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800fc78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc7a:	689b      	ldr	r3, [r3, #8]
 800fc7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc7e:	8ad2      	ldrh	r2, [r2, #22]
 800fc80:	fb02 f303 	mul.w	r3, r2, r3
 800fc84:	2200      	movs	r2, #0
 800fc86:	623b      	str	r3, [r7, #32]
 800fc88:	627a      	str	r2, [r7, #36]	; 0x24
 800fc8a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800fc8e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800fc92:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fc96:	4313      	orrs	r3, r2
 800fc98:	d105      	bne.n	800fca6 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800fc9a:	f04f 0201 	mov.w	r2, #1
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800fca6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	f04f 0400 	mov.w	r4, #0
 800fcb2:	f04f 0500 	mov.w	r5, #0
 800fcb6:	015d      	lsls	r5, r3, #5
 800fcb8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800fcbc:	0154      	lsls	r4, r2, #5
 800fcbe:	4622      	mov	r2, r4
 800fcc0:	462b      	mov	r3, r5
 800fcc2:	1a14      	subs	r4, r2, r0
 800fcc4:	61bc      	str	r4, [r7, #24]
 800fcc6:	eb63 0301 	sbc.w	r3, r3, r1
 800fcca:	61fb      	str	r3, [r7, #28]
 800fccc:	f04f 0200 	mov.w	r2, #0
 800fcd0:	f04f 0300 	mov.w	r3, #0
 800fcd4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800fcd8:	464c      	mov	r4, r9
 800fcda:	00a3      	lsls	r3, r4, #2
 800fcdc:	4644      	mov	r4, r8
 800fcde:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800fce2:	4644      	mov	r4, r8
 800fce4:	00a2      	lsls	r2, r4, #2
 800fce6:	4614      	mov	r4, r2
 800fce8:	461d      	mov	r5, r3
 800fcea:	4623      	mov	r3, r4
 800fcec:	181b      	adds	r3, r3, r0
 800fcee:	613b      	str	r3, [r7, #16]
 800fcf0:	462b      	mov	r3, r5
 800fcf2:	eb41 0303 	adc.w	r3, r1, r3
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	f04f 0200 	mov.w	r2, #0
 800fcfc:	f04f 0300 	mov.w	r3, #0
 800fd00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800fd04:	4629      	mov	r1, r5
 800fd06:	02cb      	lsls	r3, r1, #11
 800fd08:	4621      	mov	r1, r4
 800fd0a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800fd0e:	4621      	mov	r1, r4
 800fd10:	02ca      	lsls	r2, r1, #11
 800fd12:	461c      	mov	r4, r3
 800fd14:	4613      	mov	r3, r2
 800fd16:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800fd1a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fd1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fd22:	f7f0 fed3 	bl	8000acc <__aeabi_uldivmod>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800fd2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	f04f 0400 	mov.w	r4, #0
 800fd3a:	f04f 0500 	mov.w	r5, #0
 800fd3e:	015d      	lsls	r5, r3, #5
 800fd40:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800fd44:	0154      	lsls	r4, r2, #5
 800fd46:	4622      	mov	r2, r4
 800fd48:	462b      	mov	r3, r5
 800fd4a:	1a14      	subs	r4, r2, r0
 800fd4c:	60bc      	str	r4, [r7, #8]
 800fd4e:	eb63 0301 	sbc.w	r3, r3, r1
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	f04f 0200 	mov.w	r2, #0
 800fd58:	f04f 0300 	mov.w	r3, #0
 800fd5c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800fd60:	464c      	mov	r4, r9
 800fd62:	00a3      	lsls	r3, r4, #2
 800fd64:	4644      	mov	r4, r8
 800fd66:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800fd6a:	4644      	mov	r4, r8
 800fd6c:	00a2      	lsls	r2, r4, #2
 800fd6e:	4614      	mov	r4, r2
 800fd70:	461d      	mov	r5, r3
 800fd72:	4623      	mov	r3, r4
 800fd74:	181b      	adds	r3, r3, r0
 800fd76:	603b      	str	r3, [r7, #0]
 800fd78:	462b      	mov	r3, r5
 800fd7a:	eb41 0303 	adc.w	r3, r1, r3
 800fd7e:	607b      	str	r3, [r7, #4]
 800fd80:	f04f 0200 	mov.w	r2, #0
 800fd84:	f04f 0300 	mov.w	r3, #0
 800fd88:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	02cb      	lsls	r3, r1, #11
 800fd90:	4621      	mov	r1, r4
 800fd92:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800fd96:	4621      	mov	r1, r4
 800fd98:	02ca      	lsls	r2, r1, #11
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800fda2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fda6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fdaa:	f7f0 fe8f 	bl	8000acc <__aeabi_uldivmod>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800fdb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdba:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800fdbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d802      	bhi.n	800fdca <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800fdc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800fdca:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3788      	adds	r7, #136	; 0x88
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fdd8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b094      	sub	sp, #80	; 0x50
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	633b      	str	r3, [r7, #48]	; 0x30
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf2:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800fdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfa:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800fdfe:	3314      	adds	r3, #20
 800fe00:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t max, nXtalk, cXtalk;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800fe02:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d107      	bne.n	800fe1a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x42>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	889b      	ldrh	r3, [r3, #4]
 800fe0e:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	609a      	str	r2, [r3, #8]
 800fe18:	e002      	b.n	800fe20 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x48>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800fe20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	64bb      	str	r3, [r7, #72]	; 0x48
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe28:	899b      	ldrh	r3, [r3, #12]
 800fe2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe30:	89db      	ldrh	r3, [r3, #14]
 800fe32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x72>
		(pconfig->scaler_calc_method == 1)) &&
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d126      	bne.n	800fe98 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800fe4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4c:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d022      	beq.n	800fe98 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc0>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800fe52:	f107 0317 	add.w	r3, r7, #23
 800fe56:	4619      	mov	r1, r3
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f000 fe9d 	bl	8010b98 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800fe5e:	7dfb      	ldrb	r3, [r7, #23]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d101      	bne.n	800fe68 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x90>
			histo_merge_nb = 1;
 800fe64:	2301      	movs	r3, #1
 800fe66:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800fe68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d003      	beq.n	800fe7a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa2>
			orig_xtalk_offset =
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe78:	e006      	b.n	800fe88 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800fe7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe80:	3202      	adds	r2, #2
 800fe82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe86:	64bb      	str	r3, [r7, #72]	; 0x48

		orig_x_gradient =
 800fe88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8a:	889b      	ldrh	r3, [r3, #4]
 800fe8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	88db      	ldrh	r3, [r3, #6]
 800fe94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d10a      	bne.n	800feb8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
 800fea2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		pout->gradient_zero_flag |= 0x01;
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	795b      	ldrb	r3, [r3, #5]
 800feae:	f043 0301 	orr.w	r3, r3, #1
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10a      	bne.n	800fed8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800fec2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d106      	bne.n	800fed8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x02;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	795b      	ldrb	r3, [r3, #5]
 800fece:	f043 0302 	orr.w	r3, r3, #2
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800fed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10a>
		orig_xtalk_offset = 1;
 800fede:	2301      	movs	r3, #1
 800fee0:	64bb      	str	r3, [r7, #72]	; 0x48



	if (pconfig->user_scaler_set == 1) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d108      	bne.n	800fefe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x126>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fef0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800fefc:	e019      	b.n	800ff32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800fefe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ff02:	019b      	lsls	r3, r3, #6
 800ff04:	461a      	mov	r2, r3
 800ff06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ff16:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800ff18:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ff1c:	019b      	lsls	r3, r3, #6
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ff30:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d12a      	bne.n	800ff92 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1ba>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	689b      	ldr	r3, [r3, #8]
 800ff40:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800ff44:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ff48:	63fb      	str	r3, [r7, #60]	; 0x3c
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ff4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4c:	119b      	asrs	r3, r3, #6
 800ff4e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800ff50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff56:	db02      	blt.n	800ff5e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x186>
			itemp32 = 0xFFFF;
 800ff58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff5c:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ff5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff60:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800ff6e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ff72:	63fb      	str	r3, [r7, #60]	; 0x3c
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ff74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff76:	119b      	asrs	r3, r3, #6
 800ff78:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800ff7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff80:	db02      	blt.n	800ff88 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b0>
			itemp32 = 0xFFFF;
 800ff82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff86:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ff88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	81da      	strh	r2, [r3, #14]
 800ff90:	e042      	b.n	8010018 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>
	} else if (pconfig->scaler_calc_method == 1) {
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d13d      	bne.n	8010018 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x240>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ffa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffa2:	1ad3      	subs	r3, r2, r3
 800ffa4:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800ffa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	da00      	bge.n	800ffae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d6>
 800ffac:	330f      	adds	r3, #15
 800ffae:	111b      	asrs	r3, r3, #4
 800ffb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800ffb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800ffb8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800ffbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffbe:	4413      	add	r3, r2
 800ffc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 800ffc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffc8:	db02      	blt.n	800ffd0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1f8>
			itemp32 = 0xFFFF;
 800ffca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffce:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ffd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd2:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ffdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800ffe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffe4:	4a52      	ldr	r2, [pc, #328]	; (8010130 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800ffe6:	fb82 1203 	smull	r1, r2, r2, r3
 800ffea:	1152      	asrs	r2, r2, #5
 800ffec:	17db      	asrs	r3, r3, #31
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 << 2;
 800fff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	63fb      	str	r3, [r7, #60]	; 0x3c
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800fff8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800fffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fffe:	4413      	add	r3, r2
 8010000:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (itemp32 > 0xFFFF)
 8010002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010008:	db02      	blt.n	8010010 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x238>
			itemp32 = 0xFFFF;
 801000a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801000e:	63fb      	str	r3, [r7, #60]	; 0x3c

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 8010010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010012:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	785b      	ldrb	r3, [r3, #1]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d179      	bne.n	8010114 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 8010020:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8010024:	2b01      	cmp	r3, #1
 8010026:	d075      	beq.n	8010114 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	2201      	movs	r2, #1
 801002c:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	627b      	str	r3, [r7, #36]	; 0x24

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8010034:	f107 0317 	add.w	r3, r7, #23
 8010038:	4619      	mov	r1, r3
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f000 fdac 	bl	8010b98 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 8010040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010042:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8010046:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 8010048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004a:	3308      	adds	r3, #8
 801004c:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((histo_merge_nb > 0) &&
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d043      	beq.n	80100dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8010054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010056:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
		if ((histo_merge_nb > 0) &&
 801005a:	2b01      	cmp	r3, #1
 801005c:	d13e      	bne.n	80100dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	2b00      	cmp	r3, #0
 8010062:	d03b      	beq.n	80100dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 8010064:	7dfb      	ldrb	r3, [r7, #23]
 8010066:	1e5a      	subs	r2, r3, #1
			cXtalk =
 8010068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006a:	3202      	adds	r2, #2
 801006c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010070:	61fb      	str	r3, [r7, #28]
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010078:	fb03 f202 	mul.w	r2, r3, r2
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010082:	61bb      	str	r3, [r7, #24]
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010088:	69ba      	ldr	r2, [r7, #24]
 801008a:	429a      	cmp	r2, r3
 801008c:	d303      	bcc.n	8010096 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2200      	movs	r2, #0
 8010092:	719a      	strb	r2, [r3, #6]
 8010094:	e022      	b.n	80100dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else if (SmudgeFactor > 0)
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d01f      	beq.n	80100dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
				for (i = 0; i < max; i++) {
 801009c:	2300      	movs	r3, #0
 801009e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100a2:	e016      	b.n	80100d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2fa>
				*pcpo *= 1000;
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80100ac:	fb03 f202 	mul.w	r2, r3, r2
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	601a      	str	r2, [r3, #0]
				*pcpo /= SmudgeFactor;
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	601a      	str	r2, [r3, #0]
				pcpo++;
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	3304      	adds	r3, #4
 80100c6:	63bb      	str	r3, [r7, #56]	; 0x38
				for (i = 0; i < max; i++) {
 80100c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100cc:	3301      	adds	r3, #1
 80100ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100d6:	6a3a      	ldr	r2, [r7, #32]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d8e3      	bhi.n	80100a4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2cc>
				}
		}
		if (pout->new_xtalk_applied_flag) {
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	799b      	ldrb	r3, [r3, #6]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d017      	beq.n	8010114 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	789b      	ldrb	r3, [r3, #2]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d105      	bne.n	8010114 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2200      	movs	r2, #0
 8010112:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 8010114:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8010118:	2b01      	cmp	r3, #1
 801011a:	d002      	beq.n	8010122 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2201      	movs	r2, #1
 8010120:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010122:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010126:	4618      	mov	r0, r3
 8010128:	3750      	adds	r7, #80	; 0x50
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	66666667 	.word	0x66666667

08010134 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 8010134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010138:	b0a2      	sub	sp, #136	; 0x88
 801013a:	af02      	add	r7, sp, #8
 801013c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 801013e:	2300      	movs	r3, #0
 8010140:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 801014e:	3320      	adds	r3, #32
 8010150:	667b      	str	r3, [r7, #100]	; 0x64
	VL53LX_smudge_corrector_config_t *pconfig =
 8010152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010154:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8010158:	330c      	adds	r3, #12
 801015a:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 801015c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801015e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8010162:	3310      	adds	r3, #16
 8010164:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 8010166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010168:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801016c:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 801016e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010170:	657b      	str	r3, [r7, #84]	; 0x54
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 8010172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010174:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8010178:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 8010196:	f04f 0200 	mov.w	r2, #0
 801019a:	f04f 0300 	mov.w	r3, #0
 801019e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 80101a2:	2300      	movs	r3, #0
 80101a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 80101a8:	2300      	movs	r3, #0
 80101aa:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 80101ac:	2300      	movs	r3, #0
 80101ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80101c4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80101c8:	4619      	mov	r1, r3
 80101ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101cc:	f000 fce4 	bl	8010b98 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 80101d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d004      	beq.n	80101e2 <VL53LX_dynamic_xtalk_correction_corrector+0xae>
		(pdev->tuning_parms.tp_hist_merge != 1))
 80101d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101da:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
	if ((histo_merge_nb == 0) ||
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d002      	beq.n	80101e8 <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		histo_merge_nb = 1;
 80101e2:	2301      	movs	r3, #1
 80101e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 80101e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80101ea:	f000 fb10 	bl	801080e <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 80101ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00a      	beq.n	801020c <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 80101f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101fe:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 8010202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010204:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8010208:	429a      	cmp	r2, r3
 801020a:	d901      	bls.n	8010210 <VL53LX_dynamic_xtalk_correction_corrector+0xdc>
 801020c:	2301      	movs	r3, #1
 801020e:	e000      	b.n	8010212 <VL53LX_dynamic_xtalk_correction_corrector+0xde>
 8010210:	2300      	movs	r3, #0
 8010212:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8010216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010218:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 801021c:	2b01      	cmp	r3, #1
 801021e:	d106      	bne.n	801022e <VL53LX_dynamic_xtalk_correction_corrector+0xfa>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 8010220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010222:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 8010226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 801022a:	429a      	cmp	r2, r3
 801022c:	d101      	bne.n	8010232 <VL53LX_dynamic_xtalk_correction_corrector+0xfe>
 801022e:	2301      	movs	r3, #1
 8010230:	e000      	b.n	8010234 <VL53LX_dynamic_xtalk_correction_corrector+0x100>
 8010232:	2300      	movs	r3, #0
	merging_complete =
 8010234:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 8010238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801023a:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 801023c:	2b01      	cmp	r3, #1
 801023e:	d10e      	bne.n	801025e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pconfig->smudge_corr_enabled == 1) &&
 8010240:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00a      	beq.n	801025e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
		(pR->xmonitor.range_status
 8010248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801024a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 801024e:	2b09      	cmp	r3, #9
 8010250:	d105      	bne.n	801025e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8010252:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <VL53LX_dynamic_xtalk_correction_corrector+0x12a>
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <VL53LX_dynamic_xtalk_correction_corrector+0x12c>
 801025e:	2300      	movs	r3, #0
	run_smudge_detection =
 8010260:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 8010264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010266:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 801026a:	2b09      	cmp	r3, #9
 801026c:	f000 80a6 	beq.w	80103bc <VL53LX_dynamic_xtalk_correction_corrector+0x288>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 8010270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010272:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8010274:	2b01      	cmp	r3, #1
 8010276:	f040 80a1 	bne.w	80103bc <VL53LX_dynamic_xtalk_correction_corrector+0x288>

		run_nodetect = 2;
 801027a:	2302      	movs	r3, #2
 801027c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 8010280:	2300      	movs	r3, #0
 8010282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010286:	e02d      	b.n	80102e4 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			if (pR->VL53LX_p_003[i].range_status ==
 8010288:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 801028c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801028e:	234c      	movs	r3, #76	; 0x4c
 8010290:	fb01 f303 	mul.w	r3, r1, r3
 8010294:	4413      	add	r3, r2
 8010296:	335e      	adds	r3, #94	; 0x5e
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2b09      	cmp	r3, #9
 801029c:	d11d      	bne.n	80102da <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 801029e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 80102a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102a4:	234c      	movs	r3, #76	; 0x4c
 80102a6:	fb01 f303 	mul.w	r3, r1, r3
 80102aa:	4413      	add	r3, r2
 80102ac:	335a      	adds	r3, #90	; 0x5a
 80102ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102b2:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 80102b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 80102b8:	429a      	cmp	r2, r3
 80102ba:	dc03      	bgt.n	80102c4 <VL53LX_dynamic_xtalk_correction_corrector+0x190>
					run_nodetect = 0;
 80102bc:	2300      	movs	r3, #0
 80102be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80102c2:	e00a      	b.n	80102da <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
				} else {
					if (run_nodetect == 2) {
 80102c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	d106      	bne.n	80102da <VL53LX_dynamic_xtalk_correction_corrector+0x1a6>
						run_nodetect = 1;
 80102cc:	2301      	movs	r3, #1
 80102ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 80102d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80102d6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 80102da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80102de:	3301      	adds	r3, #1
 80102e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80102e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e6:	7c9a      	ldrb	r2, [r3, #18]
 80102e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d3cb      	bcc.n	8010288 <VL53LX_dynamic_xtalk_correction_corrector+0x154>
					}
				}
			}
		}

		if (run_nodetect == 2)
 80102f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d102      	bne.n	80102fe <VL53LX_dynamic_xtalk_correction_corrector+0x1ca>

			run_nodetect = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 80102fe:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 8010302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010304:	234c      	movs	r3, #76	; 0x4c
 8010306:	fb01 f303 	mul.w	r3, r1, r3
 801030a:	4413      	add	r3, r2
 801030c:	3348      	adds	r3, #72	; 0x48
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	867b      	strh	r3, [r7, #50]	; 0x32

		if (run_nodetect == 1) {
 8010312:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010316:	2b01      	cmp	r3, #1
 8010318:	d150      	bne.n	80103bc <VL53LX_dynamic_xtalk_correction_corrector+0x288>




			utemp64 = 1000 * ((uint64_t)amr);
 801031a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801031c:	2200      	movs	r2, #0
 801031e:	469a      	mov	sl, r3
 8010320:	4693      	mov	fp, r2
 8010322:	4652      	mov	r2, sl
 8010324:	465b      	mov	r3, fp
 8010326:	f04f 0000 	mov.w	r0, #0
 801032a:	f04f 0100 	mov.w	r1, #0
 801032e:	0159      	lsls	r1, r3, #5
 8010330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010334:	0150      	lsls	r0, r2, #5
 8010336:	4602      	mov	r2, r0
 8010338:	460b      	mov	r3, r1
 801033a:	ebb2 040a 	subs.w	r4, r2, sl
 801033e:	eb63 050b 	sbc.w	r5, r3, fp
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	f04f 0300 	mov.w	r3, #0
 801034a:	00ab      	lsls	r3, r5, #2
 801034c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010350:	00a2      	lsls	r2, r4, #2
 8010352:	4614      	mov	r4, r2
 8010354:	461d      	mov	r5, r3
 8010356:	eb14 080a 	adds.w	r8, r4, sl
 801035a:	eb45 090b 	adc.w	r9, r5, fp
 801035e:	f04f 0200 	mov.w	r2, #0
 8010362:	f04f 0300 	mov.w	r3, #0
 8010366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801036a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801036e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010372:	4690      	mov	r8, r2
 8010374:	4699      	mov	r9, r3
 8010376:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 801037a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801037e:	f04f 0200 	mov.w	r2, #0
 8010382:	f04f 0300 	mov.w	r3, #0
 8010386:	024b      	lsls	r3, r1, #9
 8010388:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 801038c:	0242      	lsls	r2, r0, #9
 801038e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8010392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010396:	2200      	movs	r2, #0
 8010398:	61bb      	str	r3, [r7, #24]
 801039a:	61fa      	str	r2, [r7, #28]
 801039c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80103a0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80103a4:	4621      	mov	r1, r4
 80103a6:	428a      	cmp	r2, r1
 80103a8:	4629      	mov	r1, r5
 80103aa:	418b      	sbcs	r3, r1
 80103ac:	d203      	bcs.n	80103b6 <VL53LX_dynamic_xtalk_correction_corrector+0x282>
				run_nodetect = 1;
 80103ae:	2301      	movs	r3, #1
 80103b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80103b4:	e002      	b.n	80103bc <VL53LX_dynamic_xtalk_correction_corrector+0x288>
			else
				run_nodetect = 0;
 80103b6:	2300      	movs	r3, #0
 80103b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 80103bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f000 810b 	beq.w	80105dc <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>

		pint->nodetect_counter = 0;
 80103c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c8:	2200      	movs	r2, #0
 80103ca:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 80103cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103ce:	f7ff fb9e 	bl	800fb0e <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 80103d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103d4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80103d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 80103da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 80103e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 80103e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103e8:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 80103ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80103f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f2:	1ad2      	subs	r2, r2, r3
 80103f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f6:	4413      	add	r3, r2
 80103f8:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 80103fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	da02      	bge.n	8010406 <VL53LX_dynamic_xtalk_correction_corrector+0x2d2>
			itemp32 = itemp32 * (-1);
 8010400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010402:	425b      	negs	r3, r3
 8010404:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8010406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	461a      	mov	r2, r3
 801040c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801040e:	4293      	cmp	r3, r2
 8010410:	dd0c      	ble.n	801042c <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 8010412:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 8010414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 8010416:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 8010418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801041a:	429a      	cmp	r2, r3
 801041c:	da03      	bge.n	8010426 <VL53LX_dynamic_xtalk_correction_corrector+0x2f2>
				pout->single_xtalk_delta_flag = 1;
 801041e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010420:	2201      	movs	r2, #1
 8010422:	709a      	strb	r2, [r3, #2]
 8010424:	e002      	b.n	801042c <VL53LX_dynamic_xtalk_correction_corrector+0x2f8>
			} else {
				pout->single_xtalk_delta_flag = 2;
 8010426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010428:	2202      	movs	r2, #2
 801042a:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 801042c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010434:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 8010436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	429a      	cmp	r2, r3
 8010440:	d906      	bls.n	8010450 <VL53LX_dynamic_xtalk_correction_corrector+0x31c>
			pout->sample_limit_exceeded_flag = 1;
 8010442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010444:	2201      	movs	r2, #1
 8010446:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 8010448:	2302      	movs	r3, #2
 801044a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801044e:	e014      	b.n	801047a <VL53LX_dynamic_xtalk_correction_corrector+0x346>
		} else {
			pint->accumulator = pint->accumulator +
 8010450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010452:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010458:	2000      	movs	r0, #0
 801045a:	6139      	str	r1, [r7, #16]
 801045c:	6178      	str	r0, [r7, #20]
 801045e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010462:	4621      	mov	r1, r4
 8010464:	1851      	adds	r1, r2, r1
 8010466:	60b9      	str	r1, [r7, #8]
 8010468:	4629      	mov	r1, r5
 801046a:	eb43 0101 	adc.w	r1, r3, r1
 801046e:	60f9      	str	r1, [r7, #12]
 8010470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010472:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010476:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 801047a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d202      	bcs.n	801048c <VL53LX_dynamic_xtalk_correction_corrector+0x358>
			continue_processing = CONT_NEXT_LOOP;
 8010486:	2301      	movs	r3, #1
 8010488:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 801048c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801048e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2200      	movs	r2, #0
 8010498:	603b      	str	r3, [r7, #0]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104a0:	f7f0 fb14 	bl	8000acc <__aeabi_uldivmod>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
		xtalk_offset_out =
 80104a8:	4613      	mov	r3, r2
 80104aa:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 80104ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	1ad2      	subs	r2, r2, r3
 80104b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b4:	4413      	add	r3, r2
 80104b6:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 80104b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	da02      	bge.n	80104c4 <VL53LX_dynamic_xtalk_correction_corrector+0x390>
			itemp32 = itemp32 * (-1);
 80104be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104c0:	425b      	negs	r3, r3
 80104c2:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 80104c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d112      	bne.n	80104f2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 80104cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104ce:	69db      	ldr	r3, [r3, #28]
 80104d0:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 80104d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104d4:	4293      	cmp	r3, r2
 80104d6:	db0c      	blt.n	80104f2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 80104d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 80104da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 80104dc:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 80104de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104e0:	429a      	cmp	r2, r3
 80104e2:	da03      	bge.n	80104ec <VL53LX_dynamic_xtalk_correction_corrector+0x3b8>
				pout->averaged_xtalk_delta_flag = 1;
 80104e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104e6:	2201      	movs	r2, #1
 80104e8:	70da      	strb	r2, [r3, #3]
 80104ea:	e002      	b.n	80104f2 <VL53LX_dynamic_xtalk_correction_corrector+0x3be>
			else
				pout->averaged_xtalk_delta_flag = 2;
 80104ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ee:	2202      	movs	r2, #2
 80104f0:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 80104f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d108      	bne.n	801050c <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 80104fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104fc:	69db      	ldr	r3, [r3, #28]
 80104fe:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 8010500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010502:	4293      	cmp	r3, r2
 8010504:	da02      	bge.n	801050c <VL53LX_dynamic_xtalk_correction_corrector+0x3d8>
			)

			continue_processing = CONT_RESET;
 8010506:	2302      	movs	r3, #2
 8010508:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 801050c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801050e:	2200      	movs	r2, #0
 8010510:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8010512:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010516:	2b00      	cmp	r3, #0
 8010518:	d112      	bne.n	8010540 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			(pconfig->smudge_corr_clip_limit != 0)) {
 801051a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801051c:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00e      	beq.n	8010540 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8010522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010524:	6a1b      	ldr	r3, [r3, #32]
 8010526:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801052a:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 801052e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010530:	429a      	cmp	r2, r3
 8010532:	d905      	bls.n	8010540 <VL53LX_dynamic_xtalk_correction_corrector+0x40c>
				pout->smudge_corr_clipped = 1;
 8010534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010536:	2201      	movs	r2, #1
 8010538:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 801053a:	2302      	movs	r3, #2
 801053c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 8010540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010542:	7c1b      	ldrb	r3, [r3, #16]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d007      	beq.n	8010558 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 8010548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801054a:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 801054c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801054e:	429a      	cmp	r2, r3
 8010550:	d902      	bls.n	8010558 <VL53LX_dynamic_xtalk_correction_corrector+0x424>
			xtalk_offset_out =
 8010552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8010558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801055a:	7c1b      	ldrb	r3, [r3, #16]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d107      	bne.n	8010570 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 8010560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010562:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8010564:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010566:	429a      	cmp	r2, r3
 8010568:	d202      	bcs.n	8010570 <VL53LX_dynamic_xtalk_correction_corrector+0x43c>
			xtalk_offset_out =
 801056a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 8010570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010572:	089b      	lsrs	r3, r3, #2
 8010574:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 8010576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801057c:	d301      	bcc.n	8010582 <VL53LX_dynamic_xtalk_correction_corrector+0x44e>
			xtalk_offset_out = 0x3FFFF;
 801057e:	4b3f      	ldr	r3, [pc, #252]	; (801067c <VL53LX_dynamic_xtalk_correction_corrector+0x548>)
 8010580:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 8010582:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010586:	2b00      	cmp	r3, #0
 8010588:	d10d      	bne.n	80105a6 <VL53LX_dynamic_xtalk_correction_corrector+0x472>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 801058a:	2300      	movs	r3, #0
 801058c:	9301      	str	r3, [sp, #4]
 801058e:	2301      	movs	r3, #1
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010596:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059a:	f7ff fc1d 	bl	800fdd8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 801059e:	2302      	movs	r3, #2
 80105a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80105a4:	e009      	b.n	80105ba <VL53LX_dynamic_xtalk_correction_corrector+0x486>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 80105a6:	2301      	movs	r3, #1
 80105a8:	9301      	str	r3, [sp, #4]
 80105aa:	2301      	movs	r3, #1
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105b2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105b6:	f7ff fc0f 	bl	800fdd8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 80105ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80105be:	2b02      	cmp	r3, #2
 80105c0:	d10c      	bne.n	80105dc <VL53LX_dynamic_xtalk_correction_corrector+0x4a8>
			pint->accumulator = 0;
 80105c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80105c4:	f04f 0200 	mov.w	r2, #0
 80105c8:	f04f 0300 	mov.w	r3, #0
 80105cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 80105d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 80105d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105d8:	2200      	movs	r2, #0
 80105da:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 80105dc:	2300      	movs	r3, #0
 80105de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 80105e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d140      	bne.n	801066c <VL53LX_dynamic_xtalk_correction_corrector+0x538>

		pint->nodetect_counter += 1;
 80105ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105ec:	691b      	ldr	r3, [r3, #16]
 80105ee:	1c5a      	adds	r2, r3, #1
 80105f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105f2:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 80105f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105f6:	691a      	ldr	r2, [r3, #16]
 80105f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d202      	bcs.n	8010606 <VL53LX_dynamic_xtalk_correction_corrector+0x4d2>
			continue_processing = CONT_NEXT_LOOP;
 8010600:	2301      	movs	r3, #1
 8010602:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 8010606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801060a:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 801060c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010610:	2b00      	cmp	r3, #0
 8010612:	d110      	bne.n	8010636 <VL53LX_dynamic_xtalk_correction_corrector+0x502>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8010614:	2300      	movs	r3, #0
 8010616:	9301      	str	r3, [sp, #4]
 8010618:	2300      	movs	r3, #0
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801061e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010620:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010624:	f7ff fbd8 	bl	800fdd8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 8010628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801062a:	2202      	movs	r2, #2
 801062c:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 801062e:	2302      	movs	r3, #2
 8010630:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010634:	e009      	b.n	801064a <VL53LX_dynamic_xtalk_correction_corrector+0x516>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8010636:	2301      	movs	r3, #1
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	2300      	movs	r3, #0
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010642:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010646:	f7ff fbc7 	bl	800fdd8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 801064a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801064e:	2b02      	cmp	r3, #2
 8010650:	d10c      	bne.n	801066c <VL53LX_dynamic_xtalk_correction_corrector+0x538>
			pint->accumulator = 0;
 8010652:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010654:	f04f 0200 	mov.w	r2, #0
 8010658:	f04f 0300 	mov.w	r3, #0
 801065c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 8010660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 8010666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010668:	2200      	movs	r2, #0
 801066a:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801066c:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 8010670:	4618      	mov	r0, r3
 8010672:	3780      	adds	r7, #128	; 0x80
 8010674:	46bd      	mov	sp, r7
 8010676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801067a:	bf00      	nop
 801067c:	0003ffff 	.word	0x0003ffff

08010680 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010688:	2300      	movs	r3, #0
 801068a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8010696:	3320      	adds	r3, #32
 8010698:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106a0:	2201      	movs	r2, #1
 80106a2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ac:	2201      	movs	r2, #1
 80106ae:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106d0:	461a      	mov	r2, r3
 80106d2:	2364      	movs	r3, #100	; 0x64
 80106d4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106de:	461a      	mov	r2, r3
 80106e0:	2300      	movs	r3, #0
 80106e2:	f8c2 33d8 	str.w	r3, [r2, #984]	; 0x3d8
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106ec:	2200      	movs	r2, #0
 80106ee:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f8:	461a      	mov	r2, r3
 80106fa:	23c8      	movs	r3, #200	; 0xc8
 80106fc:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010706:	461a      	mov	r2, r3
 8010708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801070c:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010716:	461a      	mov	r2, r3
 8010718:	f44f 739a 	mov.w	r3, #308	; 0x134
 801071c:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010726:	461a      	mov	r2, r3
 8010728:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801072c:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010736:	461a      	mov	r2, r3
 8010738:	2380      	movs	r3, #128	; 0x80
 801073a:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010744:	2200      	movs	r2, #0
 8010746:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010754:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801075e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010762:	f8a3 23f8 	strh.w	r2, [r3, #1016]	; 0x3f8
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801076c:	2200      	movs	r2, #0
 801076e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010778:	461a      	mov	r2, r3
 801077a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 801077e:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010788:	461a      	mov	r2, r3
 801078a:	2328      	movs	r3, #40	; 0x28
 801078c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010796:	461a      	mov	r2, r3
 8010798:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 801079c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107a6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80107aa:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107b4:	461a      	mov	r2, r3
 80107b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80107ba:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107c4:	461a      	mov	r2, r3
 80107c6:	2300      	movs	r3, #0
 80107c8:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
	pdev->smudge_corrector_internals.required_samples = 0;
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107d2:	461a      	mov	r2, r3
 80107d4:	2300      	movs	r3, #0
 80107d6:	f8c2 3414 	str.w	r3, [r2, #1044]	; 0x414
	pdev->smudge_corrector_internals.accumulator = 0;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80107e0:	4619      	mov	r1, r3
 80107e2:	f04f 0200 	mov.w	r2, #0
 80107e6:	f04f 0300 	mov.w	r3, #0
 80107ea:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f4:	461a      	mov	r2, r3
 80107f6:	2300      	movs	r3, #0
 80107f8:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 80107fc:	68f8      	ldr	r0, [r7, #12]
 80107fe:	f000 f806 	bl	801080e <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 8010802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3718      	adds	r7, #24
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 801080e:	b480      	push	{r7}
 8010810:	b085      	sub	sp, #20
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010816:	2300      	movs	r3, #0
 8010818:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010820:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2200      	movs	r2, #0
 8010826:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	2200      	movs	r2, #0
 801082c:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	2200      	movs	r2, #0
 8010832:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2200      	movs	r2, #0
 8010838:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2200      	movs	r2, #0
 801083e:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	2200      	movs	r2, #0
 8010844:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2200      	movs	r2, #0
 801084a:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2200      	movs	r2, #0
 8010850:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2200      	movs	r2, #0
 8010856:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2200      	movs	r2, #0
 801085c:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 801085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3714      	adds	r7, #20
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr

0801086e <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b084      	sub	sp, #16
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010876:	2300      	movs	r3, #0
 8010878:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010884:	461a      	mov	r2, r3
 8010886:	2300      	movs	r3, #0
 8010888:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010892:	2200      	movs	r2, #0
 8010894:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801089e:	2200      	movs	r2, #0
 80108a0:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80108aa:	331c      	adds	r3, #28
 80108ac:	2218      	movs	r2, #24
 80108ae:	2100      	movs	r1, #0
 80108b0:	4618      	mov	r0, r3
 80108b2:	f006 ff1f 	bl	80176f4 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 80108b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 80108c2:	b480      	push	{r7}
 80108c4:	b085      	sub	sp, #20
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80108ca:	2300      	movs	r3, #0
 80108cc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d8:	2203      	movs	r2, #3
 80108da:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108f0:	2200      	movs	r2, #0
 80108f2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010908:	2200      	movs	r2, #0
 801090a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010914:	2200      	movs	r2, #0
 8010916:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010920:	2200      	movs	r2, #0
 8010922:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801092c:	461a      	mov	r2, r3
 801092e:	2300      	movs	r3, #0
 8010930:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801093a:	2200      	movs	r2, #0
 801093c:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434

	LOG_FUNCTION_END(status);

	return status;
 8010940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3714      	adds	r7, #20
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 8010950:	b480      	push	{r7}
 8010952:	b085      	sub	sp, #20
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010958:	2300      	movs	r3, #0
 801095a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010966:	22ff      	movs	r2, #255	; 0xff
 8010968:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010972:	2200      	movs	r2, #0
 8010974:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801097e:	461a      	mov	r2, r3
 8010980:	2300      	movs	r3, #0
 8010982:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
	pdev->low_power_auto_data.dss__required_spads = 0;
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801098c:	2200      	movs	r2, #0
 801098e:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010998:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 801099c:	2b00      	cmp	r3, #0
 801099e:	d007      	beq.n	80109b0 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a6:	f893 242c 	ldrb.w	r2, [r3, #1068]	; 0x42c
		pdev->stat_nvm.vhv_config__init =
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109b6:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d007      	beq.n	80109ce <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109c4:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318


	pdev->gen_cfg.phasecal_config__override = 0x00;
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f

	LOG_FUNCTION_END(status);

	return status;
 80109d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3714      	adds	r7, #20
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 80109e6:	b480      	push	{r7}
 80109e8:	b085      	sub	sp, #20
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80109f2:	2300      	movs	r3, #0
 80109f4:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f893 231b 	ldrb.w	r2, [r3, #795]	; 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a02:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f893 2318 	ldrb.w	r2, [r3, #792]	; 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a12:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f893 331b 	ldrb.w	r3, [r3, #795]	; 0x31b
 8010a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8010a2e:	f003 0303 	and.w	r3, r3, #3
 8010a32:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a3a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8010a42:	4413      	add	r3, r2
 8010a44:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a5a:	f893 2396 	ldrb.w	r2, [r3, #918]	; 0x396
	pdev->low_power_auto_data.first_run_phasecal_result =
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a64:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a6e:	f893 242e 	ldrb.w	r2, [r3, #1070]	; 0x42e
	pdev->gen_cfg.cal_config__vcsel_start =
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359

	LOG_FUNCTION_END(status);

	return status;
 8010a78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f203 339e 	addw	r3, r3, #926	; 0x39e
 8010a9a:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	8a1b      	ldrh	r3, [r3, #16]
 8010aa4:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	891b      	ldrh	r3, [r3, #8]
 8010aaa:	4413      	add	r3, r2
	utemp32a =
 8010aac:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ab4:	d302      	bcc.n	8010abc <VL53LX_low_power_auto_update_DSS+0x34>
		utemp32a = 0xFFFF;
 8010ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010aba:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	041b      	lsls	r3, r3, #16
 8010ac0:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d102      	bne.n	8010ad2 <VL53LX_low_power_auto_update_DSS+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010acc:	23f1      	movs	r3, #241	; 0xf1
 8010ace:	75fb      	strb	r3, [r7, #23]
 8010ad0:	e040      	b.n	8010b54 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8010ad8:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ae0:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ae8:	461a      	mov	r2, r3
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8010af6:	041b      	lsls	r3, r3, #16
 8010af8:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b00:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010b08:	23f1      	movs	r3, #241	; 0xf1
 8010b0a:	75fb      	strb	r3, [r7, #23]
 8010b0c:	e022      	b.n	8010b54 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b14:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
			utemp32a = utemp32a /
 8010b18:	693a      	ldr	r2, [r7, #16]
 8010b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b1e:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b26:	d302      	bcc.n	8010b2e <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 8010b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b2c:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b38:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b42:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
			pdev->gen_cfg.dss_config__roi_mode_control =
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2202      	movs	r2, #2
 8010b50:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 8010b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b58:	f113 0f0f 	cmn.w	r3, #15
 8010b5c:	d114      	bne.n	8010b88 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010b68:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b72:	f8b3 2434 	ldrh.w	r2, [r3, #1076]	; 0x434
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
		pdev->gen_cfg.dss_config__roi_mode_control =
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2202      	movs	r2, #2
 8010b80:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 8010b84:	2300      	movs	r3, #0
 8010b86:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8010b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	371c      	adds	r7, #28
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8010bb4:	2b07      	cmp	r3, #7
 8010bb6:	bf0c      	ite	eq
 8010bb8:	2301      	moveq	r3, #1
 8010bba:	2300      	movne	r3, #0
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	75fb      	strb	r3, [r7, #23]
 8010bc4:	e019      	b.n	8010bfa <VL53LX_compute_histo_merge_nb+0x62>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 8010bc6:	7df9      	ldrb	r1, [r7, #23]
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
 8010bca:	6938      	ldr	r0, [r7, #16]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	0052      	lsls	r2, r2, #1
 8010bd0:	441a      	add	r2, r3
 8010bd2:	0153      	lsls	r3, r2, #5
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	440b      	add	r3, r1
 8010bdc:	019b      	lsls	r3, r3, #6
 8010bde:	4413      	add	r3, r2
 8010be0:	4403      	add	r3, r0
 8010be2:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8010be6:	3304      	adds	r3, #4
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	dd02      	ble.n	8010bf4 <VL53LX_compute_histo_merge_nb+0x5c>
			sum++;
 8010bee:	7dbb      	ldrb	r3, [r7, #22]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 8010bf4:	7dfb      	ldrb	r3, [r7, #23]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	75fb      	strb	r3, [r7, #23]
 8010bfa:	7dfb      	ldrb	r3, [r7, #23]
 8010bfc:	2b05      	cmp	r3, #5
 8010bfe:	d9e2      	bls.n	8010bc6 <VL53LX_compute_histo_merge_nb+0x2e>
	*histo_merge_nb = sum;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	7dba      	ldrb	r2, [r7, #22]
 8010c04:	701a      	strb	r2, [r3, #0]

	return status;
 8010c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b085      	sub	sp, #20
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8010c24:	88fb      	ldrh	r3, [r7, #6]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d005      	beq.n	8010c36 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8010c2a:	88fb      	ldrh	r3, [r7, #6]
 8010c2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8010c34:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 8010c36:	68fb      	ldr	r3, [r7, #12]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 8010c44:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010c48:	b089      	sub	sp, #36	; 0x24
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	60f8      	str	r0, [r7, #12]
 8010c4e:	60b9      	str	r1, [r7, #8]
 8010c50:	607a      	str	r2, [r7, #4]
 8010c52:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 8010c54:	f04f 0200 	mov.w	r2, #0
 8010c58:	f04f 0300 	mov.w	r3, #0
 8010c5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	0b1b      	lsrs	r3, r3, #12
 8010c72:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	2200      	movs	r2, #0
 8010c78:	469a      	mov	sl, r3
 8010c7a:	4693      	mov	fp, r2
 8010c7c:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	fb02 f303 	mul.w	r3, r2, r3
 8010c88:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	091b      	lsrs	r3, r3, #4
 8010c8e:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	2200      	movs	r2, #0
 8010c94:	4698      	mov	r8, r3
 8010c96:	4691      	mov	r9, r2
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	fb08 f203 	mul.w	r2, r8, r3
 8010c9e:	69bb      	ldr	r3, [r7, #24]
 8010ca0:	fb09 f303 	mul.w	r3, r9, r3
 8010ca4:	4413      	add	r3, r2
 8010ca6:	69ba      	ldr	r2, [r7, #24]
 8010ca8:	fba2 4508 	umull	r4, r5, r2, r8
 8010cac:	442b      	add	r3, r5
 8010cae:	461d      	mov	r5, r3
 8010cb0:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8010cb4:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 8010cb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010cbc:	f04f 0200 	mov.w	r2, #0
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	0b02      	lsrs	r2, r0, #12
 8010cc6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8010cca:	0b0b      	lsrs	r3, r1, #12
 8010ccc:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 8010cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d305      	bcc.n	8010ce4 <VL53LX_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 8010cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8010cdc:	f04f 0300 	mov.w	r3, #0
 8010ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	617b      	str	r3, [r7, #20]

	return duration_us;
 8010ce8:	697b      	ldr	r3, [r7, #20]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3724      	adds	r7, #36	; 0x24
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8010cf4:	4770      	bx	lr

08010cf6 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8010cf6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010cfa:	b096      	sub	sp, #88	; 0x58
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010d00:	460b      	mov	r3, r1
 8010d02:	627a      	str	r2, [r7, #36]	; 0x24
 8010d04:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 8010d06:	f04f 0200 	mov.w	r2, #0
 8010d0a:	f04f 0300 	mov.w	r3, #0
 8010d0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 8010d12:	f04f 0200 	mov.w	r2, #0
 8010d16:	f04f 0300 	mov.w	r3, #0
 8010d1a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 8010d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d24:	17da      	asrs	r2, r3, #31
 8010d26:	469a      	mov	sl, r3
 8010d28:	4693      	mov	fp, r2
 8010d2a:	4652      	mov	r2, sl
 8010d2c:	465b      	mov	r3, fp
 8010d2e:	f04f 0000 	mov.w	r0, #0
 8010d32:	f04f 0100 	mov.w	r1, #0
 8010d36:	0159      	lsls	r1, r3, #5
 8010d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d3c:	0150      	lsls	r0, r2, #5
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	ebb2 040a 	subs.w	r4, r2, sl
 8010d46:	eb63 050b 	sbc.w	r5, r3, fp
 8010d4a:	f04f 0200 	mov.w	r2, #0
 8010d4e:	f04f 0300 	mov.w	r3, #0
 8010d52:	00ab      	lsls	r3, r5, #2
 8010d54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010d58:	00a2      	lsls	r2, r4, #2
 8010d5a:	4614      	mov	r4, r2
 8010d5c:	461d      	mov	r5, r3
 8010d5e:	eb14 080a 	adds.w	r8, r4, sl
 8010d62:	eb45 090b 	adc.w	r9, r5, fp
 8010d66:	f04f 0200 	mov.w	r2, #0
 8010d6a:	f04f 0300 	mov.w	r3, #0
 8010d6e:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8010d72:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 8010d76:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 8010d7a:	4690      	mov	r8, r2
 8010d7c:	4699      	mov	r9, r3
 8010d7e:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 8010d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00d      	beq.n	8010da4 <VL53LX_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 8010d88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	61bb      	str	r3, [r7, #24]
 8010d8e:	61fa      	str	r2, [r7, #28]
 8010d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010d94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010d98:	f7ef fe98 	bl	8000acc <__aeabi_uldivmod>
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	460b      	mov	r3, r1
 8010da0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d02a      	beq.n	8010e00 <VL53LX_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010daa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010dae:	f04f 0200 	mov.w	r2, #0
 8010db2:	f04f 0300 	mov.w	r3, #0
 8010db6:	02cb      	lsls	r3, r1, #11
 8010db8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010dbc:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 8010dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dc0:	0849      	lsrs	r1, r1, #1
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	6139      	str	r1, [r7, #16]
 8010dc6:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 8010dc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010dcc:	4621      	mov	r1, r4
 8010dce:	1851      	adds	r1, r2, r1
 8010dd0:	6039      	str	r1, [r7, #0]
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	eb43 0101 	adc.w	r1, r3, r1
 8010dd8:	6079      	str	r1, [r7, #4]
 8010dda:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010dde:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	2200      	movs	r2, #0
 8010de6:	60bb      	str	r3, [r7, #8]
 8010de8:	60fa      	str	r2, [r7, #12]
 8010dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010dee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010df2:	f7ef fe6b 	bl	8000acc <__aeabi_uldivmod>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8010dfe:	e00b      	b.n	8010e18 <VL53LX_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 8010e00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010e04:	f04f 0200 	mov.w	r2, #0
 8010e08:	f04f 0300 	mov.w	r3, #0
 8010e0c:	02cb      	lsls	r3, r1, #11
 8010e0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010e12:	02c2      	lsls	r2, r0, #11
 8010e14:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 8010e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e1a:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 8010e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3758      	adds	r7, #88	; 0x58
 8010e22:	46bd      	mov	sp, r7
 8010e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e28 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8010e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e38:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 8010e3a:	e002      	b.n	8010e42 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	089b      	lsrs	r3, r3, #2
 8010e40:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d8f8      	bhi.n	8010e3c <VL53LX_isqrt+0x14>

	while (bit != 0) {
 8010e4a:	e017      	b.n	8010e7c <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	4413      	add	r3, r2
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d30b      	bcc.n	8010e70 <VL53LX_isqrt+0x48>
			num -= res + bit;
 8010e58:	68fa      	ldr	r2, [r7, #12]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	085b      	lsrs	r3, r3, #1
 8010e68:	68ba      	ldr	r2, [r7, #8]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	60fb      	str	r3, [r7, #12]
 8010e6e:	e002      	b.n	8010e76 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	085b      	lsrs	r3, r3, #1
 8010e74:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	089b      	lsrs	r3, r3, #2
 8010e7a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1e4      	bne.n	8010e4c <VL53LX_isqrt+0x24>
	}

	return res;
 8010e82:	68fb      	ldr	r3, [r7, #12]
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3714      	adds	r7, #20
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f000 faa6 	bl	80113f8 <VL53LX_decode_vcsel_period>
 8010eac:	4603      	mov	r3, r0
	period = 2048 *
 8010eae:	02db      	lsls	r3, r3, #11
 8010eb0:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010eca:	02db      	lsls	r3, r3, #11
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	4413      	add	r3, r2
 8010ed0:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010ed8:	02db      	lsls	r3, r3, #11
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	1ad3      	subs	r3, r2, r3
 8010ede:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d009      	beq.n	8010efa <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8010eee:	68b9      	ldr	r1, [r7, #8]
 8010ef0:	fb01 f202 	mul.w	r2, r1, r2
 8010ef4:	1a9b      	subs	r3, r3, r2
 8010ef6:	60fb      	str	r3, [r7, #12]
 8010ef8:	e001      	b.n	8010efe <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 8010f08:	bf00      	nop
 8010f0a:	3710      	adds	r7, #16
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 8010f22:	6838      	ldr	r0, [r7, #0]
 8010f24:	f000 fb91 	bl	801164a <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff ff7a 	bl	8010e28 <VL53LX_isqrt>
 8010f34:	4603      	mov	r3, r0
	VL53LX_p_031  =
 8010f36:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	fb02 f303 	mul.w	r3, r2, r3
 8010f40:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	3307      	adds	r3, #7
 8010f46:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	111b      	asrs	r3, r3, #4
 8010f4c:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f54:	68ba      	ldr	r2, [r7, #8]
 8010f56:	4413      	add	r3, r2
 8010f58:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	2200      	movs	r2, #0
 8010f66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	73fb      	strb	r3, [r7, #15]
 8010f6e:	e01e      	b.n	8010fae <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 8010f70:	7bfa      	ldrb	r2, [r7, #15]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	3206      	adds	r2, #6
 8010f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	dd13      	ble.n	8010fa8 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8010f86:	7bf9      	ldrb	r1, [r7, #15]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	3106      	adds	r1, #6
 8010f8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f90:	441a      	add	r2, r3
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 8010fa8:	7bfb      	ldrb	r3, [r7, #15]
 8010faa:	3301      	adds	r3, #1
 8010fac:	73fb      	strb	r3, [r7, #15]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	7a9b      	ldrb	r3, [r3, #10]
 8010fb2:	7bfa      	ldrb	r2, [r7, #15]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d3db      	bcc.n	8010f70 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d01c      	beq.n	8010ffc <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8010fda:	0852      	lsrs	r2, r2, #1
 8010fdc:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 8010fde:	441a      	add	r2, r3
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 8010ff2:	fb93 f2f2 	sdiv	r2, r3, r2
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 8010ffc:	bf00      	nop
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 8011010:	2300      	movs	r3, #0
 8011012:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 8011014:	2300      	movs	r3, #0
 8011016:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	7b1b      	ldrb	r3, [r3, #12]
 801101c:	f003 0307 	and.w	r3, r3, #7
 8011020:	2b07      	cmp	r3, #7
 8011022:	d13a      	bne.n	801109a <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 8011024:	2300      	movs	r3, #0
 8011026:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011028:	2300      	movs	r3, #0
 801102a:	73bb      	strb	r3, [r7, #14]
 801102c:	e01f      	b.n	801106e <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 801102e:	7bbb      	ldrb	r3, [r7, #14]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	4413      	add	r3, r2
 8011034:	7b1b      	ldrb	r3, [r3, #12]
 8011036:	f003 0307 	and.w	r3, r3, #7
 801103a:	2b07      	cmp	r3, #7
 801103c:	d014      	beq.n	8011068 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 801103e:	7bba      	ldrb	r2, [r7, #14]
 8011040:	7b7b      	ldrb	r3, [r7, #13]
 8011042:	6879      	ldr	r1, [r7, #4]
 8011044:	440a      	add	r2, r1
 8011046:	7b11      	ldrb	r1, [r2, #12]
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	4413      	add	r3, r2
 801104c:	460a      	mov	r2, r1
 801104e:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 8011050:	7bba      	ldrb	r2, [r7, #14]
 8011052:	7b7b      	ldrb	r3, [r7, #13]
 8011054:	6879      	ldr	r1, [r7, #4]
 8011056:	440a      	add	r2, r1
 8011058:	7c91      	ldrb	r1, [r2, #18]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	4413      	add	r3, r2
 801105e:	460a      	mov	r2, r1
 8011060:	749a      	strb	r2, [r3, #18]
				i++;
 8011062:	7b7b      	ldrb	r3, [r7, #13]
 8011064:	3301      	adds	r3, #1
 8011066:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011068:	7bbb      	ldrb	r3, [r7, #14]
 801106a:	3301      	adds	r3, #1
 801106c:	73bb      	strb	r3, [r7, #14]
 801106e:	7bbb      	ldrb	r3, [r7, #14]
 8011070:	2b05      	cmp	r3, #5
 8011072:	d9dc      	bls.n	801102e <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8011074:	7b7b      	ldrb	r3, [r7, #13]
 8011076:	73bb      	strb	r3, [r7, #14]
 8011078:	e00c      	b.n	8011094 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 801107a:	7bbb      	ldrb	r3, [r7, #14]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	4413      	add	r3, r2
 8011080:	2210      	movs	r2, #16
 8011082:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 8011084:	7bbb      	ldrb	r3, [r7, #14]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	4413      	add	r3, r2
 801108a:	2200      	movs	r2, #0
 801108c:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 801108e:	7bbb      	ldrb	r3, [r7, #14]
 8011090:	3301      	adds	r3, #1
 8011092:	73bb      	strb	r3, [r7, #14]
 8011094:	7bbb      	ldrb	r3, [r7, #14]
 8011096:	2b05      	cmp	r3, #5
 8011098:	d9ef      	bls.n	801107a <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	7adb      	ldrb	r3, [r3, #11]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d023      	beq.n	80110ea <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7adb      	ldrb	r3, [r3, #11]
 80110a6:	73fb      	strb	r3, [r7, #15]
 80110a8:	e00f      	b.n	80110ca <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 80110aa:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 80110ac:	7bfb      	ldrb	r3, [r7, #15]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	7ad2      	ldrb	r2, [r2, #11]
 80110b2:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	3106      	adds	r1, #6
 80110b8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3206      	adds	r2, #6
 80110c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
 80110c6:	3301      	adds	r3, #1
 80110c8:	73fb      	strb	r3, [r7, #15]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	7a5b      	ldrb	r3, [r3, #9]
 80110ce:	7bfa      	ldrb	r2, [r7, #15]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d3ea      	bcc.n	80110aa <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	72da      	strb	r2, [r3, #11]
	}
}
 80110ea:	bf00      	nop
 80110ec:	3714      	adds	r7, #20
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b084      	sub	sp, #16
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	4603      	mov	r3, r0
 80110fe:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8011108:	88fb      	ldrh	r3, [r7, #6]
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff fd83 	bl	8010c16 <VL53LX_calc_pll_period_us>
 8011110:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 8011116:	f249 2257 	movw	r2, #37463	; 0x9257
 801111a:	fb02 f303 	mul.w	r3, r2, r3
 801111e:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011126:	0c1b      	lsrs	r3, r3, #16
 8011128:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 801112a:	68bb      	ldr	r3, [r7, #8]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 8011134:	b480      	push	{r7}
 8011136:	b087      	sub	sp, #28
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 8011142:	2307      	movs	r3, #7
 8011144:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011150:	db03      	blt.n	801115a <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 8011152:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	e004      	b.n	8011164 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	dd01      	ble.n	8011164 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801116a:	dd02      	ble.n	8011172 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 801116c:	2303      	movs	r3, #3
 801116e:	613b      	str	r3, [r7, #16]
 8011170:	e001      	b.n	8011176 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 8011172:	2307      	movs	r3, #7
 8011174:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d009      	beq.n	8011190 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 801117c:	697a      	ldr	r2, [r7, #20]
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	409a      	lsls	r2, r3
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	085b      	lsrs	r3, r3, #1
 8011186:	441a      	add	r2, r3
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	fbb2 f3f3 	udiv	r3, r2, r3
 801118e:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011196:	dd02      	ble.n	801119e <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	011b      	lsls	r3, r3, #4
 801119c:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111a4:	d302      	bcc.n	80111ac <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 80111a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111aa:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 80111b0:	89fb      	ldrh	r3, [r7, #14]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	371c      	adds	r7, #28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr

080111be <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 80111be:	b480      	push	{r7}
 80111c0:	b087      	sub	sp, #28
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	60f8      	str	r0, [r7, #12]
 80111c6:	60b9      	str	r1, [r7, #8]
 80111c8:	603b      	str	r3, [r7, #0]
 80111ca:	4613      	mov	r3, r2
 80111cc:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 80111ce:	2300      	movs	r3, #0
 80111d0:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 80111d6:	88fb      	ldrh	r3, [r7, #6]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d010      	beq.n	80111fe <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	021a      	lsls	r2, r3, #8
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	fa02 f303 	lsl.w	r3, r2, r3
 80111e6:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 80111e8:	88fb      	ldrh	r3, [r7, #6]
 80111ea:	085b      	lsrs	r3, r3, #1
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	441a      	add	r2, r3
				(uint32_t)num_spads;
 80111f4:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 80111f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111fa:	617b      	str	r3, [r7, #20]
 80111fc:	e004      	b.n	8011208 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 80111fe:	68ba      	ldr	r2, [r7, #8]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	fa02 f303 	lsl.w	r3, r2, r3
 8011206:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 8011208:	697a      	ldr	r2, [r7, #20]
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	429a      	cmp	r2, r3
 801120e:	d901      	bls.n	8011214 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 8011218:	8a7b      	ldrh	r3, [r7, #18]
}
 801121a:	4618      	mov	r0, r3
 801121c:	371c      	adds	r7, #28
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
	...

08011228 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 8011228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122c:	b093      	sub	sp, #76	; 0x4c
 801122e:	af00      	add	r7, sp, #0
 8011230:	461e      	mov	r6, r3
 8011232:	4603      	mov	r3, r0
 8011234:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011236:	460b      	mov	r3, r1
 8011238:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801123a:	4613      	mov	r3, r2
 801123c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801123e:	4633      	mov	r3, r6
 8011240:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 8011244:	2300      	movs	r3, #0
 8011246:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 8011248:	f04f 0200 	mov.w	r2, #0
 801124c:	f04f 0300 	mov.w	r3, #0
 8011250:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 8011258:	2300      	movs	r3, #0
 801125a:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 801125c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff fcd9 	bl	8010c16 <VL53LX_calc_pll_period_us>
 8011264:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 8011266:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011268:	2200      	movs	r2, #0
 801126a:	623b      	str	r3, [r7, #32]
 801126c:	627a      	str	r2, [r7, #36]	; 0x24
 801126e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011270:	2200      	movs	r2, #0
 8011272:	61bb      	str	r3, [r7, #24]
 8011274:	61fa      	str	r2, [r7, #28]
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801127c:	4602      	mov	r2, r0
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	613b      	str	r3, [r7, #16]
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	460a      	mov	r2, r1
 8011286:	eb63 0302 	sbc.w	r3, r3, r2
 801128a:	617b      	str	r3, [r7, #20]
 801128c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011290:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8011294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011296:	2200      	movs	r2, #0
 8011298:	469a      	mov	sl, r3
 801129a:	4693      	mov	fp, r2
 801129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129e:	fb0a f203 	mul.w	r2, sl, r3
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	fb0b f303 	mul.w	r3, fp, r3
 80112a8:	4413      	add	r3, r2
 80112aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112ac:	fba2 890a 	umull	r8, r9, r2, sl
 80112b0:	444b      	add	r3, r9
 80112b2:	4699      	mov	r9, r3
 80112b4:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 80112b8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 80112bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	da08      	bge.n	80112d6 <VL53LX_range_maths+0xae>
 80112c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80112c8:	1851      	adds	r1, r2, r1
 80112ca:	60b9      	str	r1, [r7, #8]
 80112cc:	f143 0300 	adc.w	r3, r3, #0
 80112d0:	60fb      	str	r3, [r7, #12]
 80112d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80112d6:	f04f 0000 	mov.w	r0, #0
 80112da:	f04f 0100 	mov.w	r1, #0
 80112de:	0a50      	lsrs	r0, r2, #9
 80112e0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80112e4:	1259      	asrs	r1, r3, #9
 80112e6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 80112ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ec:	f249 2257 	movw	r2, #37463	; 0x9257
 80112f0:	fb03 f202 	mul.w	r2, r3, r2
 80112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f6:	2100      	movs	r1, #0
 80112f8:	fb01 f303 	mul.w	r3, r1, r3
 80112fc:	4413      	add	r3, r2
 80112fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011300:	f249 2157 	movw	r1, #37463	; 0x9257
 8011304:	fba2 4501 	umull	r4, r5, r2, r1
 8011308:	442b      	add	r3, r5
 801130a:	461d      	mov	r5, r3
 801130c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8011310:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8011314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011318:	2b00      	cmp	r3, #0
 801131a:	da07      	bge.n	801132c <VL53LX_range_maths+0x104>
 801131c:	4934      	ldr	r1, [pc, #208]	; (80113f0 <VL53LX_range_maths+0x1c8>)
 801131e:	1851      	adds	r1, r2, r1
 8011320:	6039      	str	r1, [r7, #0]
 8011322:	f143 0300 	adc.w	r3, r3, #0
 8011326:	607b      	str	r3, [r7, #4]
 8011328:	e9d7 2300 	ldrd	r2, r3, [r7]
 801132c:	f04f 0000 	mov.w	r0, #0
 8011330:	f04f 0100 	mov.w	r1, #0
 8011334:	0d90      	lsrs	r0, r2, #22
 8011336:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 801133a:	1599      	asrs	r1, r3, #22
 801133c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011344:	4413      	add	r3, r2
 8011346:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 8011348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801134c:	fb02 f303 	mul.w	r3, r2, r3
 8011350:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 8011352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011358:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 801135a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135c:	2b00      	cmp	r3, #0
 801135e:	da01      	bge.n	8011364 <VL53LX_range_maths+0x13c>
 8011360:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011364:	12db      	asrs	r3, r3, #11
 8011366:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 8011368:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801136c:	2b00      	cmp	r3, #0
 801136e:	d130      	bne.n	80113d2 <VL53LX_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 8011370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011372:	4613      	mov	r3, r2
 8011374:	009b      	lsls	r3, r3, #2
 8011376:	4413      	add	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 801137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137e:	2b00      	cmp	r3, #0
 8011380:	da00      	bge.n	8011384 <VL53LX_range_maths+0x15c>
 8011382:	3303      	adds	r3, #3
 8011384:	109b      	asrs	r3, r3, #2
 8011386:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 8011388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801138a:	4b1a      	ldr	r3, [pc, #104]	; (80113f4 <VL53LX_range_maths+0x1cc>)
 801138c:	fb83 2301 	smull	r2, r3, r3, r1
 8011390:	109a      	asrs	r2, r3, #2
 8011392:	17cb      	asrs	r3, r1, #31
 8011394:	1ad2      	subs	r2, r2, r3
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	1aca      	subs	r2, r1, r3
 80113a0:	2a04      	cmp	r2, #4
 80113a2:	dc09      	bgt.n	80113b8 <VL53LX_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 80113a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a6:	4a13      	ldr	r2, [pc, #76]	; (80113f4 <VL53LX_range_maths+0x1cc>)
 80113a8:	fb82 1203 	smull	r1, r2, r2, r3
 80113ac:	1092      	asrs	r2, r2, #2
 80113ae:	17db      	asrs	r3, r3, #31
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	b21b      	sxth	r3, r3
 80113b4:	647b      	str	r3, [r7, #68]	; 0x44
 80113b6:	e015      	b.n	80113e4 <VL53LX_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 80113b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ba:	4a0e      	ldr	r2, [pc, #56]	; (80113f4 <VL53LX_range_maths+0x1cc>)
 80113bc:	fb82 1203 	smull	r1, r2, r2, r3
 80113c0:	1092      	asrs	r2, r2, #2
 80113c2:	17db      	asrs	r3, r3, #31
 80113c4:	1ad3      	subs	r3, r2, r3
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	3301      	adds	r3, #1
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	b21b      	sxth	r3, r3
 80113ce:	647b      	str	r3, [r7, #68]	; 0x44
 80113d0:	e008      	b.n	80113e4 <VL53LX_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 80113d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d104      	bne.n	80113e4 <VL53LX_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 80113da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113dc:	0fda      	lsrs	r2, r3, #31
 80113de:	4413      	add	r3, r2
 80113e0:	105b      	asrs	r3, r3, #1
 80113e2:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 80113e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	374c      	adds	r7, #76	; 0x4c
 80113ea:	46bd      	mov	sp, r7
 80113ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f0:	003fffff 	.word	0x003fffff
 80113f4:	66666667 	.word	0x66666667

080113f8 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	4603      	mov	r3, r0
 8011400:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	3301      	adds	r3, #1
 801140a:	b2db      	uxtb	r3, r3
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 8011410:	7bfb      	ldrb	r3, [r7, #15]
}
 8011412:	4618      	mov	r0, r3
 8011414:	3714      	adds	r7, #20
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr

0801141e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 801141e:	b480      	push	{r7}
 8011420:	b083      	sub	sp, #12
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	781a      	ldrb	r2, [r3, #0]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	7a5a      	ldrb	r2, [r3, #9]
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	605a      	str	r2, [r3, #4]
}
 801148e:	bf00      	nop
 8011490:	370c      	adds	r7, #12
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 801149a:	b480      	push	{r7}
 801149c:	b087      	sub	sp, #28
 801149e:	af00      	add	r7, sp, #0
 80114a0:	60f8      	str	r0, [r7, #12]
 80114a2:	460b      	mov	r3, r1
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2203      	movs	r2, #3
 80114b0:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2203      	movs	r2, #3
 80114b6:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2200      	movs	r2, #0
 80114c2:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2218      	movs	r2, #24
 80114ce:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80114d0:	897b      	ldrh	r3, [r7, #10]
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2200      	movs	r2, #0
 801150a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2200      	movs	r2, #0
 8011522:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2200      	movs	r2, #0
 8011532:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2200      	movs	r2, #0
 801154a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2200      	movs	r2, #0
 8011562:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 801156e:	2300      	movs	r3, #0
 8011570:	82fb      	strh	r3, [r7, #22]
 8011572:	e009      	b.n	8011588 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 8011574:	8afb      	ldrh	r3, [r7, #22]
 8011576:	8afa      	ldrh	r2, [r7, #22]
 8011578:	b2d1      	uxtb	r1, r2
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4413      	add	r3, r2
 801157e:	460a      	mov	r2, r1
 8011580:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8011582:	8afb      	ldrh	r3, [r7, #22]
 8011584:	3301      	adds	r3, #1
 8011586:	82fb      	strh	r3, [r7, #22]
 8011588:	8afb      	ldrh	r3, [r7, #22]
 801158a:	2b05      	cmp	r3, #5
 801158c:	d9f2      	bls.n	8011574 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 801158e:	2300      	movs	r3, #0
 8011590:	82fb      	strh	r3, [r7, #22]
 8011592:	e007      	b.n	80115a4 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 8011594:	8afb      	ldrh	r3, [r7, #22]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	4413      	add	r3, r2
 801159a:	2201      	movs	r2, #1
 801159c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 801159e:	8afb      	ldrh	r3, [r7, #22]
 80115a0:	3301      	adds	r3, #1
 80115a2:	82fb      	strh	r3, [r7, #22]
 80115a4:	8afb      	ldrh	r3, [r7, #22]
 80115a6:	2b05      	cmp	r3, #5
 80115a8:	d9f4      	bls.n	8011594 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 80115aa:	2300      	movs	r3, #0
 80115ac:	82fb      	strh	r3, [r7, #22]
 80115ae:	e013      	b.n	80115d8 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 80115b0:	8afa      	ldrh	r2, [r7, #22]
 80115b2:	897b      	ldrh	r3, [r7, #10]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d206      	bcs.n	80115c6 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 80115b8:	8afa      	ldrh	r2, [r7, #22]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	3206      	adds	r2, #6
 80115be:	68f9      	ldr	r1, [r7, #12]
 80115c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80115c4:	e005      	b.n	80115d2 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 80115c6:	8afa      	ldrh	r2, [r7, #22]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3206      	adds	r2, #6
 80115cc:	2100      	movs	r1, #0
 80115ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 80115d2:	8afb      	ldrh	r3, [r7, #22]
 80115d4:	3301      	adds	r3, #1
 80115d6:	82fb      	strh	r3, [r7, #22]
 80115d8:	8afb      	ldrh	r3, [r7, #22]
 80115da:	2b17      	cmp	r3, #23
 80115dc:	d9e8      	bls.n	80115b0 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 80115de:	bf00      	nop
 80115e0:	bf00      	nop
 80115e2:	371c      	adds	r7, #28
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr

080115ec <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 80115fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	da10      	bge.n	8011624 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8011602:	7bfb      	ldrb	r3, [r7, #15]
 8011604:	43db      	mvns	r3, r3
 8011606:	b2db      	uxtb	r3, r3
 8011608:	f003 0307 	and.w	r3, r3, #7
 801160c:	b2db      	uxtb	r3, r3
 801160e:	3308      	adds	r3, #8
 8011610:	b2da      	uxtb	r2, r3
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8011616:	7bfb      	ldrb	r3, [r7, #15]
 8011618:	3b80      	subs	r3, #128	; 0x80
 801161a:	10db      	asrs	r3, r3, #3
 801161c:	b2da      	uxtb	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8011622:	e00c      	b.n	801163e <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8011624:	7bfb      	ldrb	r3, [r7, #15]
 8011626:	f003 0307 	and.w	r3, r3, #7
 801162a:	b2da      	uxtb	r2, r3
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8011630:	7bfb      	ldrb	r3, [r7, #15]
 8011632:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8011636:	10db      	asrs	r3, r3, #3
 8011638:	b2da      	uxtb	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	701a      	strb	r2, [r3, #0]
}
 801163e:	bf00      	nop
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr

0801164a <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 801164a:	b480      	push	{r7}
 801164c:	b085      	sub	sp, #20
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 8011656:	2300      	movs	r3, #0
 8011658:	73fb      	strb	r3, [r7, #15]
 801165a:	e02c      	b.n	80116b6 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 801165c:	7bfb      	ldrb	r3, [r7, #15]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d009      	beq.n	8011676 <VL53LX_hist_find_min_max_bin_values+0x2c>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8011668:	7bf9      	ldrb	r1, [r7, #15]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3106      	adds	r1, #6
 801166e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011672:	429a      	cmp	r2, r3
 8011674:	db07      	blt.n	8011686 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 8011676:	7bfa      	ldrb	r2, [r7, #15]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3206      	adds	r2, #6
 801167c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8011686:	7bfb      	ldrb	r3, [r7, #15]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d009      	beq.n	80116a0 <VL53LX_hist_find_min_max_bin_values+0x56>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8011692:	7bf9      	ldrb	r1, [r7, #15]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	3106      	adds	r1, #6
 8011698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801169c:	429a      	cmp	r2, r3
 801169e:	dc07      	bgt.n	80116b0 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 80116a0:	7bfa      	ldrb	r2, [r7, #15]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	3206      	adds	r2, #6
 80116a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
 80116b2:	3301      	adds	r3, #1
 80116b4:	73fb      	strb	r3, [r7, #15]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	7a9b      	ldrb	r3, [r3, #10]
 80116ba:	7bfa      	ldrb	r2, [r7, #15]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d3cd      	bcc.n	801165c <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 80116c0:	bf00      	nop
 80116c2:	bf00      	nop
 80116c4:	3714      	adds	r7, #20
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 80116ce:	b480      	push	{r7}
 80116d0:	b085      	sub	sp, #20
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7adb      	ldrb	r3, [r3, #11]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d03a      	beq.n	8011758 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80116f4:	2300      	movs	r3, #0
 80116f6:	73fb      	strb	r3, [r7, #15]
 80116f8:	e00e      	b.n	8011718 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011700:	7bf9      	ldrb	r1, [r7, #15]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3106      	adds	r1, #6
 8011706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801170a:	441a      	add	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 8011712:	7bfb      	ldrb	r3, [r7, #15]
 8011714:	3301      	adds	r3, #1
 8011716:	73fb      	strb	r3, [r7, #15]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	7adb      	ldrb	r3, [r3, #11]
 801171c:	7bfa      	ldrb	r2, [r7, #15]
 801171e:	429a      	cmp	r2, r3
 8011720:	d3eb      	bcc.n	80116fa <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	7ad2      	ldrb	r2, [r2, #11]
 8011738:	0852      	lsrs	r2, r2, #1
 801173a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 801173c:	441a      	add	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 801174e:	fb93 f2f2 	sdiv	r2, r3, r2
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 8011758:	bf00      	nop
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 8011764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011768:	b0ca      	sub	sp, #296	; 0x128
 801176a:	af00      	add	r7, sp, #0
 801176c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011770:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8011774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011778:	4603      	mov	r3, r0
 801177a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 801177e:	2300      	movs	r3, #0
 8011780:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 8011784:	2300      	movs	r3, #0
 8011786:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 801178a:	2300      	movs	r3, #0
 801178c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 8011790:	2300      	movs	r3, #0
 8011792:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 8011796:	f04f 0200 	mov.w	r2, #0
 801179a:	f04f 0300 	mov.w	r3, #0
 801179e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 80117a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117ac:	2300      	movs	r3, #0
 80117ae:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 80117b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117b4:	2300      	movs	r3, #0
 80117b6:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 80117b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117bc:	2300      	movs	r3, #0
 80117be:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 80117c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117c4:	2300      	movs	r3, #0
 80117c6:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 80117c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117cc:	2300      	movs	r3, #0
 80117ce:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 80117d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117d4:	2300      	movs	r3, #0
 80117d6:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 80117d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117dc:	2300      	movs	r3, #0
 80117de:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 80117e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80117e4:	2300      	movs	r3, #0
 80117e6:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 80117e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80117ec:	2300      	movs	r3, #0
 80117ee:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 80117f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80117f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 80e1 	beq.w	80119c0 <VL53LX_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 80117fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 8011806:	2b00      	cmp	r3, #0
 8011808:	f000 80da 	beq.w	80119c0 <VL53LX_f_001+0x25c>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 801180c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011810:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011814:	4618      	mov	r0, r3
 8011816:	f7ff f9fe 	bl	8010c16 <VL53LX_calc_pll_period_us>
 801181a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 801181e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011826:	3301      	adds	r3, #1
 8011828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 801182c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011834:	2110      	movs	r1, #16
 8011836:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801183a:	f7ff fa03 	bl	8010c44 <VL53LX_duration_maths>
 801183e:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 8011840:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011844:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 8011846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801184a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801184e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4619      	mov	r1, r3
 8011856:	4610      	mov	r0, r2
 8011858:	f7ff fc6c 	bl	8011134 <VL53LX_rate_maths>
 801185c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 801185e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011862:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 8011864:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011868:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 801186c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011870:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 8011874:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f7ff fa3b 	bl	8010cf6 <VL53LX_events_per_spad_maths>
 8011880:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 8011882:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011886:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 8011888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801188c:	8adb      	ldrh	r3, [r3, #22]
 801188e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011892:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 8011894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011898:	8adb      	ldrh	r3, [r3, #22]
 801189a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801189e:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 80118a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80118a4:	695b      	ldr	r3, [r3, #20]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	f000 808a 	beq.w	80119c0 <VL53LX_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 80118ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80118b0:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	2200      	movs	r2, #0
 80118b6:	461c      	mov	r4, r3
 80118b8:	4615      	mov	r5, r2
 80118ba:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 80118be:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80118c2:	4622      	mov	r2, r4
 80118c4:	462b      	mov	r3, r5
 80118c6:	f04f 0000 	mov.w	r0, #0
 80118ca:	f04f 0100 	mov.w	r1, #0
 80118ce:	0159      	lsls	r1, r3, #5
 80118d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80118d4:	0150      	lsls	r0, r2, #5
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	ebb2 0804 	subs.w	r8, r2, r4
 80118de:	eb63 0905 	sbc.w	r9, r3, r5
 80118e2:	f04f 0200 	mov.w	r2, #0
 80118e6:	f04f 0300 	mov.w	r3, #0
 80118ea:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80118ee:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80118f2:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80118f6:	4690      	mov	r8, r2
 80118f8:	4699      	mov	r9, r3
 80118fa:	eb18 0a04 	adds.w	sl, r8, r4
 80118fe:	eb49 0b05 	adc.w	fp, r9, r5
 8011902:	f04f 0200 	mov.w	r2, #0
 8011906:	f04f 0300 	mov.w	r3, #0
 801190a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801190e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011916:	4692      	mov	sl, r2
 8011918:	469b      	mov	fp, r3
 801191a:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 801191e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011922:	f04f 0000 	mov.w	r0, #0
 8011926:	f04f 0100 	mov.w	r1, #0
 801192a:	0319      	lsls	r1, r3, #12
 801192c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011930:	0310      	lsls	r0, r2, #12
 8011932:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53LX_p_033/2;
 8011936:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801193a:	695b      	ldr	r3, [r3, #20]
 801193c:	085b      	lsrs	r3, r3, #1
 801193e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64 += (uint64_t)tmp32;
 8011942:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011946:	2200      	movs	r2, #0
 8011948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801194c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011950:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011954:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8011958:	4621      	mov	r1, r4
 801195a:	1851      	adds	r1, r2, r1
 801195c:	65b9      	str	r1, [r7, #88]	; 0x58
 801195e:	4629      	mov	r1, r5
 8011960:	eb43 0101 	adc.w	r1, r3, r1
 8011964:	65f9      	str	r1, [r7, #92]	; 0x5c
 8011966:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801196a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 801196e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011972:	695b      	ldr	r3, [r3, #20]
 8011974:	2200      	movs	r2, #0
 8011976:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801197a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801197e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011982:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011986:	f7ef f8a1 	bl	8000acc <__aeabi_uldivmod>
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8011992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011996:	8adb      	ldrh	r3, [r3, #22]
 8011998:	b29b      	uxth	r3, r3
 801199a:	2200      	movs	r2, #0
 801199c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80119a0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80119a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80119a8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80119ac:	4621      	mov	r1, r4
 80119ae:	428a      	cmp	r2, r1
 80119b0:	4629      	mov	r1, r5
 80119b2:	418b      	sbcs	r3, r1
 80119b4:	d204      	bcs.n	80119c0 <VL53LX_f_001+0x25c>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 80119b6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80119ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80119be:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 80119c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	f000 82e9 	beq.w	8011f9e <VL53LX_f_001+0x83a>
		(pbins->VL53LX_p_015        != 0) &&
 80119cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f000 82e2 	beq.w	8011f9e <VL53LX_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 80119da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119de:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f000 82dc 	beq.w	8011f9e <VL53LX_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 80119e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 82d5 	beq.w	8011f9e <VL53LX_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 80119f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80119f8:	885b      	ldrh	r3, [r3, #2]
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	2200      	movs	r2, #0
 80119fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011a00:	657a      	str	r2, [r7, #84]	; 0x54
 8011a02:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8011a06:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 8011a0a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8011a0e:	4622      	mov	r2, r4
 8011a10:	462b      	mov	r3, r5
 8011a12:	f04f 0000 	mov.w	r0, #0
 8011a16:	f04f 0100 	mov.w	r1, #0
 8011a1a:	0159      	lsls	r1, r3, #5
 8011a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011a20:	0150      	lsls	r0, r2, #5
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	1b11      	subs	r1, r2, r4
 8011a28:	64b9      	str	r1, [r7, #72]	; 0x48
 8011a2a:	eb63 0305 	sbc.w	r3, r3, r5
 8011a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a30:	f04f 0200 	mov.w	r2, #0
 8011a34:	f04f 0300 	mov.w	r3, #0
 8011a38:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8011a3c:	4649      	mov	r1, r9
 8011a3e:	008b      	lsls	r3, r1, #2
 8011a40:	4641      	mov	r1, r8
 8011a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011a46:	4641      	mov	r1, r8
 8011a48:	008a      	lsls	r2, r1, #2
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	460b      	mov	r3, r1
 8011a50:	191b      	adds	r3, r3, r4
 8011a52:	643b      	str	r3, [r7, #64]	; 0x40
 8011a54:	4613      	mov	r3, r2
 8011a56:	eb45 0303 	adc.w	r3, r5, r3
 8011a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8011a5c:	f04f 0200 	mov.w	r2, #0
 8011a60:	f04f 0300 	mov.w	r3, #0
 8011a64:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011a68:	4629      	mov	r1, r5
 8011a6a:	02cb      	lsls	r3, r1, #11
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8011a72:	4621      	mov	r1, r4
 8011a74:	02ca      	lsls	r2, r1, #11
 8011a76:	461c      	mov	r4, r3
 8011a78:	4613      	mov	r3, r2
 8011a7a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 8011a7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	085b      	lsrs	r3, r3, #1
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 8011a8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011a90:	2200      	movs	r2, #0
 8011a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011a96:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011a9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011a9e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8011aa2:	4621      	mov	r1, r4
 8011aa4:	1851      	adds	r1, r2, r1
 8011aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	eb43 0101 	adc.w	r1, r3, r1
 8011aae:	63f9      	str	r1, [r7, #60]	; 0x3c
 8011ab0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011ab4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8011ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011abc:	881b      	ldrh	r3, [r3, #0]
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011aca:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011ace:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011ad2:	f7ee fffb 	bl	8000acc <__aeabi_uldivmod>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 8011ade:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011ae2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ae6:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 8011ae8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	011a      	lsls	r2, r3, #4
 8011af0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011af4:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 8011af6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2200      	movs	r2, #0
 8011afe:	633b      	str	r3, [r7, #48]	; 0x30
 8011b00:	637a      	str	r2, [r7, #52]	; 0x34
 8011b02:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011b06:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 8011b0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b0e:	695b      	ldr	r3, [r3, #20]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011b16:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011b1e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8011b22:	4622      	mov	r2, r4
 8011b24:	fb02 f203 	mul.w	r2, r2, r3
 8011b28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	fb01 f303 	mul.w	r3, r1, r3
 8011b32:	441a      	add	r2, r3
 8011b34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011b38:	4621      	mov	r1, r4
 8011b3a:	fba3 1301 	umull	r1, r3, r3, r1
 8011b3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b42:	460b      	mov	r3, r1
 8011b44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b4c:	18d3      	adds	r3, r2, r3
 8011b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b52:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011b56:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011b5a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8011b5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011b62:	8b5b      	ldrh	r3, [r3, #26]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	2200      	movs	r2, #0
 8011b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011b6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011b74:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011b78:	4622      	mov	r2, r4
 8011b7a:	fb02 f203 	mul.w	r2, r2, r3
 8011b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011b82:	4629      	mov	r1, r5
 8011b84:	fb01 f303 	mul.w	r3, r1, r3
 8011b88:	441a      	add	r2, r3
 8011b8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011b8e:	4621      	mov	r1, r4
 8011b90:	fba3 1301 	umull	r1, r3, r3, r1
 8011b94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011b98:	460b      	mov	r3, r1
 8011b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ba2:	18d3      	adds	r3, r2, r3
 8011ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011ba8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011bac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011bb0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011bb4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011bb8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011bbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8011bbe:	f143 0300 	adc.w	r3, r3, #0
 8011bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bc4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8011bc8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011bcc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011bd0:	f04f 0000 	mov.w	r0, #0
 8011bd4:	f04f 0100 	mov.w	r1, #0
 8011bd8:	0cd0      	lsrs	r0, r2, #19
 8011bda:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011bde:	0cd9      	lsrs	r1, r3, #19
 8011be0:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 8011be4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011be8:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011bec:	6239      	str	r1, [r7, #32]
 8011bee:	f143 0300 	adc.w	r3, r3, #0
 8011bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8011bf4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011bf8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 8011bfc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011c04:	f04f 0300 	mov.w	r3, #0
 8011c08:	f7ee ff60 	bl	8000acc <__aeabi_uldivmod>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	460b      	mov	r3, r1
 8011c10:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011c14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011c18:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011c1c:	f173 0300 	sbcs.w	r3, r3, #0
 8011c20:	d305      	bcc.n	8011c2e <VL53LX_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 8011c22:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011c26:	f04f 0300 	mov.w	r3, #0
 8011c2a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 8011c2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011c32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c36:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 8011c38:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	61bb      	str	r3, [r7, #24]
 8011c42:	61fa      	str	r2, [r7, #28]
 8011c44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011c48:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 8011c4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	2200      	movs	r2, #0
 8011c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011c58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011c60:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8011c64:	4622      	mov	r2, r4
 8011c66:	fb02 f203 	mul.w	r2, r2, r3
 8011c6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011c6e:	4629      	mov	r1, r5
 8011c70:	fb01 f303 	mul.w	r3, r1, r3
 8011c74:	441a      	add	r2, r3
 8011c76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	fba3 1301 	umull	r1, r3, r3, r1
 8011c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011c84:	460b      	mov	r3, r1
 8011c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c8e:	18d3      	adds	r3, r2, r3
 8011c90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011c94:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8011c98:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011c9c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8011ca0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ca4:	8b5b      	ldrh	r3, [r3, #26]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011cae:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011cb6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8011cba:	4622      	mov	r2, r4
 8011cbc:	fb02 f203 	mul.w	r2, r2, r3
 8011cc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	fb01 f303 	mul.w	r3, r1, r3
 8011cca:	441a      	add	r2, r3
 8011ccc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	fba3 1301 	umull	r1, r3, r3, r1
 8011cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011cda:	460b      	mov	r3, r1
 8011cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ce4:	18d3      	adds	r3, r2, r3
 8011ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011cea:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011cee:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011cf2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 8011cf6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011cfa:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 8011cfe:	6139      	str	r1, [r7, #16]
 8011d00:	f143 0300 	adc.w	r3, r3, #0
 8011d04:	617b      	str	r3, [r7, #20]
 8011d06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011d0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 8011d0e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011d12:	f04f 0000 	mov.w	r0, #0
 8011d16:	f04f 0100 	mov.w	r1, #0
 8011d1a:	0cd0      	lsrs	r0, r2, #19
 8011d1c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8011d20:	0cd9      	lsrs	r1, r3, #19
 8011d22:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 8011d26:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d2e:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 8011d30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011d34:	891b      	ldrh	r3, [r3, #8]
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	2200      	movs	r2, #0
 8011d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8011d3c:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 8011d3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8011d42:	462b      	mov	r3, r5
 8011d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011d48:	4642      	mov	r2, r8
 8011d4a:	fb02 f203 	mul.w	r2, r2, r3
 8011d4e:	464b      	mov	r3, r9
 8011d50:	4621      	mov	r1, r4
 8011d52:	fb01 f303 	mul.w	r3, r1, r3
 8011d56:	4413      	add	r3, r2
 8011d58:	4622      	mov	r2, r4
 8011d5a:	4641      	mov	r1, r8
 8011d5c:	fba2 1201 	umull	r1, r2, r2, r1
 8011d60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8011d64:	460a      	mov	r2, r1
 8011d66:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8011d6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011d6e:	4413      	add	r3, r2
 8011d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011d78:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8011d7c:	4622      	mov	r2, r4
 8011d7e:	fb02 f203 	mul.w	r2, r2, r3
 8011d82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011d86:	4629      	mov	r1, r5
 8011d88:	fb01 f303 	mul.w	r3, r1, r3
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011d92:	4621      	mov	r1, r4
 8011d94:	fba2 1201 	umull	r1, r2, r2, r1
 8011d98:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8011d9c:	460a      	mov	r2, r1
 8011d9e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8011da2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011da6:	4413      	add	r3, r2
 8011da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011dac:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011db0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8011db4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 8011db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011dbc:	88db      	ldrh	r3, [r3, #6]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8011dc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011dc6:	f04f 0200 	mov.w	r2, #0
 8011dca:	f04f 0300 	mov.w	r3, #0
 8011dce:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	01cb      	lsls	r3, r1, #7
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8011ddc:	4621      	mov	r1, r4
 8011dde:	01ca      	lsls	r2, r1, #7
 8011de0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011de4:	1884      	adds	r4, r0, r2
 8011de6:	60bc      	str	r4, [r7, #8]
 8011de8:	eb41 0303 	adc.w	r3, r1, r3
 8011dec:	60fb      	str	r3, [r7, #12]
 8011dee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011df2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 8011df6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011dfa:	88db      	ldrh	r3, [r3, #6]
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	2200      	movs	r2, #0
 8011e00:	663b      	str	r3, [r7, #96]	; 0x60
 8011e02:	667a      	str	r2, [r7, #100]	; 0x64
 8011e04:	f04f 0200 	mov.w	r2, #0
 8011e08:	f04f 0300 	mov.w	r3, #0
 8011e0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011e10:	4629      	mov	r1, r5
 8011e12:	020b      	lsls	r3, r1, #8
 8011e14:	4621      	mov	r1, r4
 8011e16:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8011e1a:	4621      	mov	r1, r4
 8011e1c:	020a      	lsls	r2, r1, #8
 8011e1e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011e22:	f7ee fe53 	bl	8000acc <__aeabi_uldivmod>
 8011e26:	4602      	mov	r2, r0
 8011e28:	460b      	mov	r3, r1
 8011e2a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 8011e2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011e32:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8011e36:	6039      	str	r1, [r7, #0]
 8011e38:	f143 0300 	adc.w	r3, r3, #0
 8011e3c:	607b      	str	r3, [r7, #4]
 8011e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011e42:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64, 1000);
 8011e46:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8011e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e4e:	f04f 0300 	mov.w	r3, #0
 8011e52:	f7ee fe3b 	bl	8000acc <__aeabi_uldivmod>
 8011e56:	4602      	mov	r2, r0
 8011e58:	460b      	mov	r3, r1
 8011e5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 8011e5e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8011e62:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011e66:	f173 0300 	sbcs.w	r3, r3, #0
 8011e6a:	d305      	bcc.n	8011e78 <VL53LX_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 8011e6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8011e70:	f04f 0300 	mov.w	r3, #0
 8011e74:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 8011e78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011e7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e80:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 8011e82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e86:	69db      	ldr	r3, [r3, #28]
 8011e88:	021b      	lsls	r3, r3, #8
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fe ffcc 	bl	8010e28 <VL53LX_isqrt>
 8011e90:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 8011e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011e98:	785b      	ldrb	r3, [r3, #1]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011ea0:	fb02 f303 	mul.w	r3, r2, r3
 8011ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53LX_p_028 <
 8011ea8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011eac:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 8011eae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8011eb2:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d218      	bcs.n	8011eea <VL53LX_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 8011eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 8011ec0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011ec4:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 8011ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011ed0:	021b      	lsls	r3, r3, #8
 8011ed2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 8011ed6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8011eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d203      	bcs.n	8011eea <VL53LX_f_001+0x786>
				tmp32 = amb_thres_delta;
 8011ee2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 8011eea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011eee:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 8011ef0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ef4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 8011ef6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8011ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011efc:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 8011efe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8011f02:	f000 f854 	bl	8011fae <VL53LX_f_002>
 8011f06:	4603      	mov	r3, r0
 8011f08:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 8011f0a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f0e:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 8011f10:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f14:	6a1b      	ldr	r3, [r3, #32]
 8011f16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 8011f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011f1e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8011f22:	461a      	mov	r2, r3
 8011f24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011f28:	fb02 f303 	mul.w	r3, r2, r3
 8011f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 8011f30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011f34:	3308      	adds	r3, #8
 8011f36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 8011f3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011f3e:	091b      	lsrs	r3, r3, #4
 8011f40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 8011f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f48:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 8011f4a:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 8011f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011f50:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 8011f52:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 8011f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f58:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 8011f5a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8011f5e:	f000 f826 	bl	8011fae <VL53LX_f_002>
 8011f62:	4603      	mov	r3, r0
 8011f64:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 8011f66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f6a:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 8011f6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f70:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8011f74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f78:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	da07      	bge.n	8011f90 <VL53LX_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 8011f80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f84:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8011f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011f8c:	801a      	strh	r2, [r3, #0]
 8011f8e:	e006      	b.n	8011f9e <VL53LX_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 8011f90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f94:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8011f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011f9c:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 8011f9e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011fae <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b086      	sub	sp, #24
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	60f8      	str	r0, [r7, #12]
 8011fb6:	60b9      	str	r1, [r7, #8]
 8011fb8:	607a      	str	r2, [r7, #4]
 8011fba:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	fb03 f303 	mul.w	r3, r3, r3
 8011fd0:	693a      	ldr	r2, [r7, #16]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 8011fd6:	6938      	ldr	r0, [r7, #16]
 8011fd8:	f7fe ff26 	bl	8010e28 <VL53LX_isqrt>
 8011fdc:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 8011fde:	693a      	ldr	r2, [r7, #16]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	4413      	add	r3, r2
 8011fe4:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	011b      	lsls	r3, r3, #4
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fe ff1c 	bl	8010e28 <VL53LX_isqrt>
 8011ff0:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	fb02 f303 	mul.w	r3, r2, r3
 8011ffa:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d009      	beq.n	8012016 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 8012002:	697a      	ldr	r2, [r7, #20]
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	4413      	add	r3, r2
 8012008:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	005b      	lsls	r3, r3, #1
 801200e:	697a      	ldr	r2, [r7, #20]
 8012010:	fbb2 f3f3 	udiv	r3, r2, r3
 8012014:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 8012016:	697b      	ldr	r3, [r7, #20]

}
 8012018:	4618      	mov	r0, r3
 801201a:	3718      	adds	r7, #24
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2218      	movs	r2, #24
 8012030:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	73fb      	strb	r3, [r7, #15]
 8012056:	e01f      	b.n	8012098 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 8012058:	7bfb      	ldrb	r3, [r7, #15]
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	4413      	add	r3, r2
 801205e:	2200      	movs	r2, #0
 8012060:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 8012062:	7bfb      	ldrb	r3, [r7, #15]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	4413      	add	r3, r2
 8012068:	2200      	movs	r2, #0
 801206a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 801206e:	7bfb      	ldrb	r3, [r7, #15]
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	4413      	add	r3, r2
 8012074:	2200      	movs	r2, #0
 8012076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 801207a:	7bfa      	ldrb	r2, [r7, #15]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	322e      	adds	r2, #46	; 0x2e
 8012080:	2100      	movs	r1, #0
 8012082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 8012086:	7bfa      	ldrb	r2, [r7, #15]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	3246      	adds	r2, #70	; 0x46
 801208c:	2100      	movs	r1, #0
 801208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 8012092:	7bfb      	ldrb	r3, [r7, #15]
 8012094:	3301      	adds	r3, #1
 8012096:	73fb      	strb	r3, [r7, #15]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	785b      	ldrb	r3, [r3, #1]
 801209c:	7bfa      	ldrb	r2, [r7, #15]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d3da      	bcc.n	8012058 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2208      	movs	r2, #8
 80120ae:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80120c0:	461a      	mov	r2, r3
 80120c2:	2118      	movs	r1, #24
 80120c4:	2000      	movs	r0, #0
 80120c6:	f7ff f9e8 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80120d0:	461a      	mov	r2, r3
 80120d2:	2118      	movs	r1, #24
 80120d4:	2000      	movs	r0, #0
 80120d6:	f7ff f9e0 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80120e0:	461a      	mov	r2, r3
 80120e2:	2118      	movs	r1, #24
 80120e4:	2000      	movs	r0, #0
 80120e6:	f7ff f9d8 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80120f0:	461a      	mov	r2, r3
 80120f2:	2118      	movs	r1, #24
 80120f4:	2000      	movs	r0, #0
 80120f6:	f7ff f9d0 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8012100:	461a      	mov	r2, r3
 8012102:	2118      	movs	r1, #24
 8012104:	2000      	movs	r0, #0
 8012106:	f7ff f9c8 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 801210a:	bf00      	nop
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8012112:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012116:	b090      	sub	sp, #64	; 0x40
 8012118:	af00      	add	r7, sp, #0
 801211a:	61b9      	str	r1, [r7, #24]
 801211c:	617a      	str	r2, [r7, #20]
 801211e:	461a      	mov	r2, r3
 8012120:	4603      	mov	r3, r0
 8012122:	83fb      	strh	r3, [r7, #30]
 8012124:	4613      	mov	r3, r2
 8012126:	777b      	strb	r3, [r7, #29]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8012128:	2300      	movs	r3, #0
 801212a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53LX_p_001            = 0;
 8012134:	2300      	movs	r3, #0
 8012136:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 801213a:	f04f 0200 	mov.w	r2, #0
 801213e:	f04f 0300 	mov.w	r3, #0
 8012142:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 8012146:	2300      	movs	r3, #0
 8012148:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53LX_p_018       = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 801214e:	2300      	movs	r3, #0
 8012150:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 8012152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012154:	7a5a      	ldrb	r2, [r3, #9]
 8012156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012158:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 801215a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801215c:	7a1a      	ldrb	r2, [r3, #8]
 801215e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012160:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 8012162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012164:	7a9a      	ldrb	r2, [r3, #10]
 8012166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012168:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 801216a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801216c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8012170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012172:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 8012174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff f93c 	bl	80113f8 <VL53LX_decode_vcsel_period>
 8012180:	4603      	mov	r3, r0
 8012182:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 8012184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012186:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 8012188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801218a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801218e:	17da      	asrs	r2, r3, #31
 8012190:	60bb      	str	r3, [r7, #8]
 8012192:	60fa      	str	r2, [r7, #12]
 8012194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012198:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 801219c:	8bfb      	ldrh	r3, [r7, #30]
 801219e:	2200      	movs	r2, #0
 80121a0:	4698      	mov	r8, r3
 80121a2:	4691      	mov	r9, r2
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	fb08 f203 	mul.w	r2, r8, r3
 80121aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ac:	fb09 f303 	mul.w	r3, r9, r3
 80121b0:	4413      	add	r3, r2
 80121b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121b4:	fba2 4508 	umull	r4, r5, r2, r8
 80121b8:	442b      	add	r3, r5
 80121ba:	461d      	mov	r5, r3
 80121bc:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 80121c0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 80121c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121c8:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80121cc:	f143 0b00 	adc.w	fp, r3, #0
 80121d0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 80121d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121d8:	2b00      	cmp	r3, #0
 80121da:	da08      	bge.n	80121ee <VL53LX_f_006+0xdc>
 80121dc:	f640 71ff 	movw	r1, #4095	; 0xfff
 80121e0:	1851      	adds	r1, r2, r1
 80121e2:	6039      	str	r1, [r7, #0]
 80121e4:	f143 0300 	adc.w	r3, r3, #0
 80121e8:	607b      	str	r3, [r7, #4]
 80121ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121ee:	f04f 0000 	mov.w	r0, #0
 80121f2:	f04f 0100 	mov.w	r1, #0
 80121f6:	0b10      	lsrs	r0, r2, #12
 80121f8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80121fc:	1319      	asrs	r1, r3, #12
 80121fe:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 8012202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012204:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 8012206:	2300      	movs	r3, #0
 8012208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801220c:	e062      	b.n	80122d4 <VL53LX_f_006+0x1c2>

		VL53LX_p_001 = lb >> 2;
 801220e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012212:	089b      	lsrs	r3, r3, #2
 8012214:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 8012218:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801221c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801221e:	4413      	add	r3, r2
 8012220:	7c9b      	ldrb	r3, [r3, #18]
 8012222:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd4f      	ble.n	80122ca <VL53LX_f_006+0x1b8>

			if (lb < pxtalk->VL53LX_p_021 &&
 801222a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801222c:	7a9b      	ldrb	r3, [r3, #10]
 801222e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012232:	429a      	cmp	r2, r3
 8012234:	d20f      	bcs.n	8012256 <VL53LX_f_006+0x144>
 8012236:	7f7b      	ldrb	r3, [r7, #29]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00c      	beq.n	8012256 <VL53LX_f_006+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 801223c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012242:	3206      	adds	r2, #6
 8012244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 8012248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224a:	441a      	add	r2, r3
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	fb02 f303 	mul.w	r3, r2, r3
 8012252:	63bb      	str	r3, [r7, #56]	; 0x38
 8012254:	e004      	b.n	8012260 <VL53LX_f_006+0x14e>
			else
				VL53LX_p_018 = samples *  amb_events;
 8012256:	6a3b      	ldr	r3, [r7, #32]
 8012258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225a:	fb02 f303 	mul.w	r3, r2, r3
 801225e:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 8012260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012262:	4618      	mov	r0, r3
 8012264:	f7fe fde0 	bl	8010e28 <VL53LX_isqrt>
 8012268:	4603      	mov	r3, r0
 801226a:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53LX_p_018 += (samples/2);
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	0fda      	lsrs	r2, r3, #31
 8012270:	4413      	add	r3, r2
 8012272:	105b      	asrs	r3, r3, #1
 8012274:	461a      	mov	r2, r3
 8012276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012278:	4413      	add	r3, r2
 801227a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= samples;
 801227c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801227e:	6a3b      	ldr	r3, [r7, #32]
 8012280:	fb92 f3f3 	sdiv	r3, r2, r3
 8012284:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 *= ambient_threshold_sigma;
 8012286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012288:	69ba      	ldr	r2, [r7, #24]
 801228a:	fb02 f303 	mul.w	r3, r2, r3
 801228e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += 8;
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	3308      	adds	r3, #8
 8012294:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 /= 16;
 8012296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012298:	2b00      	cmp	r3, #0
 801229a:	da00      	bge.n	801229e <VL53LX_f_006+0x18c>
 801229c:	330f      	adds	r3, #15
 801229e:	111b      	asrs	r3, r3, #4
 80122a0:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LX_p_018 += amb_events;
 80122a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a6:	4413      	add	r3, r2
 80122a8:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53LX_p_018 < min_ambient_threshold_events)
 80122aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	da01      	bge.n	80122b6 <VL53LX_f_006+0x1a4>
				VL53LX_p_018 = min_ambient_threshold_events;
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 80122b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80122ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122bc:	3216      	adds	r2, #22
 80122be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 80122c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122c8:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 80122ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80122ce:	3301      	adds	r3, #1
 80122d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80122d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122d6:	7a9b      	ldrb	r3, [r3, #10]
 80122d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80122dc:	429a      	cmp	r2, r3
 80122de:	d396      	bcc.n	801220e <VL53LX_f_006+0xfc>

	}



	palgo->VL53LX_p_039 = 0;
 80122e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122e2:	2200      	movs	r2, #0
 80122e4:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 80122e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122e8:	7a1b      	ldrb	r3, [r3, #8]
 80122ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80122ee:	e033      	b.n	8012358 <VL53LX_f_006+0x246>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 80122f0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80122f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122f6:	3206      	adds	r2, #6
 80122f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80122fc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8012300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012302:	3116      	adds	r1, #22
 8012304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012308:	429a      	cmp	r2, r3
 801230a:	dd13      	ble.n	8012334 <VL53LX_f_006+0x222>
			palgo->VL53LX_p_040[lb]      = 1;
 801230c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012310:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012312:	4413      	add	r3, r2
 8012314:	2201      	movs	r2, #1
 8012316:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 8012318:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801231c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801231e:	4413      	add	r3, r2
 8012320:	2201      	movs	r2, #1
 8012322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 8012326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012328:	791b      	ldrb	r3, [r3, #4]
 801232a:	3301      	adds	r3, #1
 801232c:	b2da      	uxtb	r2, r3
 801232e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012330:	711a      	strb	r2, [r3, #4]
 8012332:	e00c      	b.n	801234e <VL53LX_f_006+0x23c>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 8012334:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801233a:	4413      	add	r3, r2
 801233c:	2200      	movs	r2, #0
 801233e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 8012340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012346:	4413      	add	r3, r2
 8012348:	2200      	movs	r2, #0
 801234a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 801234e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012352:	3301      	adds	r3, #1
 8012354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801235a:	7a9b      	ldrb	r3, [r3, #10]
 801235c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012360:	429a      	cmp	r2, r3
 8012362:	d3c5      	bcc.n	80122f0 <VL53LX_f_006+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012364:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 8012368:	4618      	mov	r0, r3
 801236a:	3740      	adds	r7, #64	; 0x40
 801236c:	46bd      	mov	sp, r7
 801236e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012372 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8012372:	b480      	push	{r7}
 8012374:	b085      	sub	sp, #20
 8012376:	af00      	add	r7, sp, #0
 8012378:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 801237a:	2300      	movs	r3, #0
 801237c:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 8012382:	2300      	movs	r3, #0
 8012384:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 8012386:	2300      	movs	r3, #0
 8012388:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 8012392:	2300      	movs	r3, #0
 8012394:	73fb      	strb	r3, [r7, #15]
 8012396:	e02d      	b.n	80123f4 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 8012398:	7bfb      	ldrb	r3, [r7, #15]
 801239a:	3301      	adds	r3, #1
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	78d2      	ldrb	r2, [r2, #3]
 80123a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80123a4:	fb01 f202 	mul.w	r2, r1, r2
 80123a8:	1a9b      	subs	r3, r3, r2
 80123aa:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	789b      	ldrb	r3, [r3, #2]
 80123b0:	7bfa      	ldrb	r2, [r7, #15]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d21b      	bcs.n	80123ee <VL53LX_f_007+0x7c>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	789b      	ldrb	r3, [r3, #2]
 80123ba:	7b3a      	ldrb	r2, [r7, #12]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d216      	bcs.n	80123ee <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	4413      	add	r3, r2
 80123c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d10f      	bne.n	80123ee <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 80123ce:	7b3b      	ldrb	r3, [r7, #12]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	4413      	add	r3, r2
 80123d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d108      	bne.n	80123ee <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 80123dc:	7bbb      	ldrb	r3, [r7, #14]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d105      	bne.n	80123ee <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	7bfa      	ldrb	r2, [r7, #15]
 80123e6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 80123ea:	2301      	movs	r3, #1
 80123ec:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 80123ee:	7bfb      	ldrb	r3, [r7, #15]
 80123f0:	3301      	adds	r3, #1
 80123f2:	73fb      	strb	r3, [r7, #15]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	78db      	ldrb	r3, [r3, #3]
 80123f8:	7bfa      	ldrb	r2, [r7, #15]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d3cc      	bcc.n	8012398 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80123fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8012402:	4618      	mov	r0, r3
 8012404:	3714      	adds	r7, #20
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr

0801240e <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 801240e:	b480      	push	{r7}
 8012410:	b085      	sub	sp, #20
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8012416:	2300      	movs	r3, #0
 8012418:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 8012422:	2300      	movs	r3, #0
 8012424:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801242c:	73fb      	strb	r3, [r7, #15]
 801242e:	e05a      	b.n	80124e6 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	78da      	ldrb	r2, [r3, #3]
 8012434:	7bfb      	ldrb	r3, [r7, #15]
 8012436:	fbb3 f1f2 	udiv	r1, r3, r2
 801243a:	fb01 f202 	mul.w	r2, r1, r2
 801243e:	1a9b      	subs	r3, r3, r2
 8012440:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 8012442:	7bfb      	ldrb	r3, [r7, #15]
 8012444:	3301      	adds	r3, #1
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	78d2      	ldrb	r2, [r2, #3]
 801244a:	fb93 f1f2 	sdiv	r1, r3, r2
 801244e:	fb01 f202 	mul.w	r2, r1, r2
 8012452:	1a9b      	subs	r3, r3, r2
 8012454:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	789b      	ldrb	r3, [r3, #2]
 801245a:	7b7a      	ldrb	r2, [r7, #13]
 801245c:	429a      	cmp	r2, r3
 801245e:	d23f      	bcs.n	80124e0 <VL53LX_f_008+0xd2>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	789b      	ldrb	r3, [r3, #2]
 8012464:	7b3a      	ldrb	r2, [r7, #12]
 8012466:	429a      	cmp	r2, r3
 8012468:	d23a      	bcs.n	80124e0 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 801246a:	7b7b      	ldrb	r3, [r7, #13]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	4413      	add	r3, r2
 8012470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012474:	2b00      	cmp	r3, #0
 8012476:	d10e      	bne.n	8012496 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 8012478:	7b3b      	ldrb	r3, [r7, #12]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	4413      	add	r3, r2
 801247e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 8012482:	2b01      	cmp	r3, #1
 8012484:	d107      	bne.n	8012496 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801248c:	3301      	adds	r3, #1
 801248e:	b2da      	uxtb	r2, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d905      	bls.n	80124b2 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 80124b2:	7b7b      	ldrb	r3, [r7, #13]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	4413      	add	r3, r2
 80124b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d009      	beq.n	80124d4 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 80124c0:	7b7b      	ldrb	r3, [r7, #13]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	4413      	add	r3, r2
 80124cc:	460a      	mov	r2, r1
 80124ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80124d2:	e005      	b.n	80124e0 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 80124d4:	7b7b      	ldrb	r3, [r7, #13]
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	4413      	add	r3, r2
 80124da:	2200      	movs	r2, #0
 80124dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	3301      	adds	r3, #1
 80124e4:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 80124e6:	7bfa      	ldrb	r2, [r7, #15]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80124ee:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 80124f4:	440b      	add	r3, r1
 80124f6:	429a      	cmp	r2, r3
 80124f8:	db9a      	blt.n	8012430 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 80124fa:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 80124fe:	4618      	mov	r0, r3
 8012500:	3714      	adds	r7, #20
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr

0801250a <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 801250a:	b480      	push	{r7}
 801250c:	b087      	sub	sp, #28
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8012512:	2300      	movs	r3, #0
 8012514:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012516:	2300      	movs	r3, #0
 8012518:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	78db      	ldrb	r3, [r3, #3]
 801252e:	3b01      	subs	r3, #1
 8012530:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 8012532:	7cbb      	ldrb	r3, [r7, #18]
 8012534:	085b      	lsrs	r3, r3, #1
 8012536:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801253e:	75fb      	strb	r3, [r7, #23]
 8012540:	e0a2      	b.n	8012688 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	78da      	ldrb	r2, [r3, #3]
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	fbb3 f1f2 	udiv	r1, r3, r2
 801254c:	fb01 f202 	mul.w	r2, r1, r2
 8012550:	1a9b      	subs	r3, r3, r2
 8012552:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 8012554:	7dfb      	ldrb	r3, [r7, #23]
 8012556:	3301      	adds	r3, #1
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	78d2      	ldrb	r2, [r2, #3]
 801255c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012560:	fb01 f202 	mul.w	r2, r1, r2
 8012564:	1a9b      	subs	r3, r3, r2
 8012566:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	789b      	ldrb	r3, [r3, #2]
 801256c:	7d7a      	ldrb	r2, [r7, #21]
 801256e:	429a      	cmp	r2, r3
 8012570:	f080 8087 	bcs.w	8012682 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 8012578:	7d3a      	ldrb	r2, [r7, #20]
 801257a:	429a      	cmp	r2, r3
 801257c:	f080 8081 	bcs.w	8012682 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 8012580:	7d7b      	ldrb	r3, [r7, #21]
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	4413      	add	r3, r2
 8012586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801258a:	2b00      	cmp	r3, #0
 801258c:	d12f      	bne.n	80125ee <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 801258e:	7d3b      	ldrb	r3, [r7, #20]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	4413      	add	r3, r2
 8012594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 8012598:	2b00      	cmp	r3, #0
 801259a:	d028      	beq.n	80125ee <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 801259c:	7d3b      	ldrb	r3, [r7, #20]
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	4413      	add	r3, r2
 80125a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125a6:	3b01      	subs	r3, #1
 80125a8:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80125b0:	7cfa      	ldrb	r2, [r7, #19]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d21b      	bcs.n	80125ee <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 80125b6:	7cfa      	ldrb	r2, [r7, #19]
 80125b8:	4613      	mov	r3, r2
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	4413      	add	r3, r2
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	4413      	add	r3, r2
 80125c8:	3304      	adds	r3, #4
 80125ca:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	7dfa      	ldrb	r2, [r7, #23]
 80125d0:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 80125d2:	7dfb      	ldrb	r3, [r7, #23]
 80125d4:	3301      	adds	r3, #1
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	22ff      	movs	r2, #255	; 0xff
 80125e0:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2200      	movs	r2, #0
 80125e6:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	2200      	movs	r2, #0
 80125ec:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 80125ee:	7d7b      	ldrb	r3, [r7, #21]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	4413      	add	r3, r2
 80125f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d042      	beq.n	8012682 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 80125fc:	7d3b      	ldrb	r3, [r7, #20]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	4413      	add	r3, r2
 8012602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012606:	2b00      	cmp	r3, #0
 8012608:	d13b      	bne.n	8012682 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 801260a:	7d7b      	ldrb	r3, [r7, #21]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	4413      	add	r3, r2
 8012610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012614:	3b01      	subs	r3, #1
 8012616:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 801261e:	7cfa      	ldrb	r2, [r7, #19]
 8012620:	429a      	cmp	r2, r3
 8012622:	d22e      	bcs.n	8012682 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 8012624:	7cfa      	ldrb	r2, [r7, #19]
 8012626:	4613      	mov	r3, r2
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	4413      	add	r3, r2
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	4413      	add	r3, r2
 8012636:	3304      	adds	r3, #4
 8012638:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	7dfa      	ldrb	r2, [r7, #23]
 801263e:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 8012640:	7dfb      	ldrb	r3, [r7, #23]
 8012642:	3301      	adds	r3, #1
 8012644:	b2da      	uxtb	r2, r3
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	b2db      	uxtb	r3, r3
 8012656:	3301      	adds	r3, #1
 8012658:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	b2db      	uxtb	r3, r3
 801266a:	3301      	adds	r3, #1
 801266c:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	799b      	ldrb	r3, [r3, #6]
 8012676:	7cba      	ldrb	r2, [r7, #18]
 8012678:	429a      	cmp	r2, r3
 801267a:	d202      	bcs.n	8012682 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	7cba      	ldrb	r2, [r7, #18]
 8012680:	719a      	strb	r2, [r3, #6]
		blb++) {
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	3301      	adds	r3, #1
 8012686:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 8012688:	7dfa      	ldrb	r2, [r7, #23]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012690:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 8012696:	440b      	add	r3, r1
 8012698:	429a      	cmp	r2, r3
 801269a:	f6ff af52 	blt.w	8012542 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801269e:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 80126a2:	4618      	mov	r0, r3
 80126a4:	371c      	adds	r7, #28
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr

080126ae <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b090      	sub	sp, #64	; 0x40
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	4603      	mov	r3, r0
 80126b6:	6039      	str	r1, [r7, #0]
 80126b8:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 80126ba:	2300      	movs	r3, #0
 80126bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 80126c0:	f107 030c 	add.w	r3, r7, #12
 80126c4:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 80126cc:	2301      	movs	r3, #1
 80126ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d965      	bls.n	80127a8 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 80126dc:	e05f      	b.n	801279e <VL53LX_f_016+0xf0>

		swapped = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 80126e4:	2301      	movs	r3, #1
 80126e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80126ea:	e051      	b.n	8012790 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 80126ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126f0:	1e5a      	subs	r2, r3, #1
 80126f2:	4613      	mov	r3, r2
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	4413      	add	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80126fe:	683a      	ldr	r2, [r7, #0]
 8012700:	4413      	add	r3, r2
 8012702:	3304      	adds	r3, #4
 8012704:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 8012706:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801270a:	4613      	mov	r3, r2
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012716:	683a      	ldr	r2, [r7, #0]
 8012718:	4413      	add	r3, r2
 801271a:	3304      	adds	r3, #4
 801271c:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 801271e:	79fb      	ldrb	r3, [r7, #7]
 8012720:	2b02      	cmp	r3, #2
 8012722:	d118      	bne.n	8012756 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 8012724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012726:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 8012728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272a:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 801272c:	429a      	cmp	r2, r3
 801272e:	da2a      	bge.n	8012786 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 8012730:	2224      	movs	r2, #36	; 0x24
 8012732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012736:	f005 f86c 	bl	8017812 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 801273a:	2224      	movs	r2, #36	; 0x24
 801273c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801273e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012740:	f005 f867 	bl	8017812 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 8012744:	2224      	movs	r2, #36	; 0x24
 8012746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012748:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801274a:	f005 f862 	bl	8017812 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 801274e:	2301      	movs	r3, #1
 8012750:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8012754:	e017      	b.n	8012786 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 8012756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012758:	699a      	ldr	r2, [r3, #24]
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	699b      	ldr	r3, [r3, #24]
 801275e:	429a      	cmp	r2, r3
 8012760:	d911      	bls.n	8012786 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 8012762:	2224      	movs	r2, #36	; 0x24
 8012764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012768:	f005 f853 	bl	8017812 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 801276c:	2224      	movs	r2, #36	; 0x24
 801276e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012772:	f005 f84e 	bl	8017812 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 8012776:	2224      	movs	r2, #36	; 0x24
 8012778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801277a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801277c:	f005 f849 	bl	8017812 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 8012780:	2301      	movs	r3, #1
 8012782:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 8012786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801278a:	3301      	adds	r3, #1
 801278c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8012796:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801279a:	429a      	cmp	r2, r3
 801279c:	d3a6      	bcc.n	80126ec <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 801279e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d19b      	bne.n	80126de <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 80127a6:	e000      	b.n	80127aa <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 80127a8:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 80127aa:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3740      	adds	r7, #64	; 0x40
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80127b6:	b480      	push	{r7}
 80127b8:	b087      	sub	sp, #28
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	4603      	mov	r3, r0
 80127be:	60b9      	str	r1, [r7, #8]
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 80127c4:	2300      	movs	r3, #0
 80127c6:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80127c8:	2300      	movs	r3, #0
 80127ca:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 80127d0:	7bfa      	ldrb	r2, [r7, #15]
 80127d2:	4613      	mov	r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	4413      	add	r3, r2
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	4413      	add	r3, r2
 80127e2:	3304      	adds	r3, #4
 80127e4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	2200      	movs	r2, #0
 80127ea:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	2200      	movs	r2, #0
 80127f0:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	75fb      	strb	r3, [r7, #23]
 80127f8:	e01c      	b.n	8012834 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	78da      	ldrb	r2, [r3, #3]
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	fbb3 f1f2 	udiv	r1, r3, r2
 8012804:	fb01 f202 	mul.w	r2, r1, r2
 8012808:	1a9b      	subs	r3, r3, r2
 801280a:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	68da      	ldr	r2, [r3, #12]
 8012810:	7d79      	ldrb	r1, [r7, #21]
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	3106      	adds	r1, #6
 8012816:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801281a:	441a      	add	r2, r3
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	689a      	ldr	r2, [r3, #8]
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	441a      	add	r2, r3
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 801282e:	7dfb      	ldrb	r3, [r7, #23]
 8012830:	3301      	adds	r3, #1
 8012832:	75fb      	strb	r3, [r7, #23]
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	791b      	ldrb	r3, [r3, #4]
 8012838:	7dfa      	ldrb	r2, [r7, #23]
 801283a:	429a      	cmp	r2, r3
 801283c:	d9dd      	bls.n	80127fa <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	68da      	ldr	r2, [r3, #12]
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	689b      	ldr	r3, [r3, #8]
 8012846:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 801284c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012850:	4618      	mov	r0, r3
 8012852:	371c      	adds	r7, #28
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr

0801285c <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b08d      	sub	sp, #52	; 0x34
 8012860:	af02      	add	r7, sp, #8
 8012862:	60ba      	str	r2, [r7, #8]
 8012864:	607b      	str	r3, [r7, #4]
 8012866:	4603      	mov	r3, r0
 8012868:	73fb      	strb	r3, [r7, #15]
 801286a:	460b      	mov	r3, r1
 801286c:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 801286e:	2300      	movs	r3, #0
 8012870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8012874:	2300      	movs	r3, #0
 8012876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 801287a:	2300      	movs	r3, #0
 801287c:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 8012886:	2300      	movs	r3, #0
 8012888:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 801288a:	7bfa      	ldrb	r2, [r7, #15]
 801288c:	4613      	mov	r3, r2
 801288e:	00db      	lsls	r3, r3, #3
 8012890:	4413      	add	r3, r2
 8012892:	009b      	lsls	r3, r3, #2
 8012894:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	4413      	add	r3, r2
 801289c:	3304      	adds	r3, #4
 801289e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	789b      	ldrb	r3, [r3, #2]
 80128a4:	2bff      	cmp	r3, #255	; 0xff
 80128a6:	d102      	bne.n	80128ae <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	2201      	movs	r2, #1
 80128ac:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	789b      	ldrb	r3, [r3, #2]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	78d2      	ldrb	r2, [r2, #3]
 80128b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80128ba:	fb01 f202 	mul.w	r2, r1, r2
 80128be:	1a9b      	subs	r3, r3, r2
 80128c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 80128c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128c8:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	8c3b      	ldrh	r3, [r7, #32]
 80128d2:	4413      	add	r3, r2
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 80128d8:	8c3a      	ldrh	r2, [r7, #32]
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	789b      	ldrb	r3, [r3, #2]
 80128de:	b29b      	uxth	r3, r3
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 80128e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128ea:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	791b      	ldrb	r3, [r3, #4]
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	8bfb      	ldrh	r3, [r7, #30]
 80128f4:	4413      	add	r3, r2
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 80128fa:	8bfa      	ldrh	r2, [r7, #30]
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	789b      	ldrb	r3, [r3, #2]
 8012900:	b29b      	uxth	r3, r3
 8012902:	1ad3      	subs	r3, r2, r3
 8012904:	b29b      	uxth	r3, r3
 8012906:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 8012908:	8bfa      	ldrh	r2, [r7, #30]
 801290a:	8c3b      	ldrh	r3, [r7, #32]
 801290c:	1ad3      	subs	r3, r2, r3
 801290e:	b29b      	uxth	r3, r3
 8012910:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 8012912:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012916:	2b03      	cmp	r3, #3
 8012918:	dd01      	ble.n	801291e <VL53LX_f_015+0xc2>
		window_width = 3;
 801291a:	2303      	movs	r3, #3
 801291c:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 801291e:	8c3a      	ldrh	r2, [r7, #32]
 8012920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012922:	4413      	add	r3, r2
 8012924:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 8012926:	b219      	sxth	r1, r3
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	78da      	ldrb	r2, [r3, #3]
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	3314      	adds	r3, #20
 8012930:	7bbc      	ldrb	r4, [r7, #14]
 8012932:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012936:	9301      	str	r3, [sp, #4]
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	9300      	str	r3, [sp, #0]
 801293c:	4623      	mov	r3, r4
 801293e:	f000 f846 	bl	80129ce <VL53LX_f_020>
 8012942:	4603      	mov	r3, r0
 8012944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 8012948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801294c:	2b00      	cmp	r3, #0
 801294e:	d114      	bne.n	801297a <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 8012950:	8bfa      	ldrh	r2, [r7, #30]
 8012952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 8012958:	b218      	sxth	r0, r3
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	78da      	ldrb	r2, [r3, #3]
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	331c      	adds	r3, #28
 8012962:	7bbc      	ldrb	r4, [r7, #14]
 8012964:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	4623      	mov	r3, r4
 8012970:	f000 f82d 	bl	80129ce <VL53LX_f_020>
 8012974:	4603      	mov	r3, r0
 8012976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	695a      	ldr	r2, [r3, #20]
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	69db      	ldr	r3, [r3, #28]
 8012982:	429a      	cmp	r2, r3
 8012984:	d909      	bls.n	801299a <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	695b      	ldr	r3, [r3, #20]
 801298a:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	69da      	ldr	r2, [r3, #28]
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	69ba      	ldr	r2, [r7, #24]
 8012998:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	699a      	ldr	r2, [r3, #24]
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	695b      	ldr	r3, [r3, #20]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d203      	bcs.n	80129ae <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	699a      	ldr	r2, [r3, #24]
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	699a      	ldr	r2, [r3, #24]
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	69db      	ldr	r3, [r3, #28]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d903      	bls.n	80129c2 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	699a      	ldr	r2, [r3, #24]
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 80129c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	372c      	adds	r7, #44	; 0x2c
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd90      	pop	{r4, r7, pc}

080129ce <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 80129ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d2:	b09d      	sub	sp, #116	; 0x74
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	461c      	mov	r4, r3
 80129d8:	4603      	mov	r3, r0
 80129da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80129de:	460b      	mov	r3, r1
 80129e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80129e4:	4613      	mov	r3, r2
 80129e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129ea:	4623      	mov	r3, r4
 80129ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 80129f0:	2300      	movs	r3, #0
 80129f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80129f6:	2300      	movs	r3, #0
 80129f8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53LX_p_018        = 0;
 8012a02:	f04f 0200 	mov.w	r2, #0
 8012a06:	f04f 0300 	mov.w	r3, #0
 8012a0a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8012a0e:	f04f 0200 	mov.w	r2, #0
 8012a12:	f04f 0300 	mov.w	r3, #0
 8012a16:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 8012a1a:	f04f 0200 	mov.w	r2, #0
 8012a1e:	f04f 0300 	mov.w	r3, #0
 8012a22:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 8012a26:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a2e:	6013      	str	r3, [r2, #0]

	if (VL53LX_p_030 != 0)
 8012a30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f000 809c 	beq.w	8012b72 <VL53LX_f_020+0x1a4>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 8012a3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012a3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012a42:	e08f      	b.n	8012b64 <VL53LX_f_020+0x196>

		if (lb < 0)
 8012a44:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	da09      	bge.n	8012a60 <VL53LX_f_020+0x92>
			i = lb + (int16_t)VL53LX_p_030;
 8012a4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012a56:	4413      	add	r3, r2
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8012a5e:	e00a      	b.n	8012a76 <VL53LX_f_020+0xa8>
		else
			i = lb % (int16_t)VL53LX_p_030;
 8012a60:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8012a64:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8012a68:	fb91 f3f2 	sdiv	r3, r1, r2
 8012a6c:	fb02 f303 	mul.w	r3, r2, r3
 8012a70:	1acb      	subs	r3, r1, r3
 8012a72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 8012a76:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	db6b      	blt.n	8012b56 <VL53LX_f_020+0x188>
 8012a7e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012a82:	2b17      	cmp	r3, #23
 8012a84:	dc67      	bgt.n	8012b56 <VL53LX_f_020+0x188>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 8012a86:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8012a8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012a8e:	3306      	adds	r3, #6
 8012a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a94:	17da      	asrs	r2, r3, #31
 8012a96:	633b      	str	r3, [r7, #48]	; 0x30
 8012a98:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53LX_p_028;
 8012a9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012aa2:	17da      	asrs	r2, r3, #31
 8012aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8012aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53LX_p_018 =
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012aae:	4602      	mov	r2, r0
 8012ab0:	1a9b      	subs	r3, r3, r2
 8012ab2:	623b      	str	r3, [r7, #32]
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab6:	460a      	mov	r2, r1
 8012ab8:	eb63 0302 	sbc.w	r3, r3, r2
 8012abc:	627b      	str	r3, [r7, #36]	; 0x24
 8012abe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012ac2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53LX_p_018 < 0)
 8012ac6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d009      	beq.n	8012ae2 <VL53LX_f_020+0x114>
 8012ace:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	da05      	bge.n	8012ae2 <VL53LX_f_020+0x114>
				VL53LX_p_018 = 0;
 8012ad6:	f04f 0200 	mov.w	r2, #0
 8012ada:	f04f 0300 	mov.w	r3, #0
 8012ade:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53LX_p_018;
 8012ae2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012ae6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012aea:	1884      	adds	r4, r0, r2
 8012aec:	61bc      	str	r4, [r7, #24]
 8012aee:	eb41 0303 	adc.w	r3, r1, r3
 8012af2:	61fb      	str	r3, [r7, #28]
 8012af4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8012af8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 8012afc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012b00:	17da      	asrs	r2, r3, #31
 8012b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012b06:	f04f 0200 	mov.w	r2, #0
 8012b0a:	f04f 0300 	mov.w	r3, #0
 8012b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b10:	02cb      	lsls	r3, r1, #11
 8012b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b14:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8012b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b1a:	02ca      	lsls	r2, r1, #11
 8012b1c:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8012b20:	f143 0600 	adc.w	r6, r3, #0
 8012b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b26:	fb06 f203 	mul.w	r2, r6, r3
 8012b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b2c:	fb05 f303 	mul.w	r3, r5, r3
 8012b30:	441a      	add	r2, r3
 8012b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b34:	fba3 ab05 	umull	sl, fp, r3, r5
 8012b38:	eb02 030b 	add.w	r3, r2, fp
 8012b3c:	469b      	mov	fp, r3
			weighted_sum +=
 8012b3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012b42:	eb12 010a 	adds.w	r1, r2, sl
 8012b46:	6139      	str	r1, [r7, #16]
 8012b48:	eb43 030b 	adc.w	r3, r3, fp
 8012b4c:	617b      	str	r3, [r7, #20]
 8012b4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012b52:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 8012b56:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8012b64:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8012b68:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	f77f af69 	ble.w	8012a44 <VL53LX_f_020+0x76>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 8012b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012b76:	2a01      	cmp	r2, #1
 8012b78:	f173 0300 	sbcs.w	r3, r3, #0
 8012b7c:	db3b      	blt.n	8012bf6 <VL53LX_f_020+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8012b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012b82:	0fd9      	lsrs	r1, r3, #31
 8012b84:	2000      	movs	r0, #0
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012b8e:	4621      	mov	r1, r4
 8012b90:	eb11 0802 	adds.w	r8, r1, r2
 8012b94:	4629      	mov	r1, r5
 8012b96:	eb41 0903 	adc.w	r9, r1, r3
 8012b9a:	f04f 0200 	mov.w	r2, #0
 8012b9e:	f04f 0300 	mov.w	r3, #0
 8012ba2:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8012ba6:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 8012baa:	ea4f 0369 	mov.w	r3, r9, asr #1
 8012bae:	4610      	mov	r0, r2
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012bb6:	1814      	adds	r4, r2, r0
 8012bb8:	603c      	str	r4, [r7, #0]
 8012bba:	414b      	adcs	r3, r1
 8012bbc:	607b      	str	r3, [r7, #4]
 8012bbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012bc2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8012bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012bce:	f7ed ff2d 	bl	8000a2c <__aeabi_ldivmod>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 8012bda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	da05      	bge.n	8012bee <VL53LX_f_020+0x220>
			weighted_sum = 0;
 8012be2:	f04f 0200 	mov.w	r2, #0
 8012be6:	f04f 0300 	mov.w	r3, #0
 8012bea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8012bee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012bf4:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8012bf6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3774      	adds	r7, #116	; 0x74
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c04 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b086      	sub	sp, #24
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60b9      	str	r1, [r7, #8]
 8012c0c:	607a      	str	r2, [r7, #4]
 8012c0e:	603b      	str	r3, [r7, #0]
 8012c10:	4603      	mov	r3, r0
 8012c12:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8012c14:	2300      	movs	r3, #0
 8012c16:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 8012c20:	7bfa      	ldrb	r2, [r7, #15]
 8012c22:	4613      	mov	r3, r2
 8012c24:	00db      	lsls	r3, r3, #3
 8012c26:	4413      	add	r3, r2
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	4413      	add	r3, r2
 8012c32:	3304      	adds	r3, #4
 8012c34:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 8012c36:	22ac      	movs	r2, #172	; 0xac
 8012c38:	68b9      	ldr	r1, [r7, #8]
 8012c3a:	6a38      	ldr	r0, [r7, #32]
 8012c3c:	f004 fde9 	bl	8017812 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012c46:	75fb      	strb	r3, [r7, #23]
 8012c48:	e020      	b.n	8012c8c <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	7dfa      	ldrb	r2, [r7, #23]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d304      	bcc.n	8012c5e <VL53LX_f_011+0x5a>
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	791b      	ldrb	r3, [r3, #4]
 8012c58:	7dfa      	ldrb	r2, [r7, #23]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d913      	bls.n	8012c86 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	78da      	ldrb	r2, [r3, #3]
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
 8012c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c68:	fb01 f202 	mul.w	r2, r1, r2
 8012c6c:	1a9b      	subs	r3, r3, r2
 8012c6e:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 8012c70:	6a3b      	ldr	r3, [r7, #32]
 8012c72:	7a9b      	ldrb	r3, [r3, #10]
 8012c74:	7d7a      	ldrb	r2, [r7, #21]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d205      	bcs.n	8012c86 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 8012c7a:	7d7a      	ldrb	r2, [r7, #21]
 8012c7c:	6a3b      	ldr	r3, [r7, #32]
 8012c7e:	3206      	adds	r2, #6
 8012c80:	6839      	ldr	r1, [r7, #0]
 8012c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 8012c86:	7dfb      	ldrb	r3, [r7, #23]
 8012c88:	3301      	adds	r3, #1
 8012c8a:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 8012c8c:	7dfa      	ldrb	r2, [r7, #23]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8012c94:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 8012c9a:	440b      	add	r3, r1
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	dbd4      	blt.n	8012c4a <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8012ca0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3718      	adds	r7, #24
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8012cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	b096      	sub	sp, #88	; 0x58
 8012cb2:	af08      	add	r7, sp, #32
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	4608      	mov	r0, r1
 8012cb8:	4611      	mov	r1, r2
 8012cba:	461a      	mov	r2, r3
 8012cbc:	4623      	mov	r3, r4
 8012cbe:	73fb      	strb	r3, [r7, #15]
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	73bb      	strb	r3, [r7, #14]
 8012cc4:	460b      	mov	r3, r1
 8012cc6:	737b      	strb	r3, [r7, #13]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8012cea:	2300      	movs	r3, #0
 8012cec:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 8012cfe:	7b7b      	ldrb	r3, [r7, #13]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d106      	bne.n	8012d12 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 8012d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d0a:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 8012d0c:	f06f 030e 	mvn.w	r3, #14
 8012d10:	e06f      	b.n	8012df2 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	7b7a      	ldrb	r2, [r7, #13]
 8012d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d1a:	fb01 f202 	mul.w	r2, r1, r2
 8012d1e:	1a9b      	subs	r3, r3, r2
 8012d20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 8012d24:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d28:	7b39      	ldrb	r1, [r7, #12]
 8012d2a:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012d2e:	f107 0320 	add.w	r3, r7, #32
 8012d32:	9301      	str	r3, [sp, #4]
 8012d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d3e:	f000 fddb 	bl	80138f8 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 8012d42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012d46:	7b39      	ldrb	r1, [r7, #12]
 8012d48:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d56:	9300      	str	r3, [sp, #0]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d5c:	f000 fdcc 	bl	80138f8 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 8012d60:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00e      	beq.n	8012d86 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 8012d68:	f107 021c 	add.w	r2, r7, #28
 8012d6c:	7b39      	ldrb	r1, [r7, #12]
 8012d6e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8012d72:	f107 0314 	add.w	r3, r7, #20
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	f107 0318 	add.w	r3, r7, #24
 8012d7c:	9300      	str	r3, [sp, #0]
 8012d7e:	4613      	mov	r3, r2
 8012d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012d82:	f000 fdb9 	bl	80138f8 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	469c      	mov	ip, r3
 8012d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8c:	469e      	mov	lr, r3
 8012d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d90:	4698      	mov	r8, r3
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	4619      	mov	r1, r3
 8012d96:	6a3b      	ldr	r3, [r7, #32]
 8012d98:	461c      	mov	r4, r3
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	461d      	mov	r5, r3
 8012d9e:	69fb      	ldr	r3, [r7, #28]
 8012da0:	461e      	mov	r6, r3
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 8012da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 8012dac:	607b      	str	r3, [r7, #4]
 8012dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8012db4:	7bb8      	ldrb	r0, [r7, #14]
 8012db6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012db8:	9207      	str	r2, [sp, #28]
 8012dba:	9306      	str	r3, [sp, #24]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	9205      	str	r2, [sp, #20]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	9304      	str	r3, [sp, #16]
 8012dc4:	9603      	str	r6, [sp, #12]
 8012dc6:	9502      	str	r5, [sp, #8]
 8012dc8:	9401      	str	r4, [sp, #4]
 8012dca:	9100      	str	r1, [sp, #0]
 8012dcc:	4643      	mov	r3, r8
 8012dce:	4672      	mov	r2, lr
 8012dd0:	4661      	mov	r1, ip
 8012dd2:	f002 ff54 	bl	8015c7e <VL53LX_f_023>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 8012ddc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8012de0:	f113 0f0f 	cmn.w	r3, #15
 8012de4:	d103      	bne.n	8012dee <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 8012de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dec:	801a      	strh	r2, [r3, #0]


	return status;
 8012dee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3738      	adds	r7, #56	; 0x38
 8012df6:	46bd      	mov	sp, r7
 8012df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dfc <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 8012dfc:	b490      	push	{r4, r7}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	4604      	mov	r4, r0
 8012e04:	4608      	mov	r0, r1
 8012e06:	4611      	mov	r1, r2
 8012e08:	461a      	mov	r2, r3
 8012e0a:	4623      	mov	r3, r4
 8012e0c:	71fb      	strb	r3, [r7, #7]
 8012e0e:	4603      	mov	r3, r0
 8012e10:	71bb      	strb	r3, [r7, #6]
 8012e12:	460b      	mov	r3, r1
 8012e14:	717b      	strb	r3, [r7, #5]
 8012e16:	4613      	mov	r3, r2
 8012e18:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 8012e22:	6a3b      	ldr	r3, [r7, #32]
 8012e24:	79fa      	ldrb	r2, [r7, #7]
 8012e26:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	781a      	ldrb	r2, [r3, #0]
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 8012e36:	69fb      	ldr	r3, [r7, #28]
 8012e38:	785a      	ldrb	r2, [r3, #1]
 8012e3a:	6a3b      	ldr	r3, [r7, #32]
 8012e3c:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	789a      	ldrb	r2, [r3, #2]
 8012e42:	6a3b      	ldr	r3, [r7, #32]
 8012e44:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	78da      	ldrb	r2, [r3, #3]
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	791a      	ldrb	r2, [r3, #4]
 8012e52:	6a3b      	ldr	r3, [r7, #32]
 8012e54:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	795a      	ldrb	r2, [r3, #5]
 8012e5a:	6a3b      	ldr	r3, [r7, #32]
 8012e5c:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	791a      	ldrb	r2, [r3, #4]
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 8012e6e:	6a3b      	ldr	r3, [r7, #32]
 8012e70:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	8c1a      	ldrh	r2, [r3, #32]
 8012e80:	6a3b      	ldr	r3, [r7, #32]
 8012e82:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	695b      	ldr	r3, [r3, #20]
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	6a3b      	ldr	r3, [r7, #32]
 8012e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	69db      	ldr	r3, [r3, #28]
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	6a3b      	ldr	r3, [r7, #32]
 8012ea2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	6a3b      	ldr	r3, [r7, #32]
 8012eae:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	691a      	ldr	r2, [r3, #16]
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012ec8:	6a3b      	ldr	r3, [r7, #32]
 8012eca:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	2213      	movs	r2, #19
 8012ed0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8012ed4:	887b      	ldrh	r3, [r7, #2]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00a      	beq.n	8012ef0 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	8c1b      	ldrh	r3, [r3, #32]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	887b      	ldrh	r3, [r7, #2]
 8012ee2:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d903      	bls.n	8012ef0 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8012ee8:	6a3b      	ldr	r3, [r7, #32]
 8012eea:	2206      	movs	r2, #6
 8012eec:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8012ef0:	79bb      	ldrb	r3, [r7, #6]
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	021b      	lsls	r3, r3, #8
 8012ef6:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 8012ef8:	6a3b      	ldr	r3, [r7, #32]
 8012efa:	8a9b      	ldrh	r3, [r3, #20]
 8012efc:	89fa      	ldrh	r2, [r7, #14]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d205      	bcs.n	8012f0e <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 8012f02:	6a3b      	ldr	r3, [r7, #32]
 8012f04:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 8012f06:	89fb      	ldrh	r3, [r7, #14]
 8012f08:	1ad3      	subs	r3, r2, r3
 8012f0a:	81fb      	strh	r3, [r7, #14]
 8012f0c:	e001      	b.n	8012f12 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 8012f12:	797b      	ldrb	r3, [r7, #5]
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	021b      	lsls	r3, r3, #8
 8012f18:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8012f20:	89bb      	ldrh	r3, [r7, #12]
 8012f22:	4413      	add	r3, r2
 8012f24:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8012f26:	6a3b      	ldr	r3, [r7, #32]
 8012f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012f2c:	89fa      	ldrh	r2, [r7, #14]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d805      	bhi.n	8012f3e <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 8012f32:	6a3b      	ldr	r3, [r7, #32]
 8012f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8012f38:	89ba      	ldrh	r2, [r7, #12]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d203      	bcs.n	8012f46 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 8012f3e:	6a3b      	ldr	r3, [r7, #32]
 8012f40:	2205      	movs	r2, #5
 8012f42:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 8012f46:	bf00      	nop
 8012f48:	3710      	adds	r7, #16
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bc90      	pop	{r4, r7}
 8012f4e:	4770      	bx	lr

08012f50 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8012f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f52:	b08f      	sub	sp, #60	; 0x3c
 8012f54:	af06      	add	r7, sp, #24
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	607a      	str	r2, [r7, #4]
 8012f5c:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 8012f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f68:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012f6c:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 8012f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012f70:	f7ff f856 	bl	8012020 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 8012f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f76:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8012f7a:	22ac      	movs	r2, #172	; 0xac
 8012f7c:	6839      	ldr	r1, [r7, #0]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f004 fc47 	bl	8017812 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	781a      	ldrb	r2, [r3, #0]
 8012f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f8a:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	785a      	ldrb	r2, [r3, #1]
 8012f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f92:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	789a      	ldrb	r2, [r3, #2]
 8012f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9a:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8012fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa4:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8012fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa8:	2200      	movs	r2, #0
 8012faa:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 8012fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fae:	2204      	movs	r2, #4
 8012fb0:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8012fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 8012fb8:	2300      	movs	r3, #0
 8012fba:	77bb      	strb	r3, [r7, #30]
 8012fbc:	e008      	b.n	8012fd0 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 8012fbe:	7fbb      	ldrb	r3, [r7, #30]
 8012fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fc2:	005b      	lsls	r3, r3, #1
 8012fc4:	4413      	add	r3, r2
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 8012fca:	7fbb      	ldrb	r3, [r7, #30]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	77bb      	strb	r3, [r7, #30]
 8012fd0:	7fbb      	ldrb	r3, [r7, #30]
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	d9f3      	bls.n	8012fbe <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 8012fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fd8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fd ff57 	bl	8010e90 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012fee:	4619      	mov	r1, r3
 8012ff0:	4610      	mov	r0, r2
 8012ff2:	f7fd ff8d 	bl	8010f10 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 8012ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ff8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7fe fb66 	bl	80116ce <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 8013002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013004:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8013008:	4618      	mov	r0, r3
 801300a:	f7fd fffb 	bl	8011004 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013014:	2b00      	cmp	r3, #0
 8013016:	d009      	beq.n	801302c <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 8013018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801301a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013020:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8013024:	461a      	mov	r2, r3
 8013026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013028:	f000 fdae 	bl	8013b88 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 8013034:	2300      	movs	r3, #0
 8013036:	77bb      	strb	r3, [r7, #30]
 8013038:	e01e      	b.n	8013078 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 801303a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d117      	bne.n	8013072 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 8013042:	7fbb      	ldrb	r3, [r7, #30]
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	3304      	adds	r3, #4
 8013048:	005b      	lsls	r3, r3, #1
 801304a:	4413      	add	r3, r2
 801304c:	8898      	ldrh	r0, [r3, #4]
 801304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013050:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 8013054:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 8013056:	005b      	lsls	r3, r3, #1
 8013058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801305a:	4413      	add	r3, r2
 801305c:	3304      	adds	r3, #4
 801305e:	9301      	str	r3, [sp, #4]
 8013060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	460b      	mov	r3, r1
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	68f9      	ldr	r1, [r7, #12]
 801306a:	f7fe fb7b 	bl	8011764 <VL53LX_f_001>
 801306e:	4603      	mov	r3, r0
 8013070:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 8013072:	7fbb      	ldrb	r3, [r7, #30]
 8013074:	3301      	adds	r3, #1
 8013076:	77bb      	strb	r3, [r7, #30]
 8013078:	7fbb      	ldrb	r3, [r7, #30]
 801307a:	2b04      	cmp	r3, #4
 801307c:	d9dd      	bls.n	801303a <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 801307e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d11a      	bne.n	80130bc <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 801308e:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 801309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801309c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80130a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130a2:	f502 7252 	add.w	r2, r2, #840	; 0x348
 80130a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80130a8:	9102      	str	r1, [sp, #8]
 80130aa:	9201      	str	r2, [sp, #4]
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	462b      	mov	r3, r5
 80130b0:	4622      	mov	r2, r4
 80130b2:	4631      	mov	r1, r6
 80130b4:	f7ff f82d 	bl	8012112 <VL53LX_f_006>
 80130b8:	4603      	mov	r3, r0
 80130ba:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 80130bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d104      	bne.n	80130ce <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 80130c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130c6:	f7ff f954 	bl	8012372 <VL53LX_f_007>
 80130ca:	4603      	mov	r3, r0
 80130cc:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80130ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d104      	bne.n	80130e0 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 80130d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130d8:	f7ff f999 	bl	801240e <VL53LX_f_008>
 80130dc:	4603      	mov	r3, r0
 80130de:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 80130e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d104      	bne.n	80130f2 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 80130e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130ea:	f7ff fa0e 	bl	801250a <VL53LX_f_009>
 80130ee:	4603      	mov	r3, r0
 80130f0:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 80130f2:	2300      	movs	r3, #0
 80130f4:	77bb      	strb	r3, [r7, #30]
 80130f6:	e0a6      	b.n	8013246 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 80130f8:	7fba      	ldrb	r2, [r7, #30]
 80130fa:	4613      	mov	r3, r2
 80130fc:	00db      	lsls	r3, r3, #3
 80130fe:	4413      	add	r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013108:	4413      	add	r3, r2
 801310a:	3304      	adds	r3, #4
 801310c:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 801310e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d109      	bne.n	801312a <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 8013116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013118:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801311c:	7fbb      	ldrb	r3, [r7, #30]
 801311e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fb48 	bl	80127b6 <VL53LX_f_010>
 8013126:	4603      	mov	r3, r0
 8013128:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 801312a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d110      	bne.n	8013154 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 8013132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013134:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801313e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013140:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8013144:	7fb8      	ldrb	r0, [r7, #30]
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	4613      	mov	r3, r2
 801314a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801314c:	f7ff fd5a 	bl	8012c04 <VL53LX_f_011>
 8013150:	4603      	mov	r3, r0
 8013152:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 8013154:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10d      	bne.n	8013178 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 801315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801315e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8013162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013164:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8013168:	7fb8      	ldrb	r0, [r7, #30]
 801316a:	9300      	str	r3, [sp, #0]
 801316c:	2300      	movs	r3, #0
 801316e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013170:	f7ff fd48 	bl	8012c04 <VL53LX_f_011>
 8013174:	4603      	mov	r3, r0
 8013176:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 8013178:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10d      	bne.n	801319c <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 8013180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013182:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8013186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013188:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 801318c:	7fb8      	ldrb	r0, [r7, #30]
 801318e:	9300      	str	r3, [sp, #0]
 8013190:	2300      	movs	r3, #0
 8013192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013194:	f7ff fd36 	bl	8012c04 <VL53LX_f_011>
 8013198:	4603      	mov	r3, r0
 801319a:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 801319c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d109      	bne.n	80131b8 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 80131a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131a6:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 80131aa:	7fb8      	ldrb	r0, [r7, #30]
 80131ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80131b0:	f000 f8dd 	bl	801336e <VL53LX_f_026>
 80131b4:	4603      	mov	r3, r0
 80131b6:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 80131b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d108      	bne.n	80131d2 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	8a19      	ldrh	r1, [r3, #16]
 80131c4:	7fb8      	ldrb	r0, [r7, #30]
 80131c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131ca:	f000 f95c 	bl	8013486 <VL53LX_f_027>
 80131ce:	4603      	mov	r3, r0
 80131d0:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 80131d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d124      	bne.n	8013224 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	789d      	ldrb	r5, [r3, #2]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	7e1e      	ldrb	r6, [r3, #24]
 80131e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131e4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	f893 e006 	ldrb.w	lr, [r3, #6]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80131f6:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 80131fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80131fc:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8013200:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013202:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8013206:	697c      	ldr	r4, [r7, #20]
 8013208:	3420      	adds	r4, #32
 801320a:	9404      	str	r4, [sp, #16]
 801320c:	9003      	str	r0, [sp, #12]
 801320e:	9102      	str	r1, [sp, #8]
 8013210:	9201      	str	r2, [sp, #4]
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	4673      	mov	r3, lr
 8013216:	4662      	mov	r2, ip
 8013218:	4631      	mov	r1, r6
 801321a:	4628      	mov	r0, r5
 801321c:	f7ff fd46 	bl	8012cac <VL53LX_f_014>
 8013220:	4603      	mov	r3, r0
 8013222:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 8013224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d109      	bne.n	8013240 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 801322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801322e:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8013232:	7fb8      	ldrb	r0, [r7, #30]
 8013234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013236:	2101      	movs	r1, #1
 8013238:	f7ff fb10 	bl	801285c <VL53LX_f_015>
 801323c:	4603      	mov	r3, r0
 801323e:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8013240:	7fbb      	ldrb	r3, [r7, #30]
 8013242:	3301      	adds	r3, #1
 8013244:	77bb      	strb	r3, [r7, #30]
 8013246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013248:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801324c:	7fba      	ldrb	r2, [r7, #30]
 801324e:	429a      	cmp	r2, r3
 8013250:	f4ff af52 	bcc.w	80130f8 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 8013254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d107      	bne.n	801326c <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	785b      	ldrb	r3, [r3, #1]
 8013260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fa23 	bl	80126ae <VL53LX_f_016>
 8013268:	4603      	mov	r3, r0
 801326a:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 801326c:	2300      	movs	r3, #0
 801326e:	77bb      	strb	r3, [r7, #30]
 8013270:	e071      	b.n	8013356 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 8013272:	7fba      	ldrb	r2, [r7, #30]
 8013274:	4613      	mov	r3, r2
 8013276:	00db      	lsls	r3, r3, #3
 8013278:	4413      	add	r3, r2
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013282:	4413      	add	r3, r2
 8013284:	3304      	adds	r3, #4
 8013286:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8013288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801328a:	7c9a      	ldrb	r2, [r3, #18]
 801328c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801328e:	7c5b      	ldrb	r3, [r3, #17]
 8013290:	429a      	cmp	r2, r3
 8013292:	d25c      	bcs.n	801334e <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 801329c:	429a      	cmp	r2, r3
 801329e:	dd57      	ble.n	8013350 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 80132a4:	2bff      	cmp	r3, #255	; 0xff
 80132a6:	d053      	beq.n	8013350 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 80132a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132aa:	7c9b      	ldrb	r3, [r3, #18]
 80132ac:	461a      	mov	r2, r3
			prange_data =
 80132ae:	234c      	movs	r3, #76	; 0x4c
 80132b0:	fb02 f303 	mul.w	r3, r2, r3
 80132b4:	3310      	adds	r3, #16
 80132b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132b8:	4413      	add	r3, r2
 80132ba:	3304      	adds	r3, #4
 80132bc:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 80132be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d115      	bne.n	80132f2 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 80132c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132c8:	7c98      	ldrb	r0, [r3, #18]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f893 1020 	ldrb.w	r1, [r3, #32]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	8b5d      	ldrh	r5, [r3, #26]
 80132da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132dc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132e0:	693a      	ldr	r2, [r7, #16]
 80132e2:	9202      	str	r2, [sp, #8]
 80132e4:	697a      	ldr	r2, [r7, #20]
 80132e6:	9201      	str	r2, [sp, #4]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	462b      	mov	r3, r5
 80132ec:	4622      	mov	r2, r4
 80132ee:	f7ff fd85 	bl	8012dfc <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 80132f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d115      	bne.n	8013326 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8013312:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8013316:	9301      	str	r3, [sp, #4]
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	4623      	mov	r3, r4
 801331e:	f000 fb44 	bl	80139aa <VL53LX_f_018>
 8013322:	4603      	mov	r3, r0
 8013324:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 8013326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d108      	bne.n	8013340 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8bd8      	ldrh	r0, [r3, #30]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013338:	693a      	ldr	r2, [r7, #16]
 801333a:	4619      	mov	r1, r3
 801333c:	f000 fbda 	bl	8013af4 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8013340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013342:	7c9b      	ldrb	r3, [r3, #18]
 8013344:	3301      	adds	r3, #1
 8013346:	b2da      	uxtb	r2, r3
 8013348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801334a:	749a      	strb	r2, [r3, #18]
 801334c:	e000      	b.n	8013350 <VL53LX_f_025+0x400>
			continue;
 801334e:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8013350:	7fbb      	ldrb	r3, [r7, #30]
 8013352:	3301      	adds	r3, #1
 8013354:	77bb      	strb	r3, [r7, #30]
 8013356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013358:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801335c:	7fba      	ldrb	r2, [r7, #30]
 801335e:	429a      	cmp	r2, r3
 8013360:	d387      	bcc.n	8013272 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8013362:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013366:	4618      	mov	r0, r3
 8013368:	3724      	adds	r7, #36	; 0x24
 801336a:	46bd      	mov	sp, r7
 801336c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801336e <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 801336e:	b580      	push	{r7, lr}
 8013370:	b08c      	sub	sp, #48	; 0x30
 8013372:	af02      	add	r7, sp, #8
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	603b      	str	r3, [r7, #0]
 801337a:	4603      	mov	r3, r0
 801337c:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 801337e:	2300      	movs	r3, #0
 8013380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 8013384:	7bfa      	ldrb	r2, [r7, #15]
 8013386:	4613      	mov	r3, r2
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	4413      	add	r3, r2
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	4413      	add	r3, r2
 8013396:	3304      	adds	r3, #4
 8013398:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 801339a:	2300      	movs	r3, #0
 801339c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 80133a4:	2300      	movs	r3, #0
 80133a6:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 80133a8:	2300      	movs	r3, #0
 80133aa:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	785a      	ldrb	r2, [r3, #1]
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	781a      	ldrb	r2, [r3, #0]
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	789a      	ldrb	r2, [r3, #2]
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 80133c8:	6a3b      	ldr	r3, [r7, #32]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133d0:	e04d      	b.n	801346e <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	78da      	ldrb	r2, [r3, #3]
 80133d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133da:	fbb3 f1f2 	udiv	r1, r3, r2
 80133de:	fb01 f202 	mul.w	r2, r1, r2
 80133e2:	1a9b      	subs	r3, r3, r2
 80133e4:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 80133e6:	6a3b      	ldr	r3, [r7, #32]
 80133e8:	7999      	ldrb	r1, [r3, #6]
 80133ea:	f107 0218 	add.w	r2, r7, #24
 80133ee:	7ff8      	ldrb	r0, [r7, #31]
 80133f0:	f107 0310 	add.w	r3, r7, #16
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	f107 0314 	add.w	r3, r7, #20
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	4613      	mov	r3, r2
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	f000 fa7a 	bl	80138f8 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 8013404:	7ffb      	ldrb	r3, [r7, #31]
 8013406:	69ba      	ldr	r2, [r7, #24]
 8013408:	6839      	ldr	r1, [r7, #0]
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	440b      	add	r3, r1
 801340e:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 8013410:	7ffb      	ldrb	r3, [r7, #31]
 8013412:	697a      	ldr	r2, [r7, #20]
 8013414:	6839      	ldr	r1, [r7, #0]
 8013416:	3318      	adds	r3, #24
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	440b      	add	r3, r1
 801341c:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 801341e:	7ffb      	ldrb	r3, [r7, #31]
 8013420:	693a      	ldr	r2, [r7, #16]
 8013422:	6839      	ldr	r1, [r7, #0]
 8013424:	3330      	adds	r3, #48	; 0x30
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	440b      	add	r3, r1
 801342a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 801342c:	69ba      	ldr	r2, [r7, #24]
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	689a      	ldr	r2, [r3, #8]
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 801343a:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 801343c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 801343e:	6839      	ldr	r1, [r7, #0]
 8013440:	3348      	adds	r3, #72	; 0x48
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	440b      	add	r3, r1
 8013446:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 8013448:	697a      	ldr	r2, [r7, #20]
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	689a      	ldr	r2, [r3, #8]
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 8013456:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8013458:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 801345a:	6839      	ldr	r1, [r7, #0]
 801345c:	3360      	adds	r3, #96	; 0x60
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	440b      	add	r3, r1
 8013462:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8013464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013468:	3301      	adds	r3, #1
 801346a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801346e:	6a3b      	ldr	r3, [r7, #32]
 8013470:	791b      	ldrb	r3, [r3, #4]
 8013472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013476:	429a      	cmp	r2, r3
 8013478:	d9ab      	bls.n	80133d2 <VL53LX_f_026+0x64>
	}

	return status;
 801347a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801347e:	4618      	mov	r0, r3
 8013480:	3728      	adds	r7, #40	; 0x28
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 8013486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013488:	b08f      	sub	sp, #60	; 0x3c
 801348a:	af06      	add	r7, sp, #24
 801348c:	60ba      	str	r2, [r7, #8]
 801348e:	607b      	str	r3, [r7, #4]
 8013490:	4603      	mov	r3, r0
 8013492:	73fb      	strb	r3, [r7, #15]
 8013494:	460b      	mov	r3, r1
 8013496:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 8013498:	2300      	movs	r3, #0
 801349a:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 801349c:	2300      	movs	r3, #0
 801349e:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 80134a0:	7bfa      	ldrb	r2, [r7, #15]
 80134a2:	4613      	mov	r3, r2
 80134a4:	00db      	lsls	r3, r3, #3
 80134a6:	4413      	add	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	4413      	add	r3, r2
 80134b2:	3304      	adds	r3, #4
 80134b4:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 80134be:	2300      	movs	r3, #0
 80134c0:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	77fb      	strb	r3, [r7, #31]
 80134c8:	e0b9      	b.n	801363e <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	78da      	ldrb	r2, [r3, #3]
 80134ce:	7ffb      	ldrb	r3, [r7, #31]
 80134d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80134d4:	fb01 f202 	mul.w	r2, r1, r2
 80134d8:	1a9b      	subs	r3, r3, r2
 80134da:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 80134dc:	7ffb      	ldrb	r3, [r7, #31]
 80134de:	3301      	adds	r3, #1
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	78d2      	ldrb	r2, [r2, #3]
 80134e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80134e8:	fb01 f202 	mul.w	r2, r1, r2
 80134ec:	1a9b      	subs	r3, r3, r2
 80134ee:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	789b      	ldrb	r3, [r3, #2]
 80134f4:	7dfa      	ldrb	r2, [r7, #23]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	f080 809e 	bcs.w	8013638 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 8013500:	7dba      	ldrb	r2, [r7, #22]
 8013502:	429a      	cmp	r2, r3
 8013504:	f080 8098 	bcs.w	8013638 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 8013508:	7dfb      	ldrb	r3, [r7, #23]
 801350a:	68ba      	ldr	r2, [r7, #8]
 801350c:	3348      	adds	r3, #72	; 0x48
 801350e:	009b      	lsls	r3, r3, #2
 8013510:	4413      	add	r3, r2
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10e      	bne.n	8013536 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 8013518:	7dfb      	ldrb	r3, [r7, #23]
 801351a:	68ba      	ldr	r2, [r7, #8]
 801351c:	3360      	adds	r3, #96	; 0x60
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	4413      	add	r3, r2
 8013522:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 8013524:	2b00      	cmp	r3, #0
 8013526:	d106      	bne.n	8013536 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 8013528:	7dfb      	ldrb	r3, [r7, #23]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	4413      	add	r3, r2
 801352e:	2200      	movs	r2, #0
 8013530:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8013534:	e043      	b.n	80135be <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 8013536:	7dfb      	ldrb	r3, [r7, #23]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	3348      	adds	r3, #72	; 0x48
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	2b00      	cmp	r3, #0
 8013544:	db0e      	blt.n	8013564 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 8013546:	7dfb      	ldrb	r3, [r7, #23]
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	3360      	adds	r3, #96	; 0x60
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4413      	add	r3, r2
 8013550:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 8013552:	2b00      	cmp	r3, #0
 8013554:	db06      	blt.n	8013564 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 8013556:	7dfb      	ldrb	r3, [r7, #23]
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	4413      	add	r3, r2
 801355c:	2201      	movs	r2, #1
 801355e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8013562:	e02c      	b.n	80135be <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 8013564:	7dfb      	ldrb	r3, [r7, #23]
 8013566:	68ba      	ldr	r2, [r7, #8]
 8013568:	3348      	adds	r3, #72	; 0x48
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	4413      	add	r3, r2
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	da1e      	bge.n	80135b2 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 8013574:	7dfb      	ldrb	r3, [r7, #23]
 8013576:	68ba      	ldr	r2, [r7, #8]
 8013578:	3360      	adds	r3, #96	; 0x60
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	4413      	add	r3, r2
 801357e:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 8013580:	2b00      	cmp	r3, #0
 8013582:	db16      	blt.n	80135b2 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 8013584:	7dbb      	ldrb	r3, [r7, #22]
 8013586:	68ba      	ldr	r2, [r7, #8]
 8013588:	3348      	adds	r3, #72	; 0x48
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	4413      	add	r3, r2
 801358e:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 8013590:	2b00      	cmp	r3, #0
 8013592:	db0e      	blt.n	80135b2 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 8013594:	7dbb      	ldrb	r3, [r7, #22]
 8013596:	68ba      	ldr	r2, [r7, #8]
 8013598:	3360      	adds	r3, #96	; 0x60
 801359a:	009b      	lsls	r3, r3, #2
 801359c:	4413      	add	r3, r2
 801359e:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	da06      	bge.n	80135b2 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	4413      	add	r3, r2
 80135aa:	2201      	movs	r2, #1
 80135ac:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80135b0:	e005      	b.n	80135be <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 80135b2:	7dfb      	ldrb	r3, [r7, #23]
 80135b4:	68ba      	ldr	r2, [r7, #8]
 80135b6:	4413      	add	r3, r2
 80135b8:	2200      	movs	r2, #0
 80135ba:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 80135be:	7dfb      	ldrb	r3, [r7, #23]
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	4413      	add	r3, r2
 80135c4:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d035      	beq.n	8013638 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	7ffa      	ldrb	r2, [r7, #31]
 80135d0:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	009b      	lsls	r3, r3, #2
 80135d8:	4413      	add	r3, r2
 80135da:	685c      	ldr	r4, [r3, #4]
 80135dc:	7dfb      	ldrb	r3, [r7, #23]
 80135de:	68ba      	ldr	r2, [r7, #8]
 80135e0:	3318      	adds	r3, #24
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	4413      	add	r3, r2
 80135e6:	685d      	ldr	r5, [r3, #4]
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	3330      	adds	r3, #48	; 0x30
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4413      	add	r3, r2
 80135f2:	685e      	ldr	r6, [r3, #4]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	689b      	ldr	r3, [r3, #8]
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	78d2      	ldrb	r2, [r2, #3]
 80135fc:	69b9      	ldr	r1, [r7, #24]
 80135fe:	3118      	adds	r1, #24
 8013600:	7ff8      	ldrb	r0, [r7, #31]
 8013602:	9105      	str	r1, [sp, #20]
 8013604:	9204      	str	r2, [sp, #16]
 8013606:	9303      	str	r3, [sp, #12]
 8013608:	2300      	movs	r3, #0
 801360a:	9302      	str	r3, [sp, #8]
 801360c:	2300      	movs	r3, #0
 801360e:	9301      	str	r3, [sp, #4]
 8013610:	2300      	movs	r3, #0
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	4633      	mov	r3, r6
 8013616:	462a      	mov	r2, r5
 8013618:	4621      	mov	r1, r4
 801361a:	f000 f81c 	bl	8013656 <VL53LX_f_028>
 801361e:	4603      	mov	r3, r0
 8013620:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 8013622:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013626:	f113 0f0f 	cmn.w	r3, #15
 801362a:	d105      	bne.n	8013638 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 801362c:	7dfb      	ldrb	r3, [r7, #23]
 801362e:	68ba      	ldr	r2, [r7, #8]
 8013630:	4413      	add	r3, r2
 8013632:	2200      	movs	r2, #0
 8013634:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8013638:	7ffb      	ldrb	r3, [r7, #31]
 801363a:	3301      	adds	r3, #1
 801363c:	77fb      	strb	r3, [r7, #31]
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	791b      	ldrb	r3, [r3, #4]
 8013642:	7ffa      	ldrb	r2, [r7, #31]
 8013644:	429a      	cmp	r2, r3
 8013646:	f4ff af40 	bcc.w	80134ca <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 801364a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801364e:	4618      	mov	r0, r3
 8013650:	3724      	adds	r7, #36	; 0x24
 8013652:	46bd      	mov	sp, r7
 8013654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013656 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 8013656:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801365a:	b0b2      	sub	sp, #200	; 0xc8
 801365c:	af00      	add	r7, sp, #0
 801365e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801366a:	4603      	mov	r3, r0
 801366c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8013670:	23f1      	movs	r3, #241	; 0xf1
 8013672:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 8013676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801367a:	f04f 0300 	mov.w	r3, #0
 801367e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 8013682:	f04f 0200 	mov.w	r2, #0
 8013686:	f04f 0300 	mov.w	r3, #0
 801368a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 801368e:	f04f 0200 	mov.w	r2, #0
 8013692:	f04f 0300 	mov.w	r3, #0
 8013696:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 801369a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801369e:	17da      	asrs	r2, r3, #31
 80136a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80136a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 80136a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80136ac:	17da      	asrs	r2, r3, #31
 80136ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80136b2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 80136b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80136be:	4602      	mov	r2, r0
 80136c0:	ebb3 0802 	subs.w	r8, r3, r2
 80136c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80136c8:	460a      	mov	r2, r1
 80136ca:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 80136ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80136d2:	17da      	asrs	r2, r3, #31
 80136d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80136d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80136d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80136dc:	460b      	mov	r3, r1
 80136de:	ebb8 0a03 	subs.w	sl, r8, r3
 80136e2:	4613      	mov	r3, r2
 80136e4:	eb69 0b03 	sbc.w	fp, r9, r3
 80136e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80136ec:	17da      	asrs	r2, r3, #31
 80136ee:	673b      	str	r3, [r7, #112]	; 0x70
 80136f0:	677a      	str	r2, [r7, #116]	; 0x74
 80136f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80136f6:	460b      	mov	r3, r1
 80136f8:	ebba 0403 	subs.w	r4, sl, r3
 80136fc:	4613      	mov	r3, r2
 80136fe:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8013702:	f04f 0200 	mov.w	r2, #0
 8013706:	f04f 0300 	mov.w	r3, #0
 801370a:	032b      	lsls	r3, r5, #12
 801370c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8013710:	0322      	lsls	r2, r4, #12
 8013712:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8013716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801371a:	17da      	asrs	r2, r3, #31
 801371c:	66bb      	str	r3, [r7, #104]	; 0x68
 801371e:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 8013720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013724:	17da      	asrs	r2, r3, #31
 8013726:	663b      	str	r3, [r7, #96]	; 0x60
 8013728:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 801372a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 801372e:	4623      	mov	r3, r4
 8013730:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013734:	4602      	mov	r2, r0
 8013736:	1a9b      	subs	r3, r3, r2
 8013738:	65bb      	str	r3, [r7, #88]	; 0x58
 801373a:	462b      	mov	r3, r5
 801373c:	460a      	mov	r2, r1
 801373e:	eb63 0302 	sbc.w	r3, r3, r2
 8013742:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 8013744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013748:	17da      	asrs	r2, r3, #31
 801374a:	653b      	str	r3, [r7, #80]	; 0x50
 801374c:	657a      	str	r2, [r7, #84]	; 0x54
 801374e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013752:	4623      	mov	r3, r4
 8013754:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013758:	4602      	mov	r2, r0
 801375a:	1a9b      	subs	r3, r3, r2
 801375c:	64bb      	str	r3, [r7, #72]	; 0x48
 801375e:	462b      	mov	r3, r5
 8013760:	460a      	mov	r2, r1
 8013762:	eb63 0302 	sbc.w	r3, r3, r2
 8013766:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8013768:	f04f 0200 	mov.w	r2, #0
 801376c:	f04f 0300 	mov.w	r3, #0
 8013770:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013774:	4629      	mov	r1, r5
 8013776:	030b      	lsls	r3, r1, #12
 8013778:	4621      	mov	r1, r4
 801377a:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 801377e:	4621      	mov	r1, r4
 8013780:	030a      	lsls	r2, r1, #12
 8013782:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8013786:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801378a:	4313      	orrs	r3, r2
 801378c:	f000 80a8 	beq.w	80138e0 <VL53LX_f_028+0x28a>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 8013790:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8013794:	f04f 0000 	mov.w	r0, #0
 8013798:	f04f 0100 	mov.w	r1, #0
 801379c:	0319      	lsls	r1, r3, #12
 801379e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80137a2:	0310      	lsls	r0, r2, #12
 80137a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80137a8:	1814      	adds	r4, r2, r0
 80137aa:	633c      	str	r4, [r7, #48]	; 0x30
 80137ac:	414b      	adcs	r3, r1
 80137ae:	637b      	str	r3, [r7, #52]	; 0x34
 80137b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80137b4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 80137b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80137bc:	1891      	adds	r1, r2, r2
 80137be:	62b9      	str	r1, [r7, #40]	; 0x28
 80137c0:	415b      	adcs	r3, r3
 80137c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80137c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80137cc:	f7ed f92e 	bl	8000a2c <__aeabi_ldivmod>
 80137d0:	4602      	mov	r2, r0
 80137d2:	460b      	mov	r3, r1
 80137d4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase  +=  2048;
 80137d8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80137dc:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80137e0:	6239      	str	r1, [r7, #32]
 80137e2:	f143 0300 	adc.w	r3, r3, #0
 80137e6:	627b      	str	r3, [r7, #36]	; 0x24
 80137e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80137ec:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase  += (4096 * (int64_t)bin);
 80137f0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80137f4:	2200      	movs	r2, #0
 80137f6:	643b      	str	r3, [r7, #64]	; 0x40
 80137f8:	647a      	str	r2, [r7, #68]	; 0x44
 80137fa:	f04f 0200 	mov.w	r2, #0
 80137fe:	f04f 0300 	mov.w	r3, #0
 8013802:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013806:	4629      	mov	r1, r5
 8013808:	030b      	lsls	r3, r1, #12
 801380a:	4621      	mov	r1, r4
 801380c:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8013810:	4621      	mov	r1, r4
 8013812:	030a      	lsls	r2, r1, #12
 8013814:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013818:	1884      	adds	r4, r0, r2
 801381a:	61bc      	str	r4, [r7, #24]
 801381c:	eb41 0303 	adc.w	r3, r1, r3
 8013820:	61fb      	str	r3, [r7, #28]
 8013822:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013826:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8


		mean_phase  = do_division_s((mean_phase + 1), 2);
 801382a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801382e:	1c51      	adds	r1, r2, #1
 8013830:	63b9      	str	r1, [r7, #56]	; 0x38
 8013832:	f143 0300 	adc.w	r3, r3, #0
 8013836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013838:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801383c:	460b      	mov	r3, r1
 801383e:	0fdb      	lsrs	r3, r3, #31
 8013840:	2200      	movs	r2, #0
 8013842:	613b      	str	r3, [r7, #16]
 8013844:	617a      	str	r2, [r7, #20]
 8013846:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801384a:	4623      	mov	r3, r4
 801384c:	4602      	mov	r2, r0
 801384e:	189b      	adds	r3, r3, r2
 8013850:	60bb      	str	r3, [r7, #8]
 8013852:	460b      	mov	r3, r1
 8013854:	462a      	mov	r2, r5
 8013856:	eb42 0303 	adc.w	r3, r2, r3
 801385a:	60fb      	str	r3, [r7, #12]
 801385c:	f04f 0200 	mov.w	r2, #0
 8013860:	f04f 0300 	mov.w	r3, #0
 8013864:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013868:	4621      	mov	r1, r4
 801386a:	084a      	lsrs	r2, r1, #1
 801386c:	4629      	mov	r1, r5
 801386e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013872:	4629      	mov	r1, r5
 8013874:	104b      	asrs	r3, r1, #1
 8013876:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		if (mean_phase  < 0)
 801387a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801387e:	2b00      	cmp	r3, #0
 8013880:	da05      	bge.n	801388e <VL53LX_f_028+0x238>
			mean_phase = 0;
 8013882:	f04f 0200 	mov.w	r2, #0
 8013886:	f04f 0300 	mov.w	r3, #0
 801388a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 801388e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8013892:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013896:	f173 0300 	sbcs.w	r3, r3, #0
 801389a:	db05      	blt.n	80138a8 <VL53LX_f_028+0x252>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 801389c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138a0:	f04f 0300 	mov.w	r3, #0
 80138a4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8


		mean_phase32 = (int32_t)mean_phase;
 80138a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80138ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 80138b0:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 80138b4:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 80138b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80138ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80138be:	fb01 f202 	mul.w	r2, r1, r2
 80138c2:	1a9b      	subs	r3, r3, r2
 80138c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 80138c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80138cc:	17da      	asrs	r2, r3, #31
 80138ce:	603b      	str	r3, [r7, #0]
 80138d0:	607a      	str	r2, [r7, #4]
 80138d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80138d6:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53LX_ERROR_NONE;
 80138da:	2300      	movs	r3, #0
 80138dc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	}

	*pmean_phase = (uint32_t)mean_phase;
 80138e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80138e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138e8:	601a      	str	r2, [r3, #0]

	return status;
 80138ea:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	37c8      	adds	r7, #200	; 0xc8
 80138f2:	46bd      	mov	sp, r7
 80138f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080138f8 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b087      	sub	sp, #28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60ba      	str	r2, [r7, #8]
 8013900:	607b      	str	r3, [r7, #4]
 8013902:	4603      	mov	r3, r0
 8013904:	73fb      	strb	r3, [r7, #15]
 8013906:	460b      	mov	r3, r1
 8013908:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2200      	movs	r2, #0
 8013916:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 8013918:	7bfa      	ldrb	r2, [r7, #15]
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	3206      	adds	r2, #6
 801391e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	601a      	str	r2, [r3, #0]
	*pc = 0;
 8013926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013928:	2200      	movs	r2, #0
 801392a:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 801392c:	2300      	movs	r3, #0
 801392e:	75fb      	strb	r3, [r7, #23]
 8013930:	e02f      	b.n	8013992 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 8013932:	7bfa      	ldrb	r2, [r7, #15]
 8013934:	7dfb      	ldrb	r3, [r7, #23]
 8013936:	4413      	add	r3, r2
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	7a92      	ldrb	r2, [r2, #10]
 801393c:	441a      	add	r2, r3
 801393e:	7bbb      	ldrb	r3, [r7, #14]
 8013940:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 8013942:	68ba      	ldr	r2, [r7, #8]
 8013944:	7a92      	ldrb	r2, [r2, #10]
 8013946:	fb93 f1f2 	sdiv	r1, r3, r2
 801394a:	fb01 f202 	mul.w	r2, r1, r2
 801394e:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 8013950:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8013952:	7dfa      	ldrb	r2, [r7, #23]
 8013954:	7bbb      	ldrb	r3, [r7, #14]
 8013956:	429a      	cmp	r2, r3
 8013958:	d20a      	bcs.n	8013970 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	7db9      	ldrb	r1, [r7, #22]
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	3106      	adds	r1, #6
 8013964:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013968:	441a      	add	r2, r3
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	601a      	str	r2, [r3, #0]
 801396e:	e00d      	b.n	801398c <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 8013970:	7dfa      	ldrb	r2, [r7, #23]
 8013972:	7bbb      	ldrb	r3, [r7, #14]
 8013974:	429a      	cmp	r2, r3
 8013976:	d909      	bls.n	801398c <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 8013978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	7db9      	ldrb	r1, [r7, #22]
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	3106      	adds	r1, #6
 8013982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013986:	441a      	add	r2, r3
 8013988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398a:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 801398c:	7dfb      	ldrb	r3, [r7, #23]
 801398e:	3301      	adds	r3, #1
 8013990:	75fb      	strb	r3, [r7, #23]
 8013992:	7bbb      	ldrb	r3, [r7, #14]
 8013994:	005a      	lsls	r2, r3, #1
 8013996:	7dfb      	ldrb	r3, [r7, #23]
 8013998:	429a      	cmp	r2, r3
 801399a:	daca      	bge.n	8013932 <VL53LX_f_022+0x3a>
	}
}
 801399c:	bf00      	nop
 801399e:	bf00      	nop
 80139a0:	371c      	adds	r7, #28
 80139a2:	46bd      	mov	sp, r7
 80139a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a8:	4770      	bx	lr

080139aa <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b088      	sub	sp, #32
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	60ba      	str	r2, [r7, #8]
 80139b2:	461a      	mov	r2, r3
 80139b4:	4603      	mov	r3, r0
 80139b6:	81fb      	strh	r3, [r7, #14]
 80139b8:	460b      	mov	r3, r1
 80139ba:	81bb      	strh	r3, [r7, #12]
 80139bc:	4613      	mov	r3, r2
 80139be:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 80139c0:	2300      	movs	r3, #0
 80139c2:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 80139c4:	2300      	movs	r3, #0
 80139c6:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 80139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d2:	89fa      	ldrh	r2, [r7, #14]
 80139d4:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 80139d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d8:	89ba      	ldrh	r2, [r7, #12]
 80139da:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 80139dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 80139e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e4:	88fa      	ldrh	r2, [r7, #6]
 80139e6:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 80139e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ea:	8a5b      	ldrh	r3, [r3, #18]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d101      	bne.n	80139f4 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80139f0:	23f1      	movs	r3, #241	; 0xf1
 80139f2:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80139f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f6:	699b      	ldr	r3, [r3, #24]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80139fc:	23f1      	movs	r3, #241	; 0xf1
 80139fe:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8013a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d16f      	bne.n	8013ae8 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	8a5b      	ldrh	r3, [r3, #18]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fd f902 	bl	8010c16 <VL53LX_calc_pll_period_us>
 8013a12:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8013a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a16:	699b      	ldr	r3, [r3, #24]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8013a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1e:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 8013a20:	4619      	mov	r1, r3
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a28:	6978      	ldr	r0, [r7, #20]
 8013a2a:	f7fd f90b 	bl	8010c44 <VL53LX_duration_maths>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a32:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 8013a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a36:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 8013a38:	0119      	lsls	r1, r3, #4
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a40:	6978      	ldr	r0, [r7, #20]
 8013a42:	f7fd f8ff 	bl	8010c44 <VL53LX_duration_maths>
 8013a46:	4602      	mov	r2, r0
 8013a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4a:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 8013a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a52:	69db      	ldr	r3, [r3, #28]
 8013a54:	4619      	mov	r1, r3
 8013a56:	4610      	mov	r0, r2
 8013a58:	f7fd fb6c 	bl	8011134 <VL53LX_rate_maths>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	461a      	mov	r2, r3
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 8013a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	6a1b      	ldr	r3, [r3, #32]
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7fd fb60 	bl	8011134 <VL53LX_rate_maths>
 8013a74:	4603      	mov	r3, r0
 8013a76:	461a      	mov	r2, r3
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 8013a80:	461a      	mov	r2, r3
 8013a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	4619      	mov	r1, r3
 8013a88:	4610      	mov	r0, r2
 8013a8a:	f7fd fb53 	bl	8011134 <VL53LX_rate_maths>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	461a      	mov	r2, r3
 8013a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a94:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8013a9a:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8013a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8013aa0:	4413      	add	r3, r2
 8013aa2:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8013aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d905      	bls.n	8013ab8 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 8013aac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013ab0:	69ba      	ldr	r2, [r7, #24]
 8013ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ab6:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 8013ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aba:	8ada      	ldrh	r2, [r3, #22]
 8013abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ac0:	69b9      	ldr	r1, [r7, #24]
 8013ac2:	2006      	movs	r0, #6
 8013ac4:	f7fd fb7b 	bl	80111be <VL53LX_rate_per_spad_maths>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 8013ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad6:	8ad9      	ldrh	r1, [r3, #22]
 8013ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ada:	69db      	ldr	r3, [r3, #28]
 8013adc:	461a      	mov	r2, r3
 8013ade:	f7fd f90a 	bl	8010cf6 <VL53LX_events_per_spad_maths>
 8013ae2:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 8013ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae6:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8013ae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3720      	adds	r7, #32
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 8013af4:	b590      	push	{r4, r7, lr}
 8013af6:	b085      	sub	sp, #20
 8013af8:	af02      	add	r7, sp, #8
 8013afa:	4603      	mov	r3, r0
 8013afc:	603a      	str	r2, [r7, #0]
 8013afe:	80fb      	strh	r3, [r7, #6]
 8013b00:	460b      	mov	r3, r1
 8013b02:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	8a58      	ldrh	r0, [r3, #18]
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	8a9c      	ldrh	r4, [r3, #20]
 8013b10:	88fb      	ldrh	r3, [r7, #6]
 8013b12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013b16:	9201      	str	r2, [sp, #4]
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	4622      	mov	r2, r4
 8013b1e:	f7fd fb83 	bl	8011228 <VL53LX_range_maths>
 8013b22:	4603      	mov	r3, r0
 8013b24:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	8a58      	ldrh	r0, [r3, #18]
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	8a9c      	ldrh	r4, [r3, #20]
 8013b3a:	88fb      	ldrh	r3, [r7, #6]
 8013b3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013b40:	9201      	str	r2, [sp, #4]
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	2300      	movs	r3, #0
 8013b46:	4622      	mov	r2, r4
 8013b48:	f7fd fb6e 	bl	8011228 <VL53LX_range_maths>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	8a58      	ldrh	r0, [r3, #18]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	8a9c      	ldrh	r4, [r3, #20]
 8013b64:	88fb      	ldrh	r3, [r7, #6]
 8013b66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013b6a:	9201      	str	r2, [sp, #4]
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	2300      	movs	r3, #0
 8013b70:	4622      	mov	r2, r4
 8013b72:	f7fd fb59 	bl	8011228 <VL53LX_range_maths>
 8013b76:	4603      	mov	r3, r0
 8013b78:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8013b80:	bf00      	nop
 8013b82:	370c      	adds	r7, #12
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd90      	pop	{r4, r7, pc}

08013b88 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	757b      	strb	r3, [r7, #21]





	memcpy(
 8013ba4:	22ac      	movs	r2, #172	; 0xac
 8013ba6:	68b9      	ldr	r1, [r7, #8]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f003 fe32 	bl	8017812 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8013bae:	2300      	movs	r3, #0
 8013bb0:	75fb      	strb	r3, [r7, #23]
 8013bb2:	e008      	b.n	8013bc6 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8013bb4:	7dfa      	ldrb	r2, [r7, #23]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	3206      	adds	r2, #6
 8013bba:	2100      	movs	r1, #0
 8013bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	75fb      	strb	r3, [r7, #23]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	7a5b      	ldrb	r3, [r3, #9]
 8013bca:	7dfa      	ldrb	r2, [r7, #23]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d3f1      	bcc.n	8013bb4 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 8013bd0:	68f9      	ldr	r1, [r7, #12]
 8013bd2:	68b8      	ldr	r0, [r7, #8]
 8013bd4:	f000 f878 	bl	8013cc8 <VL53LX_f_030>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	7a9a      	ldrb	r2, [r3, #10]
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	7a9b      	ldrb	r3, [r3, #10]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d203      	bcs.n	8013bf0 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	7a9b      	ldrb	r3, [r3, #10]
 8013bec:	75bb      	strb	r3, [r7, #22]
 8013bee:	e002      	b.n	8013bf6 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	7a9b      	ldrb	r3, [r3, #10]
 8013bf4:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	75fb      	strb	r3, [r7, #23]
 8013bfa:	e05c      	b.n	8013cb6 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 8013bfc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	db0f      	blt.n	8013c24 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013c0e:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 8013c10:	68ba      	ldr	r2, [r7, #8]
 8013c12:	7a92      	ldrb	r2, [r2, #10]
 8013c14:	b252      	sxtb	r2, r2
 8013c16:	fb93 f1f2 	sdiv	r1, r3, r2
 8013c1a:	fb01 f202 	mul.w	r2, r1, r2
 8013c1e:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8013c20:	757b      	strb	r3, [r7, #21]
 8013c22:	e013      	b.n	8013c4c <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	7a9b      	ldrb	r3, [r3, #10]
 8013c28:	b25b      	sxtb	r3, r3
 8013c2a:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8013c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c30:	4619      	mov	r1, r3
 8013c32:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013c36:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 8013c38:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	7a92      	ldrb	r2, [r2, #10]
 8013c3e:	b252      	sxtb	r2, r2
 8013c40:	fb93 f1f2 	sdiv	r1, r3, r2
 8013c44:	fb01 f202 	mul.w	r2, r1, r2
 8013c48:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 8013c4a:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8013c4c:	7d7b      	ldrb	r3, [r7, #21]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	3206      	adds	r2, #6
 8013c54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8013c58:	7df9      	ldrb	r1, [r7, #23]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	3106      	adds	r1, #6
 8013c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8013c62:	429a      	cmp	r2, r3
 8013c64:	dd12      	ble.n	8013c8c <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 8013c66:	7d7b      	ldrb	r3, [r7, #21]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	3206      	adds	r2, #6
 8013c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 8013c72:	7df9      	ldrb	r1, [r7, #23]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	3106      	adds	r1, #6
 8013c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8013c7c:	7d79      	ldrb	r1, [r7, #21]
 8013c7e:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8013c80:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	1d82      	adds	r2, r0, #6
 8013c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8013c8a:	e006      	b.n	8013c9a <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8013c8c:	7d7b      	ldrb	r3, [r7, #21]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	3206      	adds	r2, #6
 8013c94:	2100      	movs	r1, #0
 8013c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8013c9a:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013c9c:	7d7b      	ldrb	r3, [r7, #21]
 8013c9e:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	3206      	adds	r2, #6
 8013ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	1d82      	adds	r2, r0, #6
 8013cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8013cb0:	7dfb      	ldrb	r3, [r7, #23]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	75fb      	strb	r3, [r7, #23]
 8013cb6:	7dfa      	ldrb	r2, [r7, #23]
 8013cb8:	7dbb      	ldrb	r3, [r7, #22]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d39e      	bcc.n	8013bfc <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8013cbe:	bf00      	nop
 8013cc0:	bf00      	nop
 8013cc2:	3718      	adds	r7, #24
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fd fb85 	bl	80113f8 <VL53LX_decode_vcsel_period>
 8013cee:	4603      	mov	r3, r0
	period = 2048 *
 8013cf0:	02db      	lsls	r3, r3, #11
 8013cf2:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00a      	beq.n	8013d10 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8013d06:	68b9      	ldr	r1, [r7, #8]
 8013d08:	fb01 f202 	mul.w	r2, r1, r2
 8013d0c:	1a9b      	subs	r3, r3, r2
 8013d0e:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8013d16:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8013d18:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dd09      	ble.n	8013d38 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	da01      	bge.n	8013d32 <VL53LX_f_030+0x6a>
 8013d2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8013d32:	12db      	asrs	r3, r3, #11
 8013d34:	75fb      	strb	r3, [r7, #23]
 8013d36:	e008      	b.n	8013d4a <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	da01      	bge.n	8013d46 <VL53LX_f_030+0x7e>
 8013d42:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8013d46:	12db      	asrs	r3, r3, #11
 8013d48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8013d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3718      	adds	r7, #24
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b08e      	sub	sp, #56	; 0x38
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8013d60:	2300      	movs	r3, #0
 8013d62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 8013d66:	2300      	movs	r3, #0
 8013d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 8013d72:	2300      	movs	r3, #0
 8013d74:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 8013d76:	2300      	movs	r3, #0
 8013d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 8013d88:	22ac      	movs	r2, #172	; 0xac
 8013d8a:	6879      	ldr	r1, [r7, #4]
 8013d8c:	6838      	ldr	r0, [r7, #0]
 8013d8e:	f003 fd40 	bl	8017812 <memcpy>


	podata->VL53LX_p_021 = 0;
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	2200      	movs	r2, #0
 8013d96:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013d98:	2300      	movs	r3, #0
 8013d9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013d9e:	e00a      	b.n	8013db6 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 8013da0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	4413      	add	r3, r2
 8013da8:	2210      	movs	r2, #16
 8013daa:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8013dac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013db0:	3301      	adds	r3, #1
 8013db2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013db6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013dba:	2b05      	cmp	r3, #5
 8013dbc:	d9f0      	bls.n	8013da0 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013dc4:	e00b      	b.n	8013dde <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 8013dc6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	3206      	adds	r2, #6
 8013dce:	2100      	movs	r1, #0
 8013dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8013dd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013dd8:	3301      	adds	r3, #1
 8013dda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	7a5b      	ldrb	r3, [r3, #9]
 8013de2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d3ed      	bcc.n	8013dc6 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013dea:	2300      	movs	r3, #0
 8013dec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013df0:	e012      	b.n	8013e18 <VL53LX_f_031+0xc2>
		bin_initial_index[lc] = 0x00;
 8013df2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013df6:	3338      	adds	r3, #56	; 0x38
 8013df8:	443b      	add	r3, r7
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8013e00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013e04:	3338      	adds	r3, #56	; 0x38
 8013e06:	443b      	add	r3, r7
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013e0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013e12:	3301      	adds	r3, #1
 8013e14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013e18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013e1c:	2b0f      	cmp	r3, #15
 8013e1e:	d9e8      	bls.n	8013df2 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 8013e20:	2300      	movs	r3, #0
 8013e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013e26:	2300      	movs	r3, #0
 8013e28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013e2c:	e068      	b.n	8013f00 <VL53LX_f_031+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8013e2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	4413      	add	r3, r2
 8013e36:	7b1b      	ldrb	r3, [r3, #12]
 8013e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8013e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e40:	3338      	adds	r3, #56	; 0x38
 8013e42:	443b      	add	r3, r7
 8013e44:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d115      	bne.n	8013e78 <VL53LX_f_031+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8013e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e54:	0092      	lsls	r2, r2, #2
 8013e56:	b2d2      	uxtb	r2, r2
 8013e58:	3338      	adds	r3, #56	; 0x38
 8013e5a:	443b      	add	r3, r7
 8013e5c:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8013e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	4413      	add	r3, r2
 8013e68:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8013e6c:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8013e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e72:	3301      	adds	r3, #1
 8013e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8013e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013e80:	443a      	add	r2, r7
 8013e82:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8013e86:	3201      	adds	r2, #1
 8013e88:	b2d2      	uxtb	r2, r2
 8013e8a:	3338      	adds	r3, #56	; 0x38
 8013e8c:	443b      	add	r3, r7
 8013e8e:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 8013e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e96:	3338      	adds	r3, #56	; 0x38
 8013e98:	443b      	add	r3, r7
 8013e9a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013ea8:	e021      	b.n	8013eee <VL53LX_f_031+0x198>
			podata->bin_data[VL53LX_p_032+i] +=
 8013eaa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013eae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013eb2:	441a      	add	r2, r3
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	3206      	adds	r2, #6
 8013eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8013ebc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013ec0:	009a      	lsls	r2, r3, #2
 8013ec2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013ec6:	441a      	add	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	3206      	adds	r2, #6
 8013ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 8013ed0:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8013ed4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8013ed8:	4402      	add	r2, r0
 8013eda:	4419      	add	r1, r3
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	3206      	adds	r2, #6
 8013ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8013ee4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013ee8:	3301      	adds	r3, #1
 8013eea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013eee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	d9d9      	bls.n	8013eaa <VL53LX_f_031+0x154>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013efa:	3301      	adds	r3, #1
 8013efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f04:	2b05      	cmp	r3, #5
 8013f06:	d992      	bls.n	8013e2e <VL53LX_f_031+0xd8>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013f08:	2300      	movs	r3, #0
 8013f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f0e:	e022      	b.n	8013f56 <VL53LX_f_031+0x200>

		bin_cfg = podata->bin_seq[lc];
 8013f10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f14:	683a      	ldr	r2, [r7, #0]
 8013f16:	4413      	add	r3, r2
 8013f18:	7b1b      	ldrb	r3, [r3, #12]
 8013f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 8013f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f22:	2b0f      	cmp	r3, #15
 8013f24:	d80c      	bhi.n	8013f40 <VL53LX_f_031+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 8013f26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8013f2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8013f2e:	3238      	adds	r2, #56	; 0x38
 8013f30:	443a      	add	r2, r7
 8013f32:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 8013f36:	683a      	ldr	r2, [r7, #0]
 8013f38:	4413      	add	r3, r2
 8013f3a:	460a      	mov	r2, r1
 8013f3c:	749a      	strb	r2, [r3, #18]
 8013f3e:	e005      	b.n	8013f4c <VL53LX_f_031+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8013f40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	4413      	add	r3, r2
 8013f48:	2200      	movs	r2, #0
 8013f4a:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8013f4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f50:	3301      	adds	r3, #1
 8013f52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f5a:	2b05      	cmp	r3, #5
 8013f5c:	d9d8      	bls.n	8013f10 <VL53LX_f_031+0x1ba>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 8013f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	b2da      	uxtb	r2, r3
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013f70:	e050      	b.n	8014014 <VL53LX_f_031+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8013f72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f76:	3338      	adds	r3, #56	; 0x38
 8013f78:	443b      	add	r3, r7
 8013f7a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8013f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8013f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	dd41      	ble.n	801400a <VL53LX_f_031+0x2b4>

			VL53LX_p_032 = bin_initial_index[lc];
 8013f86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013f8a:	3338      	adds	r3, #56	; 0x38
 8013f8c:	443b      	add	r3, r7
 8013f8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8013f96:	2300      	movs	r3, #0
 8013f98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8013f9c:	e031      	b.n	8014002 <VL53LX_f_031+0x2ac>
				podata->bin_data[VL53LX_p_032+i] +=
 8013f9e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013fa2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013fa6:	441a      	add	r2, r3
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	3206      	adds	r2, #6
 8013fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8013fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb2:	0fda      	lsrs	r2, r3, #31
 8013fb4:	4413      	add	r3, r2
 8013fb6:	105b      	asrs	r3, r3, #1
 8013fb8:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 8013fba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013fc2:	441a      	add	r2, r3
 8013fc4:	4401      	add	r1, r0
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	3206      	adds	r2, #6
 8013fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 8013fce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013fd2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013fd6:	441a      	add	r2, r3
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	3206      	adds	r2, #6
 8013fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013fe0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8013fe4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013fe8:	441a      	add	r2, r3
 8013fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fec:	fb91 f1f3 	sdiv	r1, r1, r3
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	3206      	adds	r2, #6
 8013ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8013ff8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8014002:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014006:	2b03      	cmp	r3, #3
 8014008:	d9c9      	bls.n	8013f9e <VL53LX_f_031+0x248>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801400a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801400e:	3301      	adds	r3, #1
 8014010:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8014014:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014018:	2b0f      	cmp	r3, #15
 801401a:	d9aa      	bls.n	8013f72 <VL53LX_f_031+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	2200      	movs	r2, #0
 8014020:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8014022:	7bfb      	ldrb	r3, [r7, #15]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d102      	bne.n	801402e <VL53LX_f_031+0x2d8>
		(bin_repeat_count[15] > 0))
 8014028:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 801402a:	2b00      	cmp	r3, #0
 801402c:	d002      	beq.n	8014034 <VL53LX_f_031+0x2de>
		podata->number_of_ambient_bins = 4;
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	2204      	movs	r2, #4
 8014032:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8014034:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8014038:	4618      	mov	r0, r3
 801403a:	3738      	adds	r7, #56	; 0x38
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8014040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014042:	b0cb      	sub	sp, #300	; 0x12c
 8014044:	af06      	add	r7, sp, #24
 8014046:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801404a:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 801404e:	6020      	str	r0, [r4, #0]
 8014050:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014054:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8014058:	6001      	str	r1, [r0, #0]
 801405a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801405e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8014062:	600a      	str	r2, [r1, #0]
 8014064:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014068:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801406c:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 801406e:	2300      	movs	r3, #0
 8014070:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8014074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014078:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 801407c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014080:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8014084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014088:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 801408c:	f107 0318 	add.w	r3, r7, #24
 8014090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8014094:	2300      	movs	r3, #0
 8014096:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8014098:	2300      	movs	r3, #0
 801409a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 801409e:	2300      	movs	r3, #0
 80140a0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 80140a4:	2300      	movs	r3, #0
 80140a6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 80140aa:	2300      	movs	r3, #0
 80140ac:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 80140b6:	2300      	movs	r3, #0
 80140b8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 80140bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80140c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80140c4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	f7ff fe44 	bl	8013d56 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 80140ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80140d2:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 80140d4:	b299      	uxth	r1, r3
 80140d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80140da:	3348      	adds	r3, #72	; 0x48
 80140dc:	461a      	mov	r2, r3
 80140de:	2000      	movs	r0, #0
 80140e0:	f7fd f9db 	bl	801149a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 80140e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80140e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80140ec:	3348      	adds	r3, #72	; 0x48
 80140ee:	4619      	mov	r1, r3
 80140f0:	4610      	mov	r0, r2
 80140f2:	f7fd f994 	bl	801141e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 80140f6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d142      	bne.n	8014184 <VL53LX_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80140fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 801410c:	2b00      	cmp	r3, #0
 801410e:	d039      	beq.n	8014184 <VL53LX_hist_process_data+0x144>
		status =
		VL53LX_f_032(
 8014110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801411c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014120:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 801412a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801412e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8014138:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801413c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014146:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801414a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 801414e:	6812      	ldr	r2, [r2, #0]
 8014150:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8014154:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8014158:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 801415c:	6809      	ldr	r1, [r1, #0]
 801415e:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8014162:	f107 0014 	add.w	r0, r7, #20
 8014166:	9004      	str	r0, [sp, #16]
 8014168:	9103      	str	r1, [sp, #12]
 801416a:	9202      	str	r2, [sp, #8]
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	2300      	movs	r3, #0
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	2300      	movs	r3, #0
 8014174:	4632      	mov	r2, r6
 8014176:	4629      	mov	r1, r5
 8014178:	4620      	mov	r0, r4
 801417a:	f002 f90f 	bl	801639c <VL53LX_f_032>
 801417e:	4603      	mov	r3, r0
 8014180:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 8014184:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8014188:	2b00      	cmp	r3, #0
 801418a:	d115      	bne.n	80141b8 <VL53LX_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 801418c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014190:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00c      	beq.n	80141b8 <VL53LX_hist_process_data+0x178>
		status =
			VL53LX_f_033(
 801419e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80141a2:	697a      	ldr	r2, [r7, #20]
 80141a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80141a8:	3348      	adds	r3, #72	; 0x48
 80141aa:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80141ae:	f002 fb67 	bl	8016880 <VL53LX_f_033>
 80141b2:	4603      	mov	r3, r0
 80141b4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 80141b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80141bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 80141c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 80141c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80141cc:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 80141d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141d4:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80141d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141dc:	2200      	movs	r2, #0
 80141de:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 80141e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141e6:	2200      	movs	r2, #0
 80141e8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80141ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141f0:	2200      	movs	r2, #0
 80141f2:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 80141f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141fa:	2200      	movs	r2, #0
 80141fc:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8014200:	2300      	movs	r3, #0
 8014202:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8014206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801420a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014214:	2b00      	cmp	r3, #0
 8014216:	d002      	beq.n	801421e <VL53LX_hist_process_data+0x1de>
		xtalk_enable = 1;
 8014218:	2301      	movs	r3, #1
 801421a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 801421e:	2300      	movs	r3, #0
 8014220:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8014224:	e108      	b.n	8014438 <VL53LX_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8014226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801422a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8014234:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 8014238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801423c:	3348      	adds	r3, #72	; 0x48
 801423e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014242:	7814      	ldrb	r4, [r2, #0]
 8014244:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8014248:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 801424c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8014250:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8014254:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8014258:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801425c:	9405      	str	r4, [sp, #20]
 801425e:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8014262:	9404      	str	r4, [sp, #16]
 8014264:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8014268:	9403      	str	r4, [sp, #12]
 801426a:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 801426e:	9402      	str	r4, [sp, #8]
 8014270:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8014274:	9401      	str	r4, [sp, #4]
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801427c:	6812      	ldr	r2, [r2, #0]
 801427e:	6809      	ldr	r1, [r1, #0]
 8014280:	6800      	ldr	r0, [r0, #0]
 8014282:	f7fe fe65 	bl	8012f50 <VL53LX_f_025>
 8014286:	4603      	mov	r3, r0
 8014288:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 801428c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8014290:	2b00      	cmp	r3, #0
 8014292:	f040 80cb 	bne.w	801442c <VL53LX_hist_process_data+0x3ec>
 8014296:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 801429a:	2b00      	cmp	r3, #0
 801429c:	f040 80c6 	bne.w	801442c <VL53LX_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 80142a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80142a4:	7c9b      	ldrb	r3, [r3, #18]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d110      	bne.n	80142cc <VL53LX_hist_process_data+0x28c>
			pdata = &(presults->VL53LX_p_003[0]);
 80142aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80142ae:	3314      	adds	r3, #20
 80142b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 80142b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80142b8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 80142ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142be:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 80142c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80142c4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 80142c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142ca:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 80142cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80142d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 80142d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 80142dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	461a      	mov	r2, r3
 80142e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80142e8:	fb02 f303 	mul.w	r3, r2, r3
 80142ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 80142f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80142f4:	011b      	lsls	r3, r3, #4
 80142f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 80142fa:	2300      	movs	r3, #0
 80142fc:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8014300:	e08b      	b.n	801441a <VL53LX_hist_process_data+0x3da>

			pdata = &(presults->VL53LX_p_003[t]);
 8014302:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8014306:	224c      	movs	r2, #76	; 0x4c
 8014308:	fb02 f303 	mul.w	r3, r2, r3
 801430c:	3310      	adds	r3, #16
 801430e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8014312:	4413      	add	r3, r2
 8014314:	3304      	adds	r3, #4
 8014316:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 801431a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801431e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8014322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014326:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801432a:	429a      	cmp	r2, r3
 801432c:	dd0e      	ble.n	801434c <VL53LX_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 801432e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014332:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8014336:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8014338:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801433c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014340:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	b29b      	uxth	r3, r3
				delta_mm =
 8014346:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 801434a:	e00d      	b.n	8014368 <VL53LX_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 801434c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014350:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014354:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8014356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801435a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 801435e:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	b29b      	uxth	r3, r3
				delta_mm =
 8014364:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8014368:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801436c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8014374:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8014378:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	461a      	mov	r2, r3
 8014380:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014384:	fb02 f303 	mul.w	r3, r2, r3
 8014388:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 801438c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014390:	015b      	lsls	r3, r3, #5
 8014392:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8014396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801439a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 801439e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 80143ac:	429a      	cmp	r2, r3
 80143ae:	dd2f      	ble.n	8014410 <VL53LX_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 80143b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143b4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80143b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80143bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 80143c6:	429a      	cmp	r2, r3
 80143c8:	da22      	bge.n	8014410 <VL53LX_hist_process_data+0x3d0>
			pdata->VL53LX_p_009 <
 80143ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80143d0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d91b      	bls.n	8014410 <VL53LX_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 80143d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80143de:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 80143e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d913      	bls.n	8014410 <VL53LX_hist_process_data+0x3d0>
			delta_mm <
 80143e8:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 80143ec:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80143f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80143f4:	6812      	ldr	r2, [r2, #0]
 80143f6:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 80143f8:	4293      	cmp	r3, r2
 80143fa:	da09      	bge.n	8014410 <VL53LX_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 80143fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014400:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8014404:	224c      	movs	r2, #76	; 0x4c
 8014406:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801440a:	4618      	mov	r0, r3
 801440c:	f003 fa01 	bl	8017812 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8014410:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8014414:	3301      	adds	r3, #1
 8014416:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 801441a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801441e:	7c9b      	ldrb	r3, [r3, #18]
 8014420:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8014424:	429a      	cmp	r2, r3
 8014426:	f4ff af6c 	bcc.w	8014302 <VL53LX_hist_process_data+0x2c2>
 801442a:	e000      	b.n	801442e <VL53LX_hist_process_data+0x3ee>
			continue;
 801442c:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 801442e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8014432:	3301      	adds	r3, #1
 8014434:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8014438:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 801443c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8014440:	429a      	cmp	r2, r3
 8014442:	f67f aef0 	bls.w	8014226 <VL53LX_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8014446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801444a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8014454:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8014458:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 801445c:	4618      	mov	r0, r3
 801445e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8014462:	46bd      	mov	sp, r7
 8014464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014466 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b086      	sub	sp, #24
 801446a:	af00      	add	r7, sp, #0
 801446c:	60f8      	str	r0, [r7, #12]
 801446e:	460b      	mov	r3, r1
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014474:	2300      	movs	r3, #0
 8014476:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 8014478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d104      	bne.n	801448a <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 8014480:	68f8      	ldr	r0, [r7, #12]
 8014482:	f7f9 fc43 	bl	800dd0c <VL53LX_disable_firmware>
 8014486:	4603      	mov	r3, r0
 8014488:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 801448a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d104      	bne.n	801449c <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7f9 fc6a 	bl	800dd6c <VL53LX_enable_powerforce>
 8014498:	4603      	mov	r3, r0
 801449a:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 801449c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d105      	bne.n	80144b0 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 80144a4:	21fa      	movs	r1, #250	; 0xfa
 80144a6:	68f8      	ldr	r0, [r7, #12]
 80144a8:	f002 fdd6 	bl	8017058 <VL53LX_WaitUs>
 80144ac:	4603      	mov	r3, r0
 80144ae:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 80144b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d107      	bne.n	80144c8 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 80144b8:	2201      	movs	r2, #1
 80144ba:	f240 7181 	movw	r1, #1921	; 0x781
 80144be:	68f8      	ldr	r0, [r7, #12]
 80144c0:	f002 fcda 	bl	8016e78 <VL53LX_WrByte>
 80144c4:	4603      	mov	r3, r0
 80144c6:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 80144c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d107      	bne.n	80144e0 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 80144d0:	2205      	movs	r2, #5
 80144d2:	f240 6183 	movw	r1, #1667	; 0x683
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f002 fcce 	bl	8016e78 <VL53LX_WrByte>
 80144dc:	4603      	mov	r3, r0
 80144de:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 80144e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d105      	bne.n	80144f4 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 80144e8:	6879      	ldr	r1, [r7, #4]
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f002 fdb4 	bl	8017058 <VL53LX_WaitUs>
 80144f0:	4603      	mov	r3, r0
 80144f2:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 80144f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d107      	bne.n	801450c <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 80144fc:	2201      	movs	r2, #1
 80144fe:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f002 fcb8 	bl	8016e78 <VL53LX_WrByte>
 8014508:	4603      	mov	r3, r0
 801450a:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 801450c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d108      	bne.n	8014526 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 8014514:	897b      	ldrh	r3, [r7, #10]
 8014516:	461a      	mov	r2, r3
 8014518:	f240 7184 	movw	r1, #1924	; 0x784
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f002 fcd5 	bl	8016ecc <VL53LX_WrWord>
 8014522:	4603      	mov	r3, r0
 8014524:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8014526:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 801452a:	4618      	mov	r0, r3
 801452c:	3718      	adds	r7, #24
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}

08014532 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8014532:	b580      	push	{r7, lr}
 8014534:	b086      	sub	sp, #24
 8014536:	af00      	add	r7, sp, #0
 8014538:	60f8      	str	r0, [r7, #12]
 801453a:	607b      	str	r3, [r7, #4]
 801453c:	460b      	mov	r3, r1
 801453e:	72fb      	strb	r3, [r7, #11]
 8014540:	4613      	mov	r3, r2
 8014542:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8014544:	2300      	movs	r3, #0
 8014546:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8014548:	2300      	movs	r3, #0
 801454a:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 801454c:	7afb      	ldrb	r3, [r7, #11]
 801454e:	75bb      	strb	r3, [r7, #22]
 8014550:	e041      	b.n	80145d6 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 8014552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d108      	bne.n	801456c <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 801455a:	7dbb      	ldrb	r3, [r7, #22]
 801455c:	461a      	mov	r2, r3
 801455e:	f240 7194 	movw	r1, #1940	; 0x794
 8014562:	68f8      	ldr	r0, [r7, #12]
 8014564:	f002 fc88 	bl	8016e78 <VL53LX_WrByte>
 8014568:	4603      	mov	r3, r0
 801456a:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 801456c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d107      	bne.n	8014584 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 8014574:	2200      	movs	r2, #0
 8014576:	f240 7183 	movw	r1, #1923	; 0x783
 801457a:	68f8      	ldr	r0, [r7, #12]
 801457c:	f002 fc7c 	bl	8016e78 <VL53LX_WrByte>
 8014580:	4603      	mov	r3, r0
 8014582:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 8014584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d105      	bne.n	8014598 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 801458c:	2105      	movs	r1, #5
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f002 fd62 	bl	8017058 <VL53LX_WaitUs>
 8014594:	4603      	mov	r3, r0
 8014596:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 8014598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d107      	bne.n	80145b0 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 80145a0:	2201      	movs	r2, #1
 80145a2:	f240 7183 	movw	r1, #1923	; 0x783
 80145a6:	68f8      	ldr	r0, [r7, #12]
 80145a8:	f002 fc66 	bl	8016e78 <VL53LX_WrByte>
 80145ac:	4603      	mov	r3, r0
 80145ae:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 80145b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d108      	bne.n	80145ca <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 80145b8:	2304      	movs	r3, #4
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 80145c0:	68f8      	ldr	r0, [r7, #12]
 80145c2:	f002 fc23 	bl	8016e0c <VL53LX_ReadMulti>
 80145c6:	4603      	mov	r3, r0
 80145c8:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	3304      	adds	r3, #4
 80145ce:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 80145d0:	7dbb      	ldrb	r3, [r7, #22]
 80145d2:	3301      	adds	r3, #1
 80145d4:	75bb      	strb	r3, [r7, #22]
 80145d6:	7dba      	ldrb	r2, [r7, #22]
 80145d8:	7af9      	ldrb	r1, [r7, #11]
 80145da:	7abb      	ldrb	r3, [r7, #10]
 80145dc:	440b      	add	r3, r1
 80145de:	429a      	cmp	r2, r3
 80145e0:	dbb7      	blt.n	8014552 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 80145e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3718      	adds	r7, #24
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 80145ee:	b580      	push	{r7, lr}
 80145f0:	b084      	sub	sp, #16
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80145f6:	2300      	movs	r3, #0
 80145f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80145fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d107      	bne.n	8014612 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 8014602:	2201      	movs	r2, #1
 8014604:	f240 7183 	movw	r1, #1923	; 0x783
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f002 fc35 	bl	8016e78 <VL53LX_WrByte>
 801460e:	4603      	mov	r3, r0
 8014610:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8014612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d107      	bne.n	801462a <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 801461a:	2200      	movs	r2, #0
 801461c:	f240 7181 	movw	r1, #1921	; 0x781
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	f002 fc29 	bl	8016e78 <VL53LX_WrByte>
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 801462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d104      	bne.n	801463c <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f9 fbac 	bl	800dd90 <VL53LX_disable_powerforce>
 8014638:	4603      	mov	r3, r0
 801463a:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 801463c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d104      	bne.n	801464e <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7f9 fb4f 	bl	800dce8 <VL53LX_enable_firmware>
 801464a:	4603      	mov	r3, r0
 801464c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 801464e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8014652:	4618      	mov	r0, r3
 8014654:	3710      	adds	r7, #16
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 801465a:	b480      	push	{r7}
 801465c:	b087      	sub	sp, #28
 801465e:	af00      	add	r7, sp, #0
 8014660:	4603      	mov	r3, r0
 8014662:	60b9      	str	r1, [r7, #8]
 8014664:	607a      	str	r2, [r7, #4]
 8014666:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8014668:	2300      	movs	r3, #0
 801466a:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 801466c:	2300      	movs	r3, #0
 801466e:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8014670:	89fb      	ldrh	r3, [r7, #14]
 8014672:	2b03      	cmp	r3, #3
 8014674:	d802      	bhi.n	801467c <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8014676:	f06f 0308 	mvn.w	r3, #8
 801467a:	e018      	b.n	80146ae <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 801467c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014680:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	3302      	adds	r3, #2
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	b29b      	uxth	r3, r3
 801468a:	8afa      	ldrh	r2, [r7, #22]
 801468c:	1ad3      	subs	r3, r2, r3
 801468e:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8014690:	8afb      	ldrh	r3, [r7, #22]
 8014692:	2bff      	cmp	r3, #255	; 0xff
 8014694:	d901      	bls.n	801469a <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8014696:	2300      	movs	r3, #0
 8014698:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 801469a:	8afb      	ldrh	r3, [r7, #22]
 801469c:	b2da      	uxtb	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	78da      	ldrb	r2, [r3, #3]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	705a      	strb	r2, [r3, #1]

	return status;
 80146aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	371c      	adds	r7, #28
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr

080146ba <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 80146ba:	b590      	push	{r4, r7, lr}
 80146bc:	b087      	sub	sp, #28
 80146be:	af00      	add	r7, sp, #0
 80146c0:	4603      	mov	r3, r0
 80146c2:	60b9      	str	r1, [r7, #8]
 80146c4:	607a      	str	r2, [r7, #4]
 80146c6:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 80146c8:	2300      	movs	r3, #0
 80146ca:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 80146cc:	2300      	movs	r3, #0
 80146ce:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 80146d0:	2300      	movs	r3, #0
 80146d2:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80146d4:	89fb      	ldrh	r3, [r7, #14]
 80146d6:	2b37      	cmp	r3, #55	; 0x37
 80146d8:	d802      	bhi.n	80146e0 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 80146da:	f06f 0308 	mvn.w	r3, #8
 80146de:	e03e      	b.n	801475e <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80146e0:	68b9      	ldr	r1, [r7, #8]
 80146e2:	2002      	movs	r0, #2
 80146e4:	f7f9 fa01 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80146e8:	4603      	mov	r3, r0
 80146ea:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	3302      	adds	r3, #2
 80146f4:	4619      	mov	r1, r3
 80146f6:	2002      	movs	r0, #2
 80146f8:	f7f9 f9f7 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80146fc:	4603      	mov	r3, r0
 80146fe:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8014708:	099b      	lsrs	r3, r3, #6
 801470a:	b29a      	uxth	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2219      	movs	r2, #25
 8014714:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2205      	movs	r2, #5
 801471a:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2205      	movs	r2, #5
 8014720:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	3304      	adds	r3, #4
 8014726:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8014728:	2300      	movs	r3, #0
 801472a:	74fb      	strb	r3, [r7, #19]
 801472c:	e012      	b.n	8014754 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 801472e:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 8014730:	6979      	ldr	r1, [r7, #20]
 8014732:	2002      	movs	r0, #2
 8014734:	f7f9 f9d9 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014738:	4603      	mov	r3, r0
 801473a:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	1d23      	adds	r3, r4, #4
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	4413      	add	r3, r2
 8014744:	460a      	mov	r2, r1
 8014746:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	3302      	adds	r3, #2
 801474c:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 801474e:	7cfb      	ldrb	r3, [r7, #19]
 8014750:	3301      	adds	r3, #1
 8014752:	74fb      	strb	r3, [r7, #19]
 8014754:	7cfb      	ldrb	r3, [r7, #19]
 8014756:	2b18      	cmp	r3, #24
 8014758:	d9e9      	bls.n	801472e <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 801475a:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801475e:	4618      	mov	r0, r3
 8014760:	371c      	adds	r7, #28
 8014762:	46bd      	mov	sp, r7
 8014764:	bd90      	pop	{r4, r7, pc}

08014766 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b086      	sub	sp, #24
 801476a:	af00      	add	r7, sp, #0
 801476c:	4603      	mov	r3, r0
 801476e:	60b9      	str	r1, [r7, #8]
 8014770:	607a      	str	r2, [r7, #4]
 8014772:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8014774:	2300      	movs	r3, #0
 8014776:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8014778:	89fb      	ldrh	r3, [r7, #14]
 801477a:	2b07      	cmp	r3, #7
 801477c:	d802      	bhi.n	8014784 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 801477e:	f06f 0308 	mvn.w	r3, #8
 8014782:	e027      	b.n	80147d4 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8014784:	68b9      	ldr	r1, [r7, #8]
 8014786:	2002      	movs	r0, #2
 8014788:	f7f9 f9af 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801478c:	4603      	mov	r3, r0
 801478e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	3302      	adds	r3, #2
 8014798:	4619      	mov	r1, r3
 801479a:	2002      	movs	r0, #2
 801479c:	f7f9 f9a5 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80147a0:	4603      	mov	r3, r0
 80147a2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	3304      	adds	r3, #4
 80147ac:	4619      	mov	r1, r3
 80147ae:	2002      	movs	r0, #2
 80147b0:	f7f9 f99b 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80147b4:	4603      	mov	r3, r0
 80147b6:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	3306      	adds	r3, #6
 80147c0:	4619      	mov	r1, r3
 80147c2:	2002      	movs	r0, #2
 80147c4:	f7f9 f991 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80147c8:	4603      	mov	r3, r0
 80147ca:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	80da      	strh	r2, [r3, #6]

	return status;
 80147d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3718      	adds	r7, #24
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b086      	sub	sp, #24
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	4603      	mov	r3, r0
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 80147ea:	2300      	movs	r3, #0
 80147ec:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 80147ee:	89fb      	ldrh	r3, [r7, #14]
 80147f0:	2b0f      	cmp	r3, #15
 80147f2:	d802      	bhi.n	80147fa <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 80147f4:	f06f 0308 	mvn.w	r3, #8
 80147f8:	e04d      	b.n	8014896 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80147fa:	68b9      	ldr	r1, [r7, #8]
 80147fc:	2002      	movs	r0, #2
 80147fe:	f7f9 f974 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014802:	4603      	mov	r3, r0
 8014804:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	789a      	ldrb	r2, [r3, #2]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	78da      	ldrb	r2, [r3, #3]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	3304      	adds	r3, #4
 801481e:	4619      	mov	r1, r3
 8014820:	2002      	movs	r0, #2
 8014822:	f7f9 f962 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014826:	4603      	mov	r3, r0
 8014828:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	3306      	adds	r3, #6
 8014832:	4619      	mov	r1, r3
 8014834:	2002      	movs	r0, #2
 8014836:	f7f9 f958 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801483a:	4603      	mov	r3, r0
 801483c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	3308      	adds	r3, #8
 8014846:	4619      	mov	r1, r3
 8014848:	2002      	movs	r0, #2
 801484a:	f7f9 f94e 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801484e:	4603      	mov	r3, r0
 8014850:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	330a      	adds	r3, #10
 801485a:	4619      	mov	r1, r3
 801485c:	2002      	movs	r0, #2
 801485e:	f7f9 f944 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014862:	4603      	mov	r3, r0
 8014864:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	330c      	adds	r3, #12
 801486e:	4619      	mov	r1, r3
 8014870:	2002      	movs	r0, #2
 8014872:	f7f9 f93a 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014876:	4603      	mov	r3, r0
 8014878:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	330e      	adds	r3, #14
 8014882:	4619      	mov	r1, r3
 8014884:	2002      	movs	r0, #2
 8014886:	f7f9 f930 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801488a:	4603      	mov	r3, r0
 801488c:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	81da      	strh	r2, [r3, #14]

	return status;
 8014892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014896:	4618      	mov	r0, r3
 8014898:	3718      	adds	r7, #24
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}

0801489e <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 801489e:	b580      	push	{r7, lr}
 80148a0:	b086      	sub	sp, #24
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	60f8      	str	r0, [r7, #12]
 80148a6:	607b      	str	r3, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	72fb      	strb	r3, [r7, #11]
 80148ac:	4613      	mov	r3, r2
 80148ae:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80148b0:	2300      	movs	r3, #0
 80148b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80148b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d106      	bne.n	80148ca <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 80148bc:	2232      	movs	r2, #50	; 0x32
 80148be:	2104      	movs	r1, #4
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff fdd0 	bl	8014466 <VL53LX_nvm_enable>
 80148c6:	4603      	mov	r3, r0
 80148c8:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 80148ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d107      	bne.n	80148e2 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 80148d2:	7aba      	ldrb	r2, [r7, #10]
 80148d4:	7af9      	ldrb	r1, [r7, #11]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f7ff fe2a 	bl	8014532 <VL53LX_nvm_read>
 80148de:	4603      	mov	r3, r0
 80148e0:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 80148e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d104      	bne.n	80148f4 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f7ff fe7f 	bl	80145ee <VL53LX_nvm_disable>
 80148f0:	4603      	mov	r3, r0
 80148f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80148f4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801490a:	2300      	movs	r3, #0
 801490c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 801490e:	f107 0308 	add.w	r3, r7, #8
 8014912:	2201      	movs	r2, #1
 8014914:	212e      	movs	r1, #46	; 0x2e
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7ff ffc1 	bl	801489e <VL53LX_read_nvm_raw_data>
 801491c:	4603      	mov	r3, r0
 801491e:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8014920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d108      	bne.n	801493a <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 8014928:	f107 0308 	add.w	r3, r7, #8
 801492c:	683a      	ldr	r2, [r7, #0]
 801492e:	4619      	mov	r1, r3
 8014930:	2004      	movs	r0, #4
 8014932:	f7ff fe92 	bl	801465a <VL53LX_nvm_decode_optical_centre>
 8014936:	4603      	mov	r3, r0
 8014938:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 801493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 8014946:	b580      	push	{r7, lr}
 8014948:	b092      	sub	sp, #72	; 0x48
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
 801494e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014950:	2300      	movs	r3, #0
 8014952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 8014956:	f107 030c 	add.w	r3, r7, #12
 801495a:	220e      	movs	r2, #14
 801495c:	2157      	movs	r1, #87	; 0x57
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f7ff ff9d 	bl	801489e <VL53LX_read_nvm_raw_data>
 8014964:	4603      	mov	r3, r0
 8014966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 801496a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801496e:	2b00      	cmp	r3, #0
 8014970:	d109      	bne.n	8014986 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 8014972:	f107 030c 	add.w	r3, r7, #12
 8014976:	683a      	ldr	r2, [r7, #0]
 8014978:	4619      	mov	r1, r3
 801497a:	2038      	movs	r0, #56	; 0x38
 801497c:	f7ff fe9d 	bl	80146ba <VL53LX_nvm_decode_cal_peak_rate_map>
 8014980:	4603      	mov	r3, r0
 8014982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8014986:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801498a:	4618      	mov	r0, r3
 801498c:	3748      	adds	r7, #72	; 0x48
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b086      	sub	sp, #24
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
 801499a:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801499c:	2300      	movs	r3, #0
 801499e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 80149a0:	f107 030c 	add.w	r3, r7, #12
 80149a4:	2202      	movs	r2, #2
 80149a6:	2165      	movs	r1, #101	; 0x65
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7ff ff78 	bl	801489e <VL53LX_read_nvm_raw_data>
 80149ae:	4603      	mov	r3, r0
 80149b0:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80149b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d108      	bne.n	80149cc <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 80149ba:	f107 030c 	add.w	r3, r7, #12
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	4619      	mov	r1, r3
 80149c2:	2008      	movs	r0, #8
 80149c4:	f7ff fecf 	bl	8014766 <VL53LX_nvm_decode_additional_offset_cal_data>
 80149c8:	4603      	mov	r3, r0
 80149ca:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80149cc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3718      	adds	r7, #24
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}

080149d8 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b08a      	sub	sp, #40	; 0x28
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	460b      	mov	r3, r1
 80149e2:	607a      	str	r2, [r7, #4]
 80149e4:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80149e6:	2300      	movs	r3, #0
 80149e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 80149ec:	897b      	ldrh	r3, [r7, #10]
 80149ee:	089b      	lsrs	r3, r3, #2
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	b2d9      	uxtb	r1, r3
 80149f4:	f107 0314 	add.w	r3, r7, #20
 80149f8:	2204      	movs	r2, #4
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	f7ff ff4f 	bl	801489e <VL53LX_read_nvm_raw_data>
 8014a00:	4603      	mov	r3, r0
 8014a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8014a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d109      	bne.n	8014a22 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 8014a0e:	f107 0314 	add.w	r3, r7, #20
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	4619      	mov	r1, r3
 8014a16:	2010      	movs	r0, #16
 8014a18:	f7ff fee0 	bl	80147dc <VL53LX_nvm_decode_fmt_range_results_data>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8014a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3728      	adds	r7, #40	; 0x28
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}

08014a2e <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014a2e:	b580      	push	{r7, lr}
 8014a30:	b086      	sub	sp, #24
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	60f8      	str	r0, [r7, #12]
 8014a36:	460b      	mov	r3, r1
 8014a38:	607a      	str	r2, [r7, #4]
 8014a3a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014a40:	897b      	ldrh	r3, [r7, #10]
 8014a42:	2b0a      	cmp	r3, #10
 8014a44:	d802      	bhi.n	8014a4c <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014a46:	f06f 0309 	mvn.w	r3, #9
 8014a4a:	e047      	b.n	8014adc <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a54:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014a62:	f002 020f 	and.w	r2, r2, #15
 8014a66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8014a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014a76:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014a78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014a82:	f002 0203 	and.w	r2, r2, #3
 8014a86:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014a88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014a96:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014a98:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	88d8      	ldrh	r0, [r3, #6]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	3305      	adds	r3, #5
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	2102      	movs	r1, #2
 8014aa6:	f7f8 fff5 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8014ab8:	68fa      	ldr	r2, [r7, #12]
 8014aba:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014abc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8014ac6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014aca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014acc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8014ad2:	68fa      	ldr	r2, [r7, #12]
 8014ad4:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8014ad6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3718      	adds	r7, #24
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b086      	sub	sp, #24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	4603      	mov	r3, r0
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	607a      	str	r2, [r7, #4]
 8014af0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014af2:	2300      	movs	r3, #0
 8014af4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8014af6:	89fb      	ldrh	r3, [r7, #14]
 8014af8:	2b0a      	cmp	r3, #10
 8014afa:	d802      	bhi.n	8014b02 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014afc:	f06f 0309 	mvn.w	r3, #9
 8014b00:	e046      	b.n	8014b90 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b0a:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	3301      	adds	r3, #1
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	f003 030f 	and.w	r3, r3, #15
 8014b1a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	3302      	adds	r3, #2
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b2a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	3303      	adds	r3, #3
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	f003 0303 	and.w	r3, r3, #3
 8014b3a:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	3304      	adds	r3, #4
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b4a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	3305      	adds	r3, #5
 8014b54:	4619      	mov	r1, r3
 8014b56:	2002      	movs	r0, #2
 8014b58:	f7f8 ffc7 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	79da      	ldrb	r2, [r3, #7]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	7a1a      	ldrb	r2, [r3, #8]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	3309      	adds	r3, #9
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b7e:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	7a9a      	ldrb	r2, [r3, #10]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8014b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3718      	adds	r7, #24
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b086      	sub	sp, #24
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8014ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d108      	bne.n	8014bc0 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 8014bae:	f107 020c 	add.w	r2, r7, #12
 8014bb2:	230b      	movs	r3, #11
 8014bb4:	2101      	movs	r1, #1
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f002 f928 	bl	8016e0c <VL53LX_ReadMulti>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8014bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d108      	bne.n	8014bda <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 8014bc8:	f107 030c 	add.w	r3, r7, #12
 8014bcc:	683a      	ldr	r2, [r7, #0]
 8014bce:	4619      	mov	r1, r3
 8014bd0:	200b      	movs	r0, #11
 8014bd2:	f7ff ff87 	bl	8014ae4 <VL53LX_i2c_decode_static_nvm_managed>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3718      	adds	r7, #24
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b086      	sub	sp, #24
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	60f8      	str	r0, [r7, #12]
 8014bee:	460b      	mov	r3, r1
 8014bf0:	607a      	str	r2, [r7, #4]
 8014bf2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014bf8:	897b      	ldrh	r3, [r7, #10]
 8014bfa:	2b16      	cmp	r3, #22
 8014bfc:	d802      	bhi.n	8014c04 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014bfe:	f06f 0309 	mvn.w	r3, #9
 8014c02:	e076      	b.n	8014cf2 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8014c10:	68fa      	ldr	r2, [r7, #12]
 8014c12:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014c14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8014c28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8014c2e:	68fa      	ldr	r2, [r7, #12]
 8014c30:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8014c32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014c3c:	f002 020f 	and.w	r2, r2, #15
 8014c40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014c42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8014c48:	68fa      	ldr	r2, [r7, #12]
 8014c4a:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8014c4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014c56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014c5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014c5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8014c66:	f002 0203 	and.w	r2, r2, #3
 8014c6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014c6c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	8958      	ldrh	r0, [r3, #10]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	3309      	adds	r3, #9
 8014c76:	461a      	mov	r2, r3
 8014c78:	2102      	movs	r1, #2
 8014c7a:	f7f8 ff0b 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	330b      	adds	r3, #11
 8014c88:	461a      	mov	r2, r3
 8014c8a:	2102      	movs	r1, #2
 8014c8c:	f7f8 ff4d 	bl	800db2a <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	330d      	adds	r3, #13
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	2102      	movs	r1, #2
 8014c9e:	f7f8 ff44 	bl	800db2a <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	8a18      	ldrh	r0, [r3, #16]
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	330f      	adds	r3, #15
 8014caa:	461a      	mov	r2, r3
 8014cac:	2102      	movs	r1, #2
 8014cae:	f7f8 fef1 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 8014cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014cbc:	b218      	sxth	r0, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	3311      	adds	r3, #17
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	2102      	movs	r1, #2
 8014cc6:	f7f8 ff30 	bl	800db2a <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	3313      	adds	r3, #19
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	2102      	movs	r1, #2
 8014cd8:	f7f8 ff27 	bl	800db2a <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	3315      	adds	r3, #21
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	2102      	movs	r1, #2
 8014cea:	f7f8 ff1e 	bl	800db2a <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8014cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3718      	adds	r7, #24
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b086      	sub	sp, #24
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	4603      	mov	r3, r0
 8014d02:	60b9      	str	r1, [r7, #8]
 8014d04:	607a      	str	r2, [r7, #4]
 8014d06:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8014d0c:	89fb      	ldrh	r3, [r7, #14]
 8014d0e:	2b16      	cmp	r3, #22
 8014d10:	d802      	bhi.n	8014d18 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014d12:	f06f 0309 	mvn.w	r3, #9
 8014d16:	e079      	b.n	8014e0c <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	785a      	ldrb	r2, [r3, #1]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	789a      	ldrb	r2, [r3, #2]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	78da      	ldrb	r2, [r3, #3]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	791a      	ldrb	r2, [r3, #4]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	3305      	adds	r3, #5
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	f003 030f 	and.w	r3, r3, #15
 8014d4a:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	799a      	ldrb	r2, [r3, #6]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	3307      	adds	r3, #7
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d62:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	3308      	adds	r3, #8
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	f003 0303 	and.w	r3, r3, #3
 8014d72:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	3309      	adds	r3, #9
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	2002      	movs	r0, #2
 8014d80:	f7f8 feb3 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014d84:	4603      	mov	r3, r0
 8014d86:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	330b      	adds	r3, #11
 8014d90:	4619      	mov	r1, r3
 8014d92:	2002      	movs	r0, #2
 8014d94:	f7f8 fef5 	bl	800db82 <VL53LX_i2c_decode_int16_t>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	330d      	adds	r3, #13
 8014da4:	4619      	mov	r1, r3
 8014da6:	2002      	movs	r0, #2
 8014da8:	f7f8 feeb 	bl	800db82 <VL53LX_i2c_decode_int16_t>
 8014dac:	4603      	mov	r3, r0
 8014dae:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	330f      	adds	r3, #15
 8014db8:	4619      	mov	r1, r3
 8014dba:	2002      	movs	r0, #2
 8014dbc:	f7f8 fe95 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	3311      	adds	r3, #17
 8014dcc:	4619      	mov	r1, r3
 8014dce:	2002      	movs	r0, #2
 8014dd0:	f7f8 fed7 	bl	800db82 <VL53LX_i2c_decode_int16_t>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dda:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	3313      	adds	r3, #19
 8014de4:	4619      	mov	r1, r3
 8014de6:	2002      	movs	r0, #2
 8014de8:	f7f8 fecb 	bl	800db82 <VL53LX_i2c_decode_int16_t>
 8014dec:	4603      	mov	r3, r0
 8014dee:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	3315      	adds	r3, #21
 8014df8:	4619      	mov	r1, r3
 8014dfa:	2002      	movs	r0, #2
 8014dfc:	f7f8 fec1 	bl	800db82 <VL53LX_i2c_decode_int16_t>
 8014e00:	4603      	mov	r3, r0
 8014e02:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8014e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3718      	adds	r7, #24
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b08a      	sub	sp, #40	; 0x28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8014e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d109      	bne.n	8014e40 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 8014e2c:	f107 020c 	add.w	r2, r7, #12
 8014e30:	2317      	movs	r3, #23
 8014e32:	210d      	movs	r1, #13
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f001 ffe9 	bl	8016e0c <VL53LX_ReadMulti>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8014e40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d109      	bne.n	8014e5c <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 8014e48:	f107 030c 	add.w	r3, r7, #12
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	4619      	mov	r1, r3
 8014e50:	2017      	movs	r0, #23
 8014e52:	f7ff ff52 	bl	8014cfa <VL53LX_i2c_decode_customer_nvm_managed>
 8014e56:	4603      	mov	r3, r0
 8014e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 8014e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d11c      	bne.n	8014e9e <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	8a5b      	ldrh	r3, [r3, #18]
 8014e68:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 8014e6a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	da00      	bge.n	8014e74 <VL53LX_get_customer_nvm_managed+0x60>
 8014e72:	3303      	adds	r3, #3
 8014e74:	109b      	asrs	r3, r3, #2
 8014e76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 8014e78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e80:	db04      	blt.n	8014e8c <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 8014e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e84:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014e96:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014e9c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8014e9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3728      	adds	r7, #40	; 0x28
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b086      	sub	sp, #24
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	60f8      	str	r0, [r7, #12]
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	607a      	str	r2, [r7, #4]
 8014eb6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 8014ebc:	897b      	ldrh	r3, [r7, #10]
 8014ebe:	2b1f      	cmp	r3, #31
 8014ec0:	d802      	bhi.n	8014ec8 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ec2:	f06f 0309 	mvn.w	r3, #9
 8014ec6:	e0cf      	b.n	8015068 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	881b      	ldrh	r3, [r3, #0]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	2102      	movs	r1, #2
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7f8 fddf 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8014ede:	f002 0201 	and.w	r2, r2, #1
 8014ee2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8014eee:	f002 020f 	and.w	r2, r2, #15
 8014ef2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014ef4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8014efe:	f002 020f 	and.w	r2, r2, #15
 8014f02:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014f04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8014f0e:	f002 021f 	and.w	r2, r2, #31
 8014f12:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014f1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014f22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014f24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8014f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014f32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014f34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8014f3e:	f002 0201 	and.w	r2, r2, #1
 8014f42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014f44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8014f4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014f58:	f002 0201 	and.w	r2, r2, #1
 8014f5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8014f5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014f68:	f002 0203 	and.w	r2, r2, #3
 8014f6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8014f6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014f78:	f002 021f 	and.w	r2, r2, #31
 8014f7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8014f7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8014f88:	f002 0203 	and.w	r2, r2, #3
 8014f8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8014f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8014f98:	f002 0203 	and.w	r2, r2, #3
 8014f9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8014f9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014fa8:	f002 0207 	and.w	r2, r2, #7
 8014fac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8014fae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014fb8:	f002 021f 	and.w	r2, r2, #31
 8014fbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8014fbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8014fc8:	f002 0201 	and.w	r2, r2, #1
 8014fcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8014fce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8014fd4:	68fa      	ldr	r2, [r7, #12]
 8014fd6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8014fd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8014fe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8014fec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8014ff2:	68fa      	ldr	r2, [r7, #12]
 8014ff4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8014ff6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8014ffc:	68fa      	ldr	r2, [r7, #12]
 8014ffe:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8015000:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 801500a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	8b18      	ldrh	r0, [r3, #24]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	3318      	adds	r3, #24
 8015014:	461a      	mov	r2, r3
 8015016:	2102      	movs	r1, #2
 8015018:	f7f8 fd3c 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8015024:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 801502e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8015038:	f002 020f 	and.w	r2, r2, #15
 801503c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 801503e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8015044:	68fa      	ldr	r2, [r7, #12]
 8015046:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8015048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8015052:	f002 020f 	and.w	r2, r2, #15
 8015056:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8015058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 801505e:	68fa      	ldr	r2, [r7, #12]
 8015060:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8015062:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015068:	4618      	mov	r0, r3
 801506a:	3718      	adds	r7, #24
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b086      	sub	sp, #24
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	460b      	mov	r3, r1
 801507a:	607a      	str	r2, [r7, #4]
 801507c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801507e:	2300      	movs	r3, #0
 8015080:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8015082:	897b      	ldrh	r3, [r7, #10]
 8015084:	2b15      	cmp	r3, #21
 8015086:	d802      	bhi.n	801508e <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015088:	f06f 0309 	mvn.w	r3, #9
 801508c:	e070      	b.n	8015170 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801509a:	68fa      	ldr	r2, [r7, #12]
 801509c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801509e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80150a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80150b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80150b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80150b8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 80150be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80150c2:	b298      	uxth	r0, r3
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3304      	adds	r3, #4
 80150c8:	461a      	mov	r2, r3
 80150ca:	2102      	movs	r1, #2
 80150cc:	f7f8 fce2 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80150d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80150dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80150de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80150e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80150f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80150fc:	f002 0201 	and.w	r2, r2, #1
 8015100:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8015102:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 801510c:	f002 0207 	and.w	r2, r2, #7
 8015110:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8015112:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	8998      	ldrh	r0, [r3, #12]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	330c      	adds	r3, #12
 801511c:	461a      	mov	r2, r3
 801511e:	2102      	movs	r1, #2
 8015120:	f7f8 fcb8 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	89d8      	ldrh	r0, [r3, #14]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	330e      	adds	r3, #14
 801512c:	461a      	mov	r2, r3
 801512e:	2102      	movs	r1, #2
 8015130:	f7f8 fcb0 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	8a18      	ldrh	r0, [r3, #16]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	3310      	adds	r3, #16
 801513c:	461a      	mov	r2, r3
 801513e:	2102      	movs	r1, #2
 8015140:	f7f8 fca8 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8015148:	68fa      	ldr	r2, [r7, #12]
 801514a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801514c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8015156:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 801515c:	68fa      	ldr	r2, [r7, #12]
 801515e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8015160:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801516a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801516c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3718      	adds	r7, #24
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b086      	sub	sp, #24
 801517c:	af00      	add	r7, sp, #0
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	460b      	mov	r3, r1
 8015182:	607a      	str	r2, [r7, #4]
 8015184:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015186:	2300      	movs	r3, #0
 8015188:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 801518a:	897b      	ldrh	r3, [r7, #10]
 801518c:	2b16      	cmp	r3, #22
 801518e:	d802      	bhi.n	8015196 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015190:	f06f 0309 	mvn.w	r3, #9
 8015194:	e06e      	b.n	8015274 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	f003 030f 	and.w	r3, r3, #15
 801519e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80151ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80151b6:	f002 020f 	and.w	r2, r2, #15
 80151ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80151bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80151c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80151d0:	f002 020f 	and.w	r2, r2, #15
 80151d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80151d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80151e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80151ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80151ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80151f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80151fa:	f002 020f 	and.w	r2, r2, #15
 80151fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8015200:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801520a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8015214:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8015218:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801521a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	8958      	ldrh	r0, [r3, #10]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	330a      	adds	r3, #10
 8015224:	461a      	mov	r2, r3
 8015226:	2102      	movs	r1, #2
 8015228:	f7f8 fc34 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	8998      	ldrh	r0, [r3, #12]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	330c      	adds	r3, #12
 8015234:	461a      	mov	r2, r3
 8015236:	2102      	movs	r1, #2
 8015238:	f7f8 fc2c 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8015244:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 801524e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	6918      	ldr	r0, [r3, #16]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	3312      	adds	r3, #18
 8015258:	461a      	mov	r2, r3
 801525a:	2104      	movs	r1, #4
 801525c:	f7f8 fcba 	bl	800dbd4 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8015268:	f002 0201 	and.w	r2, r2, #1
 801526c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 801526e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015274:	4618      	mov	r0, r3
 8015276:	3718      	adds	r7, #24
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	460b      	mov	r3, r1
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801528a:	2300      	movs	r3, #0
 801528c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 801528e:	897b      	ldrh	r3, [r7, #10]
 8015290:	2b11      	cmp	r3, #17
 8015292:	d802      	bhi.n	801529a <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015294:	f06f 0309 	mvn.w	r3, #9
 8015298:	e071      	b.n	801537e <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	781b      	ldrb	r3, [r3, #0]
 801529e:	f003 0303 	and.w	r3, r3, #3
 80152a2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	8858      	ldrh	r0, [r3, #2]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	3301      	adds	r3, #1
 80152b0:	461a      	mov	r2, r3
 80152b2:	2102      	movs	r1, #2
 80152b4:	f7f8 fbee 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	8898      	ldrh	r0, [r3, #4]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3303      	adds	r3, #3
 80152c0:	461a      	mov	r2, r3
 80152c2:	2102      	movs	r1, #2
 80152c4:	f7f8 fbe6 	bl	800da94 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80152d0:	f002 0201 	and.w	r2, r2, #1
 80152d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80152d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80152e0:	f002 0207 	and.w	r2, r2, #7
 80152e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80152e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80152ec:	68fa      	ldr	r2, [r7, #12]
 80152ee:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80152f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80152f6:	68fa      	ldr	r2, [r7, #12]
 80152f8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80152fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8015304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015308:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801530a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8015314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015318:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801531a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8015324:	f002 0203 	and.w	r2, r2, #3
 8015328:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801532a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8015334:	f002 0203 	and.w	r2, r2, #3
 8015338:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801533a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8015344:	f002 020f 	and.w	r2, r2, #15
 8015348:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801534a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8015354:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 801535a:	68fa      	ldr	r2, [r7, #12]
 801535c:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 801535e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8015368:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8015372:	f002 0203 	and.w	r2, r2, #3
 8015376:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8015378:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801537a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801537e:	4618      	mov	r0, r3
 8015380:	3718      	adds	r7, #24
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8015386:	b480      	push	{r7}
 8015388:	b087      	sub	sp, #28
 801538a:	af00      	add	r7, sp, #0
 801538c:	60f8      	str	r0, [r7, #12]
 801538e:	460b      	mov	r3, r1
 8015390:	607a      	str	r2, [r7, #4]
 8015392:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015394:	2300      	movs	r3, #0
 8015396:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8015398:	897b      	ldrh	r3, [r7, #10]
 801539a:	2b04      	cmp	r3, #4
 801539c:	d802      	bhi.n	80153a4 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801539e:	f06f 0309 	mvn.w	r3, #9
 80153a2:	e025      	b.n	80153f0 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	f003 0301 	and.w	r3, r3, #1
 80153ac:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80153ba:	f002 0201 	and.w	r2, r2, #1
 80153be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80153c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80153ca:	f002 0201 	and.w	r2, r2, #1
 80153ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80153d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80153da:	f002 0203 	and.w	r2, r2, #3
 80153de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80153e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80153e6:	68fa      	ldr	r2, [r7, #12]
 80153e8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80153ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80153ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	371c      	adds	r7, #28
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr

080153fc <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b084      	sub	sp, #16
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015406:	2300      	movs	r3, #0
 8015408:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 801540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d108      	bne.n	8015424 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 8015412:	f107 0308 	add.w	r3, r7, #8
 8015416:	461a      	mov	r2, r3
 8015418:	2105      	movs	r1, #5
 801541a:	6838      	ldr	r0, [r7, #0]
 801541c:	f7ff ffb3 	bl	8015386 <VL53LX_i2c_encode_system_control>
 8015420:	4603      	mov	r3, r0
 8015422:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 8015424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d108      	bne.n	801543e <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 801542c:	f107 0208 	add.w	r2, r7, #8
 8015430:	2305      	movs	r3, #5
 8015432:	2183      	movs	r1, #131	; 0x83
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f001 fcb3 	bl	8016da0 <VL53LX_WriteMulti>
 801543a:	4603      	mov	r3, r0
 801543c:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801543e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015442:	4618      	mov	r0, r3
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}

0801544a <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	b086      	sub	sp, #24
 801544e:	af00      	add	r7, sp, #0
 8015450:	4603      	mov	r3, r0
 8015452:	60b9      	str	r1, [r7, #8]
 8015454:	607a      	str	r2, [r7, #4]
 8015456:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015458:	2300      	movs	r3, #0
 801545a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 801545c:	89fb      	ldrh	r3, [r7, #14]
 801545e:	2b2b      	cmp	r3, #43	; 0x2b
 8015460:	d802      	bhi.n	8015468 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015462:	f06f 0309 	mvn.w	r3, #9
 8015466:	e0e2      	b.n	801562e <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015470:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	785a      	ldrb	r2, [r3, #1]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	3302      	adds	r3, #2
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	f003 030f 	and.w	r3, r3, #15
 8015488:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	78da      	ldrb	r2, [r3, #3]
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	3304      	adds	r3, #4
 801549a:	4619      	mov	r1, r3
 801549c:	2002      	movs	r0, #2
 801549e:	f7f8 fb24 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80154a2:	4603      	mov	r3, r0
 80154a4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	3306      	adds	r3, #6
 80154ae:	4619      	mov	r1, r3
 80154b0:	2002      	movs	r0, #2
 80154b2:	f7f8 fb1a 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80154b6:	4603      	mov	r3, r0
 80154b8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	3308      	adds	r3, #8
 80154c2:	4619      	mov	r1, r3
 80154c4:	2002      	movs	r0, #2
 80154c6:	f7f8 fb10 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80154ca:	4603      	mov	r3, r0
 80154cc:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	330a      	adds	r3, #10
 80154d6:	4619      	mov	r1, r3
 80154d8:	2002      	movs	r0, #2
 80154da:	f7f8 fb06 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80154de:	4603      	mov	r3, r0
 80154e0:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	330c      	adds	r3, #12
 80154ea:	4619      	mov	r1, r3
 80154ec:	2002      	movs	r0, #2
 80154ee:	f7f8 fafc 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80154f2:	4603      	mov	r3, r0
 80154f4:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	330e      	adds	r3, #14
 80154fe:	4619      	mov	r1, r3
 8015500:	2002      	movs	r0, #2
 8015502:	f7f8 faf2 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015506:	4603      	mov	r3, r0
 8015508:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	3310      	adds	r3, #16
 8015512:	4619      	mov	r1, r3
 8015514:	2002      	movs	r0, #2
 8015516:	f7f8 fae8 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801551a:	4603      	mov	r3, r0
 801551c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	3312      	adds	r3, #18
 8015526:	4619      	mov	r1, r3
 8015528:	2002      	movs	r0, #2
 801552a:	f7f8 fade 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801552e:	4603      	mov	r3, r0
 8015530:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	3314      	adds	r3, #20
 801553a:	4619      	mov	r1, r3
 801553c:	2002      	movs	r0, #2
 801553e:	f7f8 fad4 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015542:	4603      	mov	r3, r0
 8015544:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	3316      	adds	r3, #22
 801554e:	4619      	mov	r1, r3
 8015550:	2002      	movs	r0, #2
 8015552:	f7f8 faca 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015556:	4603      	mov	r3, r0
 8015558:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	3318      	adds	r3, #24
 8015562:	4619      	mov	r1, r3
 8015564:	2002      	movs	r0, #2
 8015566:	f7f8 fac0 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801556a:	4603      	mov	r3, r0
 801556c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	331a      	adds	r3, #26
 8015576:	4619      	mov	r1, r3
 8015578:	2002      	movs	r0, #2
 801557a:	f7f8 fab6 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801557e:	4603      	mov	r3, r0
 8015580:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	331c      	adds	r3, #28
 801558a:	4619      	mov	r1, r3
 801558c:	2002      	movs	r0, #2
 801558e:	f7f8 faac 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015592:	4603      	mov	r3, r0
 8015594:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	331e      	adds	r3, #30
 801559e:	4619      	mov	r1, r3
 80155a0:	2002      	movs	r0, #2
 80155a2:	f7f8 faa2 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80155a6:	4603      	mov	r3, r0
 80155a8:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	3320      	adds	r3, #32
 80155b2:	4619      	mov	r1, r3
 80155b4:	2002      	movs	r0, #2
 80155b6:	f7f8 fa98 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80155ba:	4603      	mov	r3, r0
 80155bc:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	3322      	adds	r3, #34	; 0x22
 80155c6:	4619      	mov	r1, r3
 80155c8:	2002      	movs	r0, #2
 80155ca:	f7f8 fa8e 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80155ce:	4603      	mov	r3, r0
 80155d0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	3324      	adds	r3, #36	; 0x24
 80155da:	4619      	mov	r1, r3
 80155dc:	2002      	movs	r0, #2
 80155de:	f7f8 fa84 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80155e2:	4603      	mov	r3, r0
 80155e4:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	3326      	adds	r3, #38	; 0x26
 80155ee:	4619      	mov	r1, r3
 80155f0:	2002      	movs	r0, #2
 80155f2:	f7f8 fa7a 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 80155f6:	4603      	mov	r3, r0
 80155f8:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	3328      	adds	r3, #40	; 0x28
 8015602:	4619      	mov	r1, r3
 8015604:	2002      	movs	r0, #2
 8015606:	f7f8 fa70 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801560a:	4603      	mov	r3, r0
 801560c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801562a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3718      	adds	r7, #24
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b086      	sub	sp, #24
 801563a:	af00      	add	r7, sp, #0
 801563c:	4603      	mov	r3, r0
 801563e:	60b9      	str	r1, [r7, #8]
 8015640:	607a      	str	r2, [r7, #4]
 8015642:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015644:	2300      	movs	r3, #0
 8015646:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8015648:	89fb      	ldrh	r3, [r7, #14]
 801564a:	2b20      	cmp	r3, #32
 801564c:	d802      	bhi.n	8015654 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801564e:	f06f 0309 	mvn.w	r3, #9
 8015652:	e04d      	b.n	80156f0 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8015654:	68b9      	ldr	r1, [r7, #8]
 8015656:	2004      	movs	r0, #4
 8015658:	f7f8 fae6 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 801565c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	3304      	adds	r3, #4
 8015666:	4619      	mov	r1, r3
 8015668:	2004      	movs	r0, #4
 801566a:	f7f8 fadd 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 801566e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	3308      	adds	r3, #8
 8015678:	4619      	mov	r1, r3
 801567a:	2004      	movs	r0, #4
 801567c:	f7f8 faf1 	bl	800dc62 <VL53LX_i2c_decode_int32_t>
 8015680:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	330c      	adds	r3, #12
 801568a:	4619      	mov	r1, r3
 801568c:	2004      	movs	r0, #4
 801568e:	f7f8 facb 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 8015692:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	3310      	adds	r3, #16
 801569c:	4619      	mov	r1, r3
 801569e:	2004      	movs	r0, #4
 80156a0:	f7f8 fac2 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 80156a4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	3314      	adds	r3, #20
 80156ae:	4619      	mov	r1, r3
 80156b0:	2004      	movs	r0, #4
 80156b2:	f7f8 fab9 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 80156b6:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	3318      	adds	r3, #24
 80156c0:	4619      	mov	r1, r3
 80156c2:	2004      	movs	r0, #4
 80156c4:	f7f8 facd 	bl	800dc62 <VL53LX_i2c_decode_int32_t>
 80156c8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	331c      	adds	r3, #28
 80156d2:	4619      	mov	r1, r3
 80156d4:	2004      	movs	r0, #4
 80156d6:	f7f8 faa7 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 80156da:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80156ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3718      	adds	r7, #24
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b086      	sub	sp, #24
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	4603      	mov	r3, r0
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015706:	2300      	movs	r3, #0
 8015708:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 801570a:	89fb      	ldrh	r3, [r7, #14]
 801570c:	2b37      	cmp	r3, #55	; 0x37
 801570e:	d802      	bhi.n	8015716 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015710:	f06f 0309 	mvn.w	r3, #9
 8015714:	e15e      	b.n	80159d4 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8015716:	68b9      	ldr	r1, [r7, #8]
 8015718:	2002      	movs	r0, #2
 801571a:	f7f8 f9e6 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	3302      	adds	r3, #2
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015730:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	3303      	adds	r3, #3
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015740:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	3304      	adds	r3, #4
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	f003 0303 	and.w	r3, r3, #3
 8015750:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	3305      	adds	r3, #5
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	f003 0301 	and.w	r3, r3, #1
 8015760:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	3306      	adds	r3, #6
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015770:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	3307      	adds	r3, #7
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015780:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	3308      	adds	r3, #8
 801578a:	4619      	mov	r1, r3
 801578c:	2002      	movs	r0, #2
 801578e:	f7f8 f9ac 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015792:	4603      	mov	r3, r0
 8015794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015798:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	330a      	adds	r3, #10
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	f003 0303 	and.w	r3, r3, #3
 80157a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	330b      	adds	r3, #11
 80157b2:	781b      	ldrb	r3, [r3, #0]
 80157b4:	f003 0303 	and.w	r3, r3, #3
 80157b8:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	330c      	adds	r3, #12
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	f003 030f 	and.w	r3, r3, #15
 80157c8:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	330d      	adds	r3, #13
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	f003 0307 	and.w	r3, r3, #7
 80157d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	330e      	adds	r3, #14
 80157e2:	781b      	ldrb	r3, [r3, #0]
 80157e4:	f003 0301 	and.w	r3, r3, #1
 80157e8:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	330f      	adds	r3, #15
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	f003 0303 	and.w	r3, r3, #3
 80157f8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	7c1a      	ldrb	r2, [r3, #16]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	7c5a      	ldrb	r2, [r3, #17]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	3312      	adds	r3, #18
 8015812:	4619      	mov	r1, r3
 8015814:	2002      	movs	r0, #2
 8015816:	f7f8 f968 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 801581a:	4603      	mov	r3, r0
 801581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015820:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	3316      	adds	r3, #22
 801582a:	4619      	mov	r1, r3
 801582c:	2002      	movs	r0, #2
 801582e:	f7f8 f95c 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015832:	4603      	mov	r3, r0
 8015834:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	3318      	adds	r3, #24
 801583e:	4619      	mov	r1, r3
 8015840:	2002      	movs	r0, #2
 8015842:	f7f8 f952 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015846:	4603      	mov	r3, r0
 8015848:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	331a      	adds	r3, #26
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	f003 0301 	and.w	r3, r3, #1
 8015858:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	331b      	adds	r3, #27
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	f003 0307 	and.w	r3, r3, #7
 8015868:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	7f1a      	ldrb	r2, [r3, #28]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	7f5a      	ldrb	r2, [r3, #29]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	331e      	adds	r3, #30
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015888:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	331f      	adds	r3, #31
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015898:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	3320      	adds	r3, #32
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	f003 0303 	and.w	r3, r3, #3
 80158a8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	3321      	adds	r3, #33	; 0x21
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	f003 030f 	and.w	r3, r3, #15
 80158b8:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	3325      	adds	r3, #37	; 0x25
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	f003 0301 	and.w	r3, r3, #1
 80158ec:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	3326      	adds	r3, #38	; 0x26
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	f003 0303 	and.w	r3, r3, #3
 80158fe:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	3327      	adds	r3, #39	; 0x27
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	f003 031f 	and.w	r3, r3, #31
 8015910:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	3328      	adds	r3, #40	; 0x28
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	f003 031f 	and.w	r3, r3, #31
 8015922:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	3329      	adds	r3, #41	; 0x29
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f003 031f 	and.w	r3, r3, #31
 8015934:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	332a      	adds	r3, #42	; 0x2a
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	f003 0301 	and.w	r3, r3, #1
 8015946:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	332b      	adds	r3, #43	; 0x2b
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	f003 0301 	and.w	r3, r3, #1
 8015958:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	332c      	adds	r3, #44	; 0x2c
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	f003 0303 	and.w	r3, r3, #3
 801596a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	332d      	adds	r3, #45	; 0x2d
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801597c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	332e      	adds	r3, #46	; 0x2e
 8015988:	4619      	mov	r1, r3
 801598a:	2004      	movs	r0, #4
 801598c:	f7f8 f94c 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 8015990:	4603      	mov	r3, r0
 8015992:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 801599a:	68bb      	ldr	r3, [r7, #8]
 801599c:	3332      	adds	r3, #50	; 0x32
 801599e:	4619      	mov	r1, r3
 80159a0:	2004      	movs	r0, #4
 80159a2:	f7f8 f941 	bl	800dc28 <VL53LX_i2c_decode_uint32_t>
 80159a6:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	3336      	adds	r3, #54	; 0x36
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	3337      	adds	r3, #55	; 0x37
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	f003 0301 	and.w	r3, r3, #1
 80159c8:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80159d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4603      	mov	r3, r0
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80159ea:	2300      	movs	r3, #0
 80159ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80159ee:	89fb      	ldrh	r3, [r7, #14]
 80159f0:	2b30      	cmp	r3, #48	; 0x30
 80159f2:	d802      	bhi.n	80159fa <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80159f4:	f06f 0309 	mvn.w	r3, #9
 80159f8:	e112      	b.n	8015c20 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	785a      	ldrb	r2, [r3, #1]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	789a      	ldrb	r2, [r3, #2]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8015a12:	68bb      	ldr	r3, [r7, #8]
 8015a14:	3303      	adds	r3, #3
 8015a16:	4619      	mov	r1, r3
 8015a18:	2002      	movs	r0, #2
 8015a1a:	f7f8 f866 	bl	800daea <VL53LX_i2c_decode_uint16_t>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	3305      	adds	r3, #5
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a30:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	3306      	adds	r3, #6
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	f003 0307 	and.w	r3, r3, #7
 8015a40:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	3307      	adds	r3, #7
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	f003 0307 	and.w	r3, r3, #7
 8015a50:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	3308      	adds	r3, #8
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a60:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	3309      	adds	r3, #9
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a70:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	330a      	adds	r3, #10
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	f003 0301 	and.w	r3, r3, #1
 8015a80:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	330b      	adds	r3, #11
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a90:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	330c      	adds	r3, #12
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	f003 0301 	and.w	r3, r3, #1
 8015aa0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	330d      	adds	r3, #13
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ab0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	330e      	adds	r3, #14
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ac0:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	7bda      	ldrb	r2, [r3, #15]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	7c1a      	ldrb	r2, [r3, #16]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	7c5a      	ldrb	r2, [r3, #17]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	7c9a      	ldrb	r2, [r3, #18]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	7cda      	ldrb	r2, [r3, #19]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	7d1a      	ldrb	r2, [r3, #20]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	7d5a      	ldrb	r2, [r3, #21]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	7d9a      	ldrb	r2, [r3, #22]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	7dda      	ldrb	r2, [r3, #23]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	7e1a      	ldrb	r2, [r3, #24]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	7e5a      	ldrb	r2, [r3, #25]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	7e9a      	ldrb	r2, [r3, #26]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	7eda      	ldrb	r2, [r3, #27]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	7f1a      	ldrb	r2, [r3, #28]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	7f5a      	ldrb	r2, [r3, #29]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	7f9a      	ldrb	r2, [r3, #30]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	7fda      	ldrb	r2, [r3, #31]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8015bb0:	68bb      	ldr	r3, [r7, #8]
 8015bb2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8015c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3718      	adds	r7, #24
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b090      	sub	sp, #64	; 0x40
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8015c32:	2300      	movs	r3, #0
 8015c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8015c38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d10a      	bne.n	8015c56 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8015c40:	f107 020c 	add.w	r2, r7, #12
 8015c44:	2331      	movs	r3, #49	; 0x31
 8015c46:	f240 110f 	movw	r1, #271	; 0x10f
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f001 f8de 	bl	8016e0c <VL53LX_ReadMulti>
 8015c50:	4603      	mov	r3, r0
 8015c52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8015c56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d109      	bne.n	8015c72 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8015c5e:	f107 030c 	add.w	r3, r7, #12
 8015c62:	683a      	ldr	r2, [r7, #0]
 8015c64:	4619      	mov	r1, r3
 8015c66:	2031      	movs	r0, #49	; 0x31
 8015c68:	f7ff feb8 	bl	80159dc <VL53LX_i2c_decode_nvm_copy_data>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015c72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3740      	adds	r7, #64	; 0x40
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}

08015c7e <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8015c7e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015c82:	b0d6      	sub	sp, #344	; 0x158
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8015c8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8015c8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8015c92:	4603      	mov	r3, r0
 8015c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8015c98:	23f1      	movs	r3, #241	; 0xf1
 8015c9a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53LX_D_002;
 8015c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8015cac:	f04f 0200 	mov.w	r2, #0
 8015cb0:	f04f 0300 	mov.w	r3, #0
 8015cb4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8015cb8:	f04f 0200 	mov.w	r2, #0
 8015cbc:	f04f 0300 	mov.w	r3, #0
 8015cc0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8015cc4:	f04f 0200 	mov.w	r2, #0
 8015cc8:	f04f 0300 	mov.w	r3, #0
 8015ccc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53LX_p_055   = 0;
 8015cd0:	f04f 0200 	mov.w	r2, #0
 8015cd4:	f04f 0300 	mov.w	r3, #0
 8015cd8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53LX_D_002;
 8015cdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8015ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ce4:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8015ce6:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f000 8322 	beq.w	8016334 <VL53LX_f_023+0x6b6>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8015cf0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7fb f9fe 	bl	80110f6 <VL53LX_calc_pll_period_mm>
 8015cfa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53LX_p_028 > VL53LX_p_032)
 8015cfe:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8015d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d91a      	bls.n	8015d40 <VL53LX_f_023+0xc2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8015d0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015d0e:	2200      	movs	r2, #0
 8015d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015d14:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53LX_p_032;
 8015d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	4698      	mov	r8, r3
 8015d20:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8015d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015d26:	460b      	mov	r3, r1
 8015d28:	ebb3 0308 	subs.w	r3, r3, r8
 8015d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8015d2e:	4613      	mov	r3, r2
 8015d30:	eb63 0309 	sbc.w	r3, r3, r9
 8015d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015d36:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8015d3a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 8015d3e:	e013      	b.n	8015d68 <VL53LX_f_023+0xea>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8015d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015d44:	2200      	movs	r2, #0
 8015d46:	469a      	mov	sl, r3
 8015d48:	4693      	mov	fp, r2
			(uint64_t)VL53LX_p_028;
 8015d4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015d4e:	2200      	movs	r2, #0
 8015d50:	461c      	mov	r4, r3
 8015d52:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8015d54:	ebba 0304 	subs.w	r3, sl, r4
 8015d58:	633b      	str	r3, [r7, #48]	; 0x30
 8015d5a:	eb6b 0305 	sbc.w	r3, fp, r5
 8015d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8015d60:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8015d64:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53LX_p_007 > VL53LX_p_001)
 8015d68:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015d6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d91f      	bls.n	8015db4 <VL53LX_f_023+0x136>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8015d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015d78:	2200      	movs	r2, #0
 8015d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015d7e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53LX_p_001;
 8015d82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015d86:	2200      	movs	r2, #0
 8015d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015d8c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8015d90:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8015d94:	4623      	mov	r3, r4
 8015d96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	1a9b      	subs	r3, r3, r2
 8015d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015da0:	462b      	mov	r3, r5
 8015da2:	460a      	mov	r2, r1
 8015da4:	eb63 0302 	sbc.w	r3, r3, r2
 8015da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015daa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015dae:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8015db2:	e01e      	b.n	8015df2 <VL53LX_f_023+0x174>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8015db4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015db8:	2200      	movs	r2, #0
 8015dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015dbe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53LX_p_007;
 8015dc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8015dd0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8015dd4:	4623      	mov	r3, r4
 8015dd6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8015dda:	4602      	mov	r2, r0
 8015ddc:	1a9b      	subs	r3, r3, r2
 8015dde:	623b      	str	r3, [r7, #32]
 8015de0:	462b      	mov	r3, r5
 8015de2:	460a      	mov	r2, r1
 8015de4:	eb63 0302 	sbc.w	r3, r3, r2
 8015de8:	627b      	str	r3, [r7, #36]	; 0x24
 8015dea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8015dee:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 8015df2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015df6:	4313      	orrs	r3, r2
 8015df8:	f000 829c 	beq.w	8016334 <VL53LX_f_023+0x6b6>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8015dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015e00:	2200      	movs	r2, #0
 8015e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015e06:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8015e0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015e18:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8015e1c:	4623      	mov	r3, r4
 8015e1e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8015e22:	4602      	mov	r2, r0
 8015e24:	189b      	adds	r3, r3, r2
 8015e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	462a      	mov	r2, r5
 8015e2e:	eb42 0303 	adc.w	r3, r2, r3
 8015e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53LX_p_028;
 8015e36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015e40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8015e44:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8015e48:	4623      	mov	r3, r4
 8015e4a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015e4e:	4602      	mov	r2, r0
 8015e50:	189b      	adds	r3, r3, r2
 8015e52:	61bb      	str	r3, [r7, #24]
 8015e54:	460b      	mov	r3, r1
 8015e56:	462a      	mov	r2, r5
 8015e58:	eb42 0303 	adc.w	r3, r2, r3
 8015e5c:	61fb      	str	r3, [r7, #28]
 8015e5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015e62:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53LX_D_003)
 8015e66:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8015e6a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8015e6e:	f173 0300 	sbcs.w	r3, r3, #0
 8015e72:	d305      	bcc.n	8015e80 <VL53LX_f_023+0x202>
				tmp0 = VL53LX_D_003;
 8015e74:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8015e78:	f04f 0300 	mov.w	r3, #0
 8015e7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8015e80:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015e88:	fb03 f102 	mul.w	r1, r3, r2
 8015e8c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015e94:	fb02 f303 	mul.w	r3, r2, r3
 8015e98:	18ca      	adds	r2, r1, r3
 8015e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015e9e:	fba3 1303 	umull	r1, r3, r3, r3
 8015ea2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8015ea6:	460b      	mov	r3, r1
 8015ea8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8015eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015eb0:	18d3      	adds	r3, r2, r3
 8015eb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8015eb6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8015eba:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8015ebe:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8015ec2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015ec6:	f04f 0000 	mov.w	r0, #0
 8015eca:	f04f 0100 	mov.w	r1, #0
 8015ece:	0219      	lsls	r1, r3, #8
 8015ed0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8015ed4:	0210      	lsls	r0, r2, #8
 8015ed6:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53LX_D_004)
 8015eda:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015ede:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015ee2:	d305      	bcc.n	8015ef0 <VL53LX_f_023+0x272>
				tmp1 = VL53LX_D_004;
 8015ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ee8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015eec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8015ef0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015ef4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8015ef8:	f7ea fde8 	bl	8000acc <__aeabi_uldivmod>
 8015efc:	4602      	mov	r2, r0
 8015efe:	460b      	mov	r3, r1
 8015f00:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8015f04:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8015f08:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8015f0c:	f7ea fdde 	bl	8000acc <__aeabi_uldivmod>
 8015f10:	4602      	mov	r2, r0
 8015f12:	460b      	mov	r3, r1
 8015f14:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8015f18:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8015f1c:	2b80      	cmp	r3, #128	; 0x80
 8015f1e:	d305      	bcc.n	8015f2c <VL53LX_f_023+0x2ae>
				tmp1 = (uint64_t)VL53LX_D_005;
 8015f20:	f04f 32ff 	mov.w	r2, #4294967295
 8015f24:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8015f28:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8015f2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015f30:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015f34:	fb03 f102 	mul.w	r1, r3, r2
 8015f38:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8015f3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f40:	fb02 f303 	mul.w	r3, r2, r3
 8015f44:	4419      	add	r1, r3
 8015f46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015f4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8015f52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015f56:	4613      	mov	r3, r2
 8015f58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8015f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015f60:	18cb      	adds	r3, r1, r3
 8015f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015f66:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8015f6a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8015f6e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015f72:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8015f76:	2200      	movs	r2, #0
 8015f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015f7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015f80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015f84:	2200      	movs	r2, #0
 8015f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015f8a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015f92:	4623      	mov	r3, r4
 8015f94:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8015f98:	4602      	mov	r2, r0
 8015f9a:	189b      	adds	r3, r3, r2
 8015f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	462a      	mov	r2, r5
 8015fa4:	eb42 0303 	adc.w	r3, r2, r3
 8015fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8015fac:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8015fb4:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015fb6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8015fba:	4623      	mov	r3, r4
 8015fbc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8015fc0:	4602      	mov	r2, r0
 8015fc2:	189b      	adds	r3, r3, r2
 8015fc4:	673b      	str	r3, [r7, #112]	; 0x70
 8015fc6:	460b      	mov	r3, r1
 8015fc8:	462a      	mov	r2, r5
 8015fca:	eb42 0303 	adc.w	r3, r2, r3
 8015fce:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8015fd0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8015fd8:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8015fda:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8015fde:	4623      	mov	r3, r4
 8015fe0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	189b      	adds	r3, r3, r2
 8015fe8:	613b      	str	r3, [r7, #16]
 8015fea:	460b      	mov	r3, r1
 8015fec:	462a      	mov	r2, r5
 8015fee:	eb42 0303 	adc.w	r3, r2, r3
 8015ff2:	617b      	str	r3, [r7, #20]
 8015ff4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015ff8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8015ffc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016000:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8016004:	f173 0300 	sbcs.w	r3, r3, #0
 8016008:	d305      	bcc.n	8016016 <VL53LX_f_023+0x398>
				tmp1 = (uint64_t)VL53LX_D_003;
 801600a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801600e:	f04f 0300 	mov.w	r3, #0
 8016012:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8016016:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801601a:	f04f 0000 	mov.w	r0, #0
 801601e:	f04f 0100 	mov.w	r1, #0
 8016022:	0219      	lsls	r1, r3, #8
 8016024:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8016028:	0210      	lsls	r0, r2, #8
 801602a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 801602e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016032:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8016036:	1884      	adds	r4, r0, r2
 8016038:	60bc      	str	r4, [r7, #8]
 801603a:	eb41 0303 	adc.w	r3, r1, r3
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016044:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8016048:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801604c:	2b00      	cmp	r3, #0
 801604e:	da05      	bge.n	801605c <VL53LX_f_023+0x3de>
				tmp0 = (uint64_t)VL53LX_D_006;
 8016050:	f04f 32ff 	mov.w	r2, #4294967295
 8016054:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016058:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801605c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016060:	2b01      	cmp	r3, #1
 8016062:	d331      	bcc.n	80160c8 <VL53LX_f_023+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016064:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016068:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801606c:	f7ea fd2e 	bl	8000acc <__aeabi_uldivmod>
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8016078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801607c:	2200      	movs	r2, #0
 801607e:	663b      	str	r3, [r7, #96]	; 0x60
 8016080:	667a      	str	r2, [r7, #100]	; 0x64
 8016082:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016086:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801608a:	4622      	mov	r2, r4
 801608c:	fb02 f203 	mul.w	r2, r2, r3
 8016090:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016094:	4629      	mov	r1, r5
 8016096:	fb01 f303 	mul.w	r3, r1, r3
 801609a:	441a      	add	r2, r3
 801609c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160a0:	4621      	mov	r1, r4
 80160a2:	fba3 1301 	umull	r1, r3, r3, r1
 80160a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80160aa:	460b      	mov	r3, r1
 80160ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80160b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80160b4:	18d3      	adds	r3, r2, r3
 80160b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80160ba:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80160be:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80160c2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80160c6:	e030      	b.n	801612a <VL53LX_f_023+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80160c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80160cc:	2200      	movs	r2, #0
 80160ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80160d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80160d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80160d6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80160da:	4622      	mov	r2, r4
 80160dc:	fb02 f203 	mul.w	r2, r2, r3
 80160e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160e4:	4629      	mov	r1, r5
 80160e6:	fb01 f303 	mul.w	r3, r1, r3
 80160ea:	441a      	add	r2, r3
 80160ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80160f0:	4621      	mov	r1, r4
 80160f2:	fba3 1301 	umull	r1, r3, r3, r1
 80160f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80160fa:	460b      	mov	r3, r1
 80160fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8016100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016104:	18d3      	adds	r3, r2, r3
 8016106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801610a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801610e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8016112:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016116:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801611a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801611e:	f7ea fcd5 	bl	8000acc <__aeabi_uldivmod>
 8016122:	4602      	mov	r2, r0
 8016124:	460b      	mov	r3, r1
 8016126:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801612a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801612e:	2b00      	cmp	r3, #0
 8016130:	da05      	bge.n	801613e <VL53LX_f_023+0x4c0>
				tmp0 = (uint64_t)VL53LX_D_006;
 8016132:	f04f 32ff 	mov.w	r2, #4294967295
 8016136:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801613a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801613e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016142:	2b01      	cmp	r3, #1
 8016144:	d33d      	bcc.n	80161c2 <VL53LX_f_023+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016146:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801614a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801614e:	f7ea fcbd 	bl	8000acc <__aeabi_uldivmod>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 801615a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801615e:	f04f 0200 	mov.w	r2, #0
 8016162:	f04f 0300 	mov.w	r3, #0
 8016166:	0882      	lsrs	r2, r0, #2
 8016168:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801616c:	088b      	lsrs	r3, r1, #2
 801616e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8016172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016176:	2200      	movs	r2, #0
 8016178:	653b      	str	r3, [r7, #80]	; 0x50
 801617a:	657a      	str	r2, [r7, #84]	; 0x54
 801617c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8016180:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8016184:	4622      	mov	r2, r4
 8016186:	fb02 f203 	mul.w	r2, r2, r3
 801618a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801618e:	4629      	mov	r1, r5
 8016190:	fb01 f303 	mul.w	r3, r1, r3
 8016194:	4413      	add	r3, r2
 8016196:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801619a:	4621      	mov	r1, r4
 801619c:	fba2 1201 	umull	r1, r2, r2, r1
 80161a0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80161a4:	460a      	mov	r2, r1
 80161a6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80161aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80161ae:	4413      	add	r3, r2
 80161b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80161b4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80161b8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80161bc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80161c0:	e03c      	b.n	801623c <VL53LX_f_023+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80161c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80161c6:	2200      	movs	r2, #0
 80161c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80161ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80161cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80161d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80161d4:	4622      	mov	r2, r4
 80161d6:	fb02 f203 	mul.w	r2, r2, r3
 80161da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161de:	4629      	mov	r1, r5
 80161e0:	fb01 f303 	mul.w	r3, r1, r3
 80161e4:	4413      	add	r3, r2
 80161e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80161ea:	4621      	mov	r1, r4
 80161ec:	fba2 1201 	umull	r1, r2, r2, r1
 80161f0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80161f4:	460a      	mov	r2, r1
 80161f6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80161fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80161fe:	4413      	add	r3, r2
 8016200:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016204:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8016208:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801620c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8016210:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016214:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016218:	f7ea fc58 	bl	8000acc <__aeabi_uldivmod>
 801621c:	4602      	mov	r2, r0
 801621e:	460b      	mov	r3, r1
 8016220:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8016224:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016228:	f04f 0200 	mov.w	r2, #0
 801622c:	f04f 0300 	mov.w	r3, #0
 8016230:	0882      	lsrs	r2, r0, #2
 8016232:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8016236:	088b      	lsrs	r3, r1, #2
 8016238:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801623c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016240:	2b00      	cmp	r3, #0
 8016242:	da05      	bge.n	8016250 <VL53LX_f_023+0x5d2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8016244:	f04f 32ff 	mov.w	r2, #4294967295
 8016248:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801624c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8016250:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8016254:	f04f 0200 	mov.w	r2, #0
 8016258:	f04f 0300 	mov.w	r3, #0
 801625c:	0882      	lsrs	r2, r0, #2
 801625e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8016262:	088b      	lsrs	r3, r1, #2
 8016264:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8016268:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801626c:	2b01      	cmp	r3, #1
 801626e:	d305      	bcc.n	801627c <VL53LX_f_023+0x5fe>
				tmp0 = (uint64_t)VL53LX_D_007;
 8016270:	f04f 32ff 	mov.w	r2, #4294967295
 8016274:	f04f 0300 	mov.w	r3, #0
 8016278:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801627c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016280:	2200      	movs	r2, #0
 8016282:	643b      	str	r3, [r7, #64]	; 0x40
 8016284:	647a      	str	r2, [r7, #68]	; 0x44
 8016286:	f04f 0200 	mov.w	r2, #0
 801628a:	f04f 0300 	mov.w	r3, #0
 801628e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8016292:	4629      	mov	r1, r5
 8016294:	01cb      	lsls	r3, r1, #7
 8016296:	4621      	mov	r1, r4
 8016298:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 801629c:	4621      	mov	r1, r4
 801629e:	01ca      	lsls	r2, r1, #7
 80162a0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 80162a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80162a8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80162ac:	fb03 f202 	mul.w	r2, r3, r2
 80162b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80162b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80162b8:	fb01 f303 	mul.w	r3, r1, r3
 80162bc:	441a      	add	r2, r3
 80162be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80162c2:	fba3 1303 	umull	r1, r3, r3, r3
 80162c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80162ca:	460b      	mov	r3, r1
 80162cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80162d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80162d4:	18d3      	adds	r3, r2, r3
 80162d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80162da:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80162de:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80162e2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 80162e6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80162ea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80162ee:	1884      	adds	r4, r0, r2
 80162f0:	603c      	str	r4, [r7, #0]
 80162f2:	eb41 0303 	adc.w	r3, r1, r3
 80162f6:	607b      	str	r3, [r7, #4]
 80162f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80162fc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8016300:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8016304:	2b01      	cmp	r3, #1
 8016306:	d305      	bcc.n	8016314 <VL53LX_f_023+0x696>
				tmp0 = (uint64_t)VL53LX_D_007;
 8016308:	f04f 32ff 	mov.w	r2, #4294967295
 801630c:	f04f 0300 	mov.w	r3, #0
 8016310:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8016314:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016318:	4618      	mov	r0, r3
 801631a:	f7fa fd85 	bl	8010e28 <VL53LX_isqrt>
 801631e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8016322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016326:	b29a      	uxth	r2, r3
 8016328:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801632c:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 801632e:	2300      	movs	r3, #0
 8016330:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8016334:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8016338:	4618      	mov	r0, r3
 801633a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801633e:	46bd      	mov	sp, r7
 8016340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016344 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b086      	sub	sp, #24
 8016348:	af02      	add	r7, sp, #8
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 801634e:	2300      	movs	r3, #0
 8016350:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8016352:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f000 fe7e 	bl	8017058 <VL53LX_WaitUs>
 801635c:	4603      	mov	r3, r0
 801635e:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8016360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d10b      	bne.n	8016380 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8016368:	2301      	movs	r3, #1
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	2301      	movs	r3, #1
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	2301      	movs	r3, #1
 8016372:	22e5      	movs	r2, #229	; 0xe5
 8016374:	6839      	ldr	r1, [r7, #0]
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 fe84 	bl	8017084 <VL53LX_WaitValueMaskEx>
 801637c:	4603      	mov	r3, r0
 801637e:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8016380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d103      	bne.n	8016390 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8016388:	2103      	movs	r1, #3
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7f6 fd91 	bl	800ceb2 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8016390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016394:	4618      	mov	r0, r3
 8016396:	3710      	adds	r7, #16
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}

0801639c <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801639c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80163a0:	b0c0      	sub	sp, #256	; 0x100
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 80163a8:	4618      	mov	r0, r3
 80163aa:	460b      	mov	r3, r1
 80163ac:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80163b0:	4613      	mov	r3, r2
 80163b2:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 80163b6:	4603      	mov	r3, r0
 80163b8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80163bc:	2300      	movs	r3, #0
 80163be:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 80163c2:	2300      	movs	r3, #0
 80163c4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 80163c8:	2300      	movs	r3, #0
 80163ca:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 80163d4:	2300      	movs	r3, #0
 80163d6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 80163e6:	f04f 0200 	mov.w	r2, #0
 80163ea:	f04f 0300 	mov.w	r3, #0
 80163ee:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 80163f2:	f04f 0200 	mov.w	r2, #0
 80163f6:	f04f 0300 	mov.w	r3, #0
 80163fa:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 80163fe:	f04f 0200 	mov.w	r2, #0
 8016402:	f04f 0300 	mov.w	r3, #0
 8016406:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53LX_ERROR_NONE) {
 801640a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801640e:	2b00      	cmp	r3, #0
 8016410:	d108      	bne.n	8016424 <VL53LX_f_032+0x88>
		VL53LX_decode_row_col(
 8016412:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8016416:	f107 01de 	add.w	r1, r7, #222	; 0xde
 801641a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 801641e:	4618      	mov	r0, r3
 8016420:	f7fb f8e4 	bl	80115ec <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8016424:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8016428:	2b00      	cmp	r3, #0
 801642a:	d165      	bne.n	80164f8 <VL53LX_f_032+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 801642c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016430:	091b      	lsrs	r3, r3, #4
 8016432:	b2db      	uxtb	r3, r3
 8016434:	f003 0301 	and.w	r3, r3, #1
 8016438:	2b00      	cmp	r3, #0
 801643a:	d00e      	beq.n	801645a <VL53LX_f_032+0xbe>
			bound_l_x = (int16_t) col -
 801643c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8016440:	b29a      	uxth	r2, r3
 8016442:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016446:	095b      	lsrs	r3, r3, #5
 8016448:	b2db      	uxtb	r3, r3
 801644a:	b29b      	uxth	r3, r3
 801644c:	1ad3      	subs	r3, r2, r3
 801644e:	b29b      	uxth	r3, r3
 8016450:	3b01      	subs	r3, #1
 8016452:	b29b      	uxth	r3, r3
 8016454:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8016458:	e00b      	b.n	8016472 <VL53LX_f_032+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801645a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801645e:	b29a      	uxth	r2, r3
 8016460:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8016464:	095b      	lsrs	r3, r3, #5
 8016466:	b2db      	uxtb	r3, r3
 8016468:	b29b      	uxth	r3, r3
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	b29b      	uxth	r3, r3
 801646e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8016472:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8016476:	b29a      	uxth	r2, r3
 8016478:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801647c:	095b      	lsrs	r3, r3, #5
 801647e:	b2db      	uxtb	r3, r3
 8016480:	b29b      	uxth	r3, r3
 8016482:	4413      	add	r3, r2
 8016484:	b29b      	uxth	r3, r3
 8016486:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801648a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801648e:	f003 0301 	and.w	r3, r3, #1
 8016492:	2b00      	cmp	r3, #0
 8016494:	d011      	beq.n	80164ba <VL53LX_f_032+0x11e>
			bound_d_y = (int16_t) row -
 8016496:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801649a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801649c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80164a0:	f003 020f 	and.w	r2, r3, #15
 80164a4:	0fd3      	lsrs	r3, r2, #31
 80164a6:	4413      	add	r3, r2
 80164a8:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	1acb      	subs	r3, r1, r3
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	3b01      	subs	r3, #1
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80164b8:	e00f      	b.n	80164da <VL53LX_f_032+0x13e>
		else
			bound_d_y = (int16_t) row -
 80164ba:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80164be:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80164c0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80164c4:	f003 020f 	and.w	r2, r3, #15
 80164c8:	0fd3      	lsrs	r3, r2, #31
 80164ca:	4413      	add	r3, r2
 80164cc:	105b      	asrs	r3, r3, #1
 80164ce:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80164d0:	b29b      	uxth	r3, r3
 80164d2:	440b      	add	r3, r1
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 80164da:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80164de:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80164e0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80164e4:	f003 020f 	and.w	r2, r3, #15
 80164e8:	0fd3      	lsrs	r3, r2, #31
 80164ea:	4413      	add	r3, r2
 80164ec:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	440b      	add	r3, r1
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80164f8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d133      	bne.n	8016568 <VL53LX_f_032+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8016500:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8016504:	b29a      	uxth	r2, r3
 8016506:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 801650a:	4413      	add	r3, r2
 801650c:	b29b      	uxth	r3, r3
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	b29b      	uxth	r3, r3
 8016512:	3b0f      	subs	r3, #15
 8016514:	b29b      	uxth	r3, r3
 8016516:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801651a:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 801651e:	b29a      	uxth	r2, r3
 8016520:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8016524:	4413      	add	r3, r2
 8016526:	b29b      	uxth	r3, r3
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	b29b      	uxth	r3, r3
 801652c:	3b0f      	subs	r3, #15
 801652e:	b29b      	uxth	r3, r3
 8016530:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8016534:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8016538:	b29a      	uxth	r2, r3
 801653a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 801653e:	4413      	add	r3, r2
 8016540:	b29b      	uxth	r3, r3
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	b29b      	uxth	r3, r3
 8016546:	3b0f      	subs	r3, #15
 8016548:	b29b      	uxth	r3, r3
 801654a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 801654e:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8016552:	b29a      	uxth	r2, r3
 8016554:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8016558:	4413      	add	r3, r2
 801655a:	b29b      	uxth	r3, r3
 801655c:	005b      	lsls	r3, r3, #1
 801655e:	b29b      	uxth	r3, r3
 8016560:	3b0f      	subs	r3, #15
 8016562:	b29b      	uxth	r3, r3
 8016564:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8016568:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801656c:	2b00      	cmp	r3, #0
 801656e:	f040 8135 	bne.w	80167dc <VL53LX_f_032+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016572:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8016576:	17da      	asrs	r2, r3, #31
 8016578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801657c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8016580:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8016584:	17da      	asrs	r2, r3, #31
 8016586:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801658a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 801658e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8016592:	460b      	mov	r3, r1
 8016594:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016598:	fb02 f203 	mul.w	r2, r2, r3
 801659c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80165a0:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80165a4:	4601      	mov	r1, r0
 80165a6:	fb01 f303 	mul.w	r3, r1, r3
 80165aa:	4413      	add	r3, r2
 80165ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80165b0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80165b4:	fba2 4501 	umull	r4, r5, r2, r1
 80165b8:	442b      	add	r3, r5
 80165ba:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80165bc:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 80165c0:	17da      	asrs	r2, r3, #31
 80165c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80165c6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 80165ca:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80165ce:	17da      	asrs	r2, r3, #31
 80165d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80165d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80165d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80165dc:	460b      	mov	r3, r1
 80165de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80165e2:	fb02 f203 	mul.w	r2, r2, r3
 80165e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165ea:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 80165ee:	4601      	mov	r1, r0
 80165f0:	fb01 f303 	mul.w	r3, r1, r3
 80165f4:	4413      	add	r3, r2
 80165f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80165fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80165fe:	fba2 8901 	umull	r8, r9, r2, r1
 8016602:	444b      	add	r3, r9
 8016604:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8016606:	eb14 0308 	adds.w	r3, r4, r8
 801660a:	64bb      	str	r3, [r7, #72]	; 0x48
 801660c:	eb45 0309 	adc.w	r3, r5, r9
 8016610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016612:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8016616:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801661a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801661e:	1c51      	adds	r1, r2, #1
 8016620:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8016624:	f143 0300 	adc.w	r3, r3, #0
 8016628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801662c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016630:	460b      	mov	r3, r1
 8016632:	0fdb      	lsrs	r3, r3, #31
 8016634:	2200      	movs	r2, #0
 8016636:	643b      	str	r3, [r7, #64]	; 0x40
 8016638:	647a      	str	r2, [r7, #68]	; 0x44
 801663a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801663e:	4623      	mov	r3, r4
 8016640:	4602      	mov	r2, r0
 8016642:	189b      	adds	r3, r3, r2
 8016644:	63bb      	str	r3, [r7, #56]	; 0x38
 8016646:	460b      	mov	r3, r1
 8016648:	462a      	mov	r2, r5
 801664a:	eb42 0303 	adc.w	r3, r2, r3
 801664e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016650:	f04f 0200 	mov.w	r2, #0
 8016654:	f04f 0300 	mov.w	r3, #0
 8016658:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801665c:	4621      	mov	r1, r4
 801665e:	084a      	lsrs	r2, r1, #1
 8016660:	4629      	mov	r1, r5
 8016662:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016666:	4629      	mov	r1, r5
 8016668:	104b      	asrs	r3, r1, #1
 801666a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016672:	2200      	movs	r2, #0
 8016674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016678:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801667c:	f04f 0000 	mov.w	r0, #0
 8016680:	f04f 0100 	mov.w	r1, #0
 8016684:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8016688:	462b      	mov	r3, r5
 801668a:	0099      	lsls	r1, r3, #2
 801668c:	4623      	mov	r3, r4
 801668e:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8016692:	4623      	mov	r3, r4
 8016694:	0098      	lsls	r0, r3, #2
 8016696:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801669a:	1814      	adds	r4, r2, r0
 801669c:	633c      	str	r4, [r7, #48]	; 0x30
 801669e:	414b      	adcs	r3, r1
 80166a0:	637b      	str	r3, [r7, #52]	; 0x34
 80166a2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80166a6:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80166aa:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80166ae:	17da      	asrs	r2, r3, #31
 80166b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80166b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80166b8:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80166bc:	17da      	asrs	r2, r3, #31
 80166be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80166c2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80166c6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80166ca:	462b      	mov	r3, r5
 80166cc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80166d0:	4642      	mov	r2, r8
 80166d2:	fb02 f203 	mul.w	r2, r2, r3
 80166d6:	464b      	mov	r3, r9
 80166d8:	4621      	mov	r1, r4
 80166da:	fb01 f303 	mul.w	r3, r1, r3
 80166de:	4413      	add	r3, r2
 80166e0:	4622      	mov	r2, r4
 80166e2:	4641      	mov	r1, r8
 80166e4:	fba2 ab01 	umull	sl, fp, r2, r1
 80166e8:	445b      	add	r3, fp
 80166ea:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80166ec:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 80166f0:	17da      	asrs	r2, r3, #31
 80166f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80166f4:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 80166f6:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80166fa:	17da      	asrs	r2, r3, #31
 80166fc:	673b      	str	r3, [r7, #112]	; 0x70
 80166fe:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8016700:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8016704:	462b      	mov	r3, r5
 8016706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801670a:	4642      	mov	r2, r8
 801670c:	fb02 f203 	mul.w	r2, r2, r3
 8016710:	464b      	mov	r3, r9
 8016712:	4621      	mov	r1, r4
 8016714:	fb01 f303 	mul.w	r3, r1, r3
 8016718:	4413      	add	r3, r2
 801671a:	4622      	mov	r2, r4
 801671c:	4641      	mov	r1, r8
 801671e:	fba2 1201 	umull	r1, r2, r2, r1
 8016722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016726:	460a      	mov	r2, r1
 8016728:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801672c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016730:	4413      	add	r3, r2
 8016732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8016736:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801673a:	460b      	mov	r3, r1
 801673c:	eb1a 0303 	adds.w	r3, sl, r3
 8016740:	62bb      	str	r3, [r7, #40]	; 0x28
 8016742:	4613      	mov	r3, r2
 8016744:	eb4b 0303 	adc.w	r3, fp, r3
 8016748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801674a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801674e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8016752:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8016756:	1c51      	adds	r1, r2, #1
 8016758:	66b9      	str	r1, [r7, #104]	; 0x68
 801675a:	f143 0300 	adc.w	r3, r3, #0
 801675e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016764:	460b      	mov	r3, r1
 8016766:	0fdb      	lsrs	r3, r3, #31
 8016768:	2200      	movs	r2, #0
 801676a:	623b      	str	r3, [r7, #32]
 801676c:	627a      	str	r2, [r7, #36]	; 0x24
 801676e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8016772:	4623      	mov	r3, r4
 8016774:	4602      	mov	r2, r0
 8016776:	189b      	adds	r3, r3, r2
 8016778:	61bb      	str	r3, [r7, #24]
 801677a:	460b      	mov	r3, r1
 801677c:	462a      	mov	r2, r5
 801677e:	eb42 0303 	adc.w	r3, r2, r3
 8016782:	61fb      	str	r3, [r7, #28]
 8016784:	f04f 0200 	mov.w	r2, #0
 8016788:	f04f 0300 	mov.w	r3, #0
 801678c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016790:	4621      	mov	r1, r4
 8016792:	084a      	lsrs	r2, r1, #1
 8016794:	4629      	mov	r1, r5
 8016796:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801679a:	4629      	mov	r1, r5
 801679c:	104b      	asrs	r3, r1, #1
 801679e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 80167a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80167a6:	2200      	movs	r2, #0
 80167a8:	663b      	str	r3, [r7, #96]	; 0x60
 80167aa:	667a      	str	r2, [r7, #100]	; 0x64
 80167ac:	f04f 0200 	mov.w	r2, #0
 80167b0:	f04f 0300 	mov.w	r3, #0
 80167b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80167b8:	4629      	mov	r1, r5
 80167ba:	008b      	lsls	r3, r1, #2
 80167bc:	4621      	mov	r1, r4
 80167be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80167c2:	4621      	mov	r1, r4
 80167c4:	008a      	lsls	r2, r1, #2
 80167c6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80167ca:	1884      	adds	r4, r0, r2
 80167cc:	613c      	str	r4, [r7, #16]
 80167ce:	eb41 0303 	adc.w	r3, r1, r3
 80167d2:	617b      	str	r3, [r7, #20]
 80167d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80167d8:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80167dc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d132      	bne.n	801684a <VL53LX_f_032+0x4ae>
		xtalk_avg = do_division_s(
 80167e4:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80167e8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80167ec:	1884      	adds	r4, r0, r2
 80167ee:	65bc      	str	r4, [r7, #88]	; 0x58
 80167f0:	eb41 0303 	adc.w	r3, r1, r3
 80167f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80167f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80167fa:	460b      	mov	r3, r1
 80167fc:	3301      	adds	r3, #1
 80167fe:	653b      	str	r3, [r7, #80]	; 0x50
 8016800:	4613      	mov	r3, r2
 8016802:	f143 0300 	adc.w	r3, r3, #0
 8016806:	657b      	str	r3, [r7, #84]	; 0x54
 8016808:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801680c:	460b      	mov	r3, r1
 801680e:	0fdb      	lsrs	r3, r3, #31
 8016810:	2200      	movs	r2, #0
 8016812:	60bb      	str	r3, [r7, #8]
 8016814:	60fa      	str	r2, [r7, #12]
 8016816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801681a:	4623      	mov	r3, r4
 801681c:	4602      	mov	r2, r0
 801681e:	189b      	adds	r3, r3, r2
 8016820:	603b      	str	r3, [r7, #0]
 8016822:	460b      	mov	r3, r1
 8016824:	462a      	mov	r2, r5
 8016826:	eb42 0303 	adc.w	r3, r2, r3
 801682a:	607b      	str	r3, [r7, #4]
 801682c:	f04f 0200 	mov.w	r2, #0
 8016830:	f04f 0300 	mov.w	r3, #0
 8016834:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016838:	4621      	mov	r1, r4
 801683a:	084a      	lsrs	r2, r1, #1
 801683c:	4629      	mov	r1, r5
 801683e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016842:	4629      	mov	r1, r5
 8016844:	104b      	asrs	r3, r1, #1
 8016846:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801684a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801684e:	2b00      	cmp	r3, #0
 8016850:	d109      	bne.n	8016866 <VL53LX_f_032+0x4ca>
		if (xtalk_avg < 0)
 8016852:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8016856:	2b00      	cmp	r3, #0
 8016858:	da05      	bge.n	8016866 <VL53LX_f_032+0x4ca>
			xtalk_avg = 0;
 801685a:	f04f 0200 	mov.w	r2, #0
 801685e:	f04f 0300 	mov.w	r3, #0
 8016862:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8016866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801686a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801686e:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8016870:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8016874:	4618      	mov	r0, r3
 8016876:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801687a:	46bd      	mov	sp, r7
 801687c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016880 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8016880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016884:	b09a      	sub	sp, #104	; 0x68
 8016886:	af00      	add	r7, sp, #0
 8016888:	6478      	str	r0, [r7, #68]	; 0x44
 801688a:	6439      	str	r1, [r7, #64]	; 0x40
 801688c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801688e:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8016890:	2300      	movs	r3, #0
 8016892:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8016896:	f04f 0200 	mov.w	r2, #0
 801689a:	f04f 0300 	mov.w	r3, #0
 801689e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 80168a2:	f04f 0200 	mov.w	r2, #0
 80168a6:	f04f 0300 	mov.w	r3, #0
 80168aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 80168ae:	f04f 0200 	mov.w	r2, #0
 80168b2:	f04f 0300 	mov.w	r3, #0
 80168b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 80168ba:	2300      	movs	r3, #0
 80168bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80168c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168c2:	2200      	movs	r2, #0
 80168c4:	633b      	str	r3, [r7, #48]	; 0x30
 80168c6:	637a      	str	r2, [r7, #52]	; 0x34
 80168c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168ce:	2200      	movs	r2, #0
 80168d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80168d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80168d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80168d8:	460b      	mov	r3, r1
 80168da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168dc:	fb02 f203 	mul.w	r2, r2, r3
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80168e6:	4601      	mov	r1, r0
 80168e8:	fb01 f303 	mul.w	r3, r1, r3
 80168ec:	4413      	add	r3, r2
 80168ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168f2:	fba2 4501 	umull	r4, r5, r2, r1
 80168f6:	442b      	add	r3, r5
 80168f8:	461d      	mov	r5, r3
 80168fa:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80168fe:	623b      	str	r3, [r7, #32]
 8016900:	f145 0300 	adc.w	r3, r5, #0
 8016904:	627b      	str	r3, [r7, #36]	; 0x24
 8016906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801690a:	f04f 0300 	mov.w	r3, #0
 801690e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016912:	f7ea f8db 	bl	8000acc <__aeabi_uldivmod>
 8016916:	4602      	mov	r2, r0
 8016918:	460b      	mov	r3, r1
 801691a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 801691e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016920:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8016924:	b29b      	uxth	r3, r3
 8016926:	2200      	movs	r2, #0
 8016928:	61bb      	str	r3, [r7, #24]
 801692a:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801692c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801692e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8016932:	4622      	mov	r2, r4
 8016934:	fb02 f203 	mul.w	r2, r2, r3
 8016938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801693a:	4629      	mov	r1, r5
 801693c:	fb01 f303 	mul.w	r3, r1, r3
 8016940:	4413      	add	r3, r2
 8016942:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016944:	4621      	mov	r1, r4
 8016946:	fba2 ab01 	umull	sl, fp, r2, r1
 801694a:	445b      	add	r3, fp
 801694c:	469b      	mov	fp, r3
 801694e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8016952:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8016956:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801695a:	f04f 0200 	mov.w	r2, #0
 801695e:	f04f 0300 	mov.w	r3, #0
 8016962:	0a02      	lsrs	r2, r0, #8
 8016964:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016968:	0a0b      	lsrs	r3, r1, #8
 801696a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801696e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016972:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8016976:	6139      	str	r1, [r7, #16]
 8016978:	f143 0300 	adc.w	r3, r3, #0
 801697c:	617b      	str	r3, [r7, #20]
 801697e:	f04f 0200 	mov.w	r2, #0
 8016982:	f04f 0300 	mov.w	r3, #0
 8016986:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801698a:	4621      	mov	r1, r4
 801698c:	0aca      	lsrs	r2, r1, #11
 801698e:	4629      	mov	r1, r5
 8016990:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8016994:	4629      	mov	r1, r5
 8016996:	0acb      	lsrs	r3, r1, #11
 8016998:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801699c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d305      	bcc.n	80169b0 <VL53LX_f_033+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 80169a4:	f04f 32ff 	mov.w	r2, #4294967295
 80169a8:	f04f 0300 	mov.w	r3, #0
 80169ac:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80169b0:	2300      	movs	r3, #0
 80169b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80169b6:	e041      	b.n	8016a3c <VL53LX_f_033+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80169b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169be:	3302      	adds	r3, #2
 80169c0:	009b      	lsls	r3, r3, #2
 80169c2:	4413      	add	r3, r2
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	2200      	movs	r2, #0
 80169c8:	60bb      	str	r3, [r7, #8]
 80169ca:	60fa      	str	r2, [r7, #12]
 80169cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80169d2:	4622      	mov	r2, r4
 80169d4:	fb02 f203 	mul.w	r2, r2, r3
 80169d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80169da:	4629      	mov	r1, r5
 80169dc:	fb01 f303 	mul.w	r3, r1, r3
 80169e0:	4413      	add	r3, r2
 80169e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80169e4:	4621      	mov	r1, r4
 80169e6:	fba2 8901 	umull	r8, r9, r2, r1
 80169ea:	444b      	add	r3, r9
 80169ec:	4699      	mov	r9, r3
 80169ee:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80169f2:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80169f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80169fa:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80169fe:	6039      	str	r1, [r7, #0]
 8016a00:	f143 0300 	adc.w	r3, r3, #0
 8016a04:	607b      	str	r3, [r7, #4]
 8016a06:	f04f 0200 	mov.w	r2, #0
 8016a0a:	f04f 0300 	mov.w	r3, #0
 8016a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016a12:	4621      	mov	r1, r4
 8016a14:	0a8a      	lsrs	r2, r1, #10
 8016a16:	4629      	mov	r1, r5
 8016a18:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8016a1c:	4629      	mov	r1, r5
 8016a1e:	0a8b      	lsrs	r3, r1, #10
 8016a20:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8016a24:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016a28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2c:	3206      	adds	r2, #6
 8016a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8016a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a36:	3301      	adds	r3, #1
 8016a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a3e:	7a9b      	ldrb	r3, [r3, #10]
 8016a40:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d3b7      	bcc.n	80169b8 <VL53LX_f_033+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016a48:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3768      	adds	r7, #104	; 0x68
 8016a50:	46bd      	mov	sp, r7
 8016a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08016a58 <TOF_SensorInit>:

extern I2C_HandleTypeDef hi2c1;


void TOF_SensorInit(void)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
	uint8_t byteData;
	int status;

	// Output to Console
	printf("TOF Sensor Initialization\r\n");
 8016a5e:	482b      	ldr	r0, [pc, #172]	; (8016b0c <TOF_SensorInit+0xb4>)
 8016a60:	f000 fd0e 	bl	8017480 <puts>

	// Define the I2C Handler and the Device Address
	Dev->I2cHandle = &hi2c1;
 8016a64:	4b2a      	ldr	r3, [pc, #168]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	4b29      	ldr	r3, [pc, #164]	; (8016b14 <TOF_SensorInit+0xbc>)
 8016a70:	f8c2 3a4c 	str.w	r3, [r2, #2636]	; 0xa4c
	Dev->I2cDevAddr = 0x52;
 8016a74:	4b26      	ldr	r3, [pc, #152]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016a7c:	2252      	movs	r2, #82	; 0x52
 8016a7e:	f883 2a50 	strb.w	r2, [r3, #2640]	; 0xa50

	// Read the Model ID and Type of the TOF Sensor
	VL53LX_RdByte(Dev, 0x010F, &byteData);
 8016a82:	4b23      	ldr	r3, [pc, #140]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	1cfa      	adds	r2, r7, #3
 8016a88:	f240 110f 	movw	r1, #271	; 0x10f
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	f000 fa4f 	bl	8016f30 <VL53LX_RdByte>
	printf("VL53LX Model_ID: %02X\n\r", byteData);
 8016a92:	78fb      	ldrb	r3, [r7, #3]
 8016a94:	4619      	mov	r1, r3
 8016a96:	4820      	ldr	r0, [pc, #128]	; (8016b18 <TOF_SensorInit+0xc0>)
 8016a98:	f000 fc8c 	bl	80173b4 <iprintf>
	VL53LX_RdByte(Dev, 0x0110, &byteData);
 8016a9c:	4b1c      	ldr	r3, [pc, #112]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	1cfa      	adds	r2, r7, #3
 8016aa2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f000 fa42 	bl	8016f30 <VL53LX_RdByte>
	printf("VL53LX Module_Type: %02X\n\r", byteData);
 8016aac:	78fb      	ldrb	r3, [r7, #3]
 8016aae:	4619      	mov	r1, r3
 8016ab0:	481a      	ldr	r0, [pc, #104]	; (8016b1c <TOF_SensorInit+0xc4>)
 8016ab2:	f000 fc7f 	bl	80173b4 <iprintf>

	// Wait until the device is booted
	status = VL53LX_WaitDeviceBooted(Dev);
 8016ab6:	4b16      	ldr	r3, [pc, #88]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7f0 fe83 	bl	80077c6 <VL53LX_WaitDeviceBooted>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	607b      	str	r3, [r7, #4]
	// Initialization of the TOF Sensor
	status = VL53LX_DataInit(Dev);
 8016ac4:	4b12      	ldr	r3, [pc, #72]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7f0 fe21 	bl	8007710 <VL53LX_DataInit>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	607b      	str	r3, [r7, #4]
	status = VL53LX_StopMeasurement(Dev);
 8016ad2:	4b0f      	ldr	r3, [pc, #60]	; (8016b10 <TOF_SensorInit+0xb8>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7f0 ffed 	bl	8007ab6 <VL53LX_StopMeasurement>
 8016adc:	4603      	mov	r3, r0
 8016ade:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 8016ae0:	2064      	movs	r0, #100	; 0x64
 8016ae2:	f7ec f97b 	bl	8002ddc <HAL_Delay>

	// Check if the Status is correct
	if(status)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d004      	beq.n	8016af6 <TOF_SensorInit+0x9e>
	{
		printf("TOF Sensor Error! = %d \r\n", status);
 8016aec:	6879      	ldr	r1, [r7, #4]
 8016aee:	480c      	ldr	r0, [pc, #48]	; (8016b20 <TOF_SensorInit+0xc8>)
 8016af0:	f000 fc60 	bl	80173b4 <iprintf>
 8016af4:	e002      	b.n	8016afc <TOF_SensorInit+0xa4>
	}
	else
	{
		printf("TOF Sensor Started!\r\n");
 8016af6:	480b      	ldr	r0, [pc, #44]	; (8016b24 <TOF_SensorInit+0xcc>)
 8016af8:	f000 fcc2 	bl	8017480 <puts>
	}

	printf("\r\n");
 8016afc:	480a      	ldr	r0, [pc, #40]	; (8016b28 <TOF_SensorInit+0xd0>)
 8016afe:	f000 fcbf 	bl	8017480 <puts>
}
 8016b02:	bf00      	nop
 8016b04:	3708      	adds	r7, #8
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	08018874 	.word	0x08018874
 8016b10:	20000054 	.word	0x20000054
 8016b14:	200000d8 	.word	0x200000d8
 8016b18:	08018890 	.word	0x08018890
 8016b1c:	080188a8 	.word	0x080188a8
 8016b20:	080188c4 	.word	0x080188c4
 8016b24:	080188e0 	.word	0x080188e0
 8016b28:	080188f8 	.word	0x080188f8

08016b2c <TOF_Measurement>:


void TOF_Measurement(void)
{
 8016b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b30:	b0a2      	sub	sp, #136	; 0x88
 8016b32:	af04      	add	r7, sp, #16
	VL53LX_MultiRangingData_t MultiRangingData;
	VL53LX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
 8016b34:	f107 030c 	add.w	r3, r7, #12
 8016b38:	673b      	str	r3, [r7, #112]	; 0x70
	int status;

	int no_of_object_found=0,j;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
	 status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 8016b3e:	4b5e      	ldr	r3, [pc, #376]	; (8016cb8 <TOF_Measurement+0x18c>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	4618      	mov	r0, r3
 8016b44:	f7f0 ffcb 	bl	8007ade <VL53LX_ClearInterruptAndStartMeasurement>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	66bb      	str	r3, [r7, #104]	; 0x68
	status = VL53LX_StartMeasurement(Dev);
 8016b4c:	4b5a      	ldr	r3, [pc, #360]	; (8016cb8 <TOF_Measurement+0x18c>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7f0 ff69 	bl	8007a28 <VL53LX_StartMeasurement>
 8016b56:	4603      	mov	r3, r0
 8016b58:	66bb      	str	r3, [r7, #104]	; 0x68
	HAL_Delay(40);
 8016b5a:	2028      	movs	r0, #40	; 0x28
 8016b5c:	f7ec f93e 	bl	8002ddc <HAL_Delay>

	__WFI();
 8016b60:	bf30      	wfi
	if(IntCount !=0 )
 8016b62:	4b56      	ldr	r3, [pc, #344]	; (8016cbc <TOF_Measurement+0x190>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	f000 80a0 	beq.w	8016cac <TOF_Measurement+0x180>
	{
		IntCount=0;
 8016b6c:	4b53      	ldr	r3, [pc, #332]	; (8016cbc <TOF_Measurement+0x190>)
 8016b6e:	2200      	movs	r2, #0
 8016b70:	601a      	str	r2, [r3, #0]
	    status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 8016b72:	4b51      	ldr	r3, [pc, #324]	; (8016cb8 <TOF_Measurement+0x18c>)
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f1 fb73 	bl	8008264 <VL53LX_GetMultiRangingData>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	66bb      	str	r3, [r7, #104]	; 0x68
	    if (status ==0)
 8016b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	f040 808e 	bne.w	8016ca6 <TOF_Measurement+0x17a>
	    {
		    no_of_object_found=pMultiRangingData->NumberOfObjectsFound;
 8016b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b8c:	795b      	ldrb	r3, [r3, #5]
 8016b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
		    printf("Count=%5d, ", pMultiRangingData->StreamCount);
 8016b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016b92:	791b      	ldrb	r3, [r3, #4]
 8016b94:	4619      	mov	r1, r3
 8016b96:	484a      	ldr	r0, [pc, #296]	; (8016cc0 <TOF_Measurement+0x194>)
 8016b98:	f000 fc0c 	bl	80173b4 <iprintf>
		    printf("#Objs=%1d ", no_of_object_found);
 8016b9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016b9e:	4849      	ldr	r0, [pc, #292]	; (8016cc4 <TOF_Measurement+0x198>)
 8016ba0:	f000 fc08 	bl	80173b4 <iprintf>
		    for(j=0;j<no_of_object_found;j++)
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8016ba8:	e075      	b.n	8016c96 <TOF_Measurement+0x16a>
		    {
		    	if(j!=0)printf("\n                     ");
 8016baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d002      	beq.n	8016bb6 <TOF_Measurement+0x8a>
 8016bb0:	4845      	ldr	r0, [pc, #276]	; (8016cc8 <TOF_Measurement+0x19c>)
 8016bb2:	f000 fbff 	bl	80173b4 <iprintf>
		        printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
		               pMultiRangingData->RangeData[j].RangeStatus,
 8016bb6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016bb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016bba:	4613      	mov	r3, r2
 8016bbc:	009b      	lsls	r3, r3, #2
 8016bbe:	4413      	add	r3, r2
 8016bc0:	009b      	lsls	r3, r3, #2
 8016bc2:	440b      	add	r3, r1
 8016bc4:	331a      	adds	r3, #26
 8016bc6:	781b      	ldrb	r3, [r3, #0]
		        printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8016bc8:	461e      	mov	r6, r3
		               pMultiRangingData->RangeData[j].RangeMilliMeter,
 8016bca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016bcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016bce:	4613      	mov	r3, r2
 8016bd0:	009b      	lsls	r3, r3, #2
 8016bd2:	4413      	add	r3, r2
 8016bd4:	009b      	lsls	r3, r3, #2
 8016bd6:	440b      	add	r3, r1
 8016bd8:	3318      	adds	r3, #24
 8016bda:	f9b3 3000 	ldrsh.w	r3, [r3]
		        printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8016bde:	4698      	mov	r8, r3
		               pMultiRangingData->RangeData[j].SignalRateRtnMegaCps/65536.0,
 8016be0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016be2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016be4:	4613      	mov	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4413      	add	r3, r2
 8016bea:	009b      	lsls	r3, r3, #2
 8016bec:	440b      	add	r3, r1
 8016bee:	330c      	adds	r3, #12
 8016bf0:	681b      	ldr	r3, [r3, #0]
		        printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7e9 fc8e 	bl	8000514 <__aeabi_ui2d>
 8016bf8:	f04f 0200 	mov.w	r2, #0
 8016bfc:	4b33      	ldr	r3, [pc, #204]	; (8016ccc <TOF_Measurement+0x1a0>)
 8016bfe:	f7e9 fe2d 	bl	800085c <__aeabi_ddiv>
 8016c02:	4602      	mov	r2, r0
 8016c04:	460b      	mov	r3, r1
 8016c06:	4614      	mov	r4, r2
 8016c08:	461d      	mov	r5, r3
		               pMultiRangingData->RangeData[j].AmbientRateRtnMegaCps/65536.0);
 8016c0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016c0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016c0e:	4613      	mov	r3, r2
 8016c10:	009b      	lsls	r3, r3, #2
 8016c12:	4413      	add	r3, r2
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	440b      	add	r3, r1
 8016c18:	3310      	adds	r3, #16
 8016c1a:	681b      	ldr	r3, [r3, #0]
		        printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7e9 fc79 	bl	8000514 <__aeabi_ui2d>
 8016c22:	f04f 0200 	mov.w	r2, #0
 8016c26:	4b29      	ldr	r3, [pc, #164]	; (8016ccc <TOF_Measurement+0x1a0>)
 8016c28:	f7e9 fe18 	bl	800085c <__aeabi_ddiv>
 8016c2c:	4602      	mov	r2, r0
 8016c2e:	460b      	mov	r3, r1
 8016c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016c34:	e9cd 4500 	strd	r4, r5, [sp]
 8016c38:	4642      	mov	r2, r8
 8016c3a:	4631      	mov	r1, r6
 8016c3c:	4824      	ldr	r0, [pc, #144]	; (8016cd0 <TOF_Measurement+0x1a4>)
 8016c3e:	f000 fbb9 	bl	80173b4 <iprintf>

		        char str[5];
		        sprintf(str, "%d", pMultiRangingData->RangeData[j].RangeMilliMeter);
 8016c42:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016c44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016c46:	4613      	mov	r3, r2
 8016c48:	009b      	lsls	r3, r3, #2
 8016c4a:	4413      	add	r3, r2
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	440b      	add	r3, r1
 8016c50:	3318      	adds	r3, #24
 8016c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c56:	461a      	mov	r2, r3
 8016c58:	1d3b      	adds	r3, r7, #4
 8016c5a:	491e      	ldr	r1, [pc, #120]	; (8016cd4 <TOF_Measurement+0x1a8>)
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f000 fc17 	bl	8017490 <siprintf>

		        SSD1306_Clear();
 8016c62:	f7eb fd78 	bl	8002756 <SSD1306_Clear>
		        SSD1306_GotoXY(20, 20);
 8016c66:	2114      	movs	r1, #20
 8016c68:	2014      	movs	r0, #20
 8016c6a:	f7eb fcb9 	bl	80025e0 <SSD1306_GotoXY>
		        SSD1306_Puts(str, &Font_16x26, 1);
 8016c6e:	1d3b      	adds	r3, r7, #4
 8016c70:	2201      	movs	r2, #1
 8016c72:	4919      	ldr	r1, [pc, #100]	; (8016cd8 <TOF_Measurement+0x1ac>)
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7eb fd49 	bl	800270c <SSD1306_Puts>
		        SSD1306_GotoXY(74, 25);
 8016c7a:	2119      	movs	r1, #25
 8016c7c:	204a      	movs	r0, #74	; 0x4a
 8016c7e:	f7eb fcaf 	bl	80025e0 <SSD1306_GotoXY>
		        SSD1306_Puts("mm", &Font_11x18, 1);
 8016c82:	2201      	movs	r2, #1
 8016c84:	4915      	ldr	r1, [pc, #84]	; (8016cdc <TOF_Measurement+0x1b0>)
 8016c86:	4816      	ldr	r0, [pc, #88]	; (8016ce0 <TOF_Measurement+0x1b4>)
 8016c88:	f7eb fd40 	bl	800270c <SSD1306_Puts>
		        SSD1306_UpdateScreen();
 8016c8c:	f7eb fc02 	bl	8002494 <SSD1306_UpdateScreen>
		    for(j=0;j<no_of_object_found;j++)
 8016c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c92:	3301      	adds	r3, #1
 8016c94:	677b      	str	r3, [r7, #116]	; 0x74
 8016c96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	db85      	blt.n	8016baa <TOF_Measurement+0x7e>
		      }
		      printf ("\r\n");
 8016c9e:	4811      	ldr	r0, [pc, #68]	; (8016ce4 <TOF_Measurement+0x1b8>)
 8016ca0:	f000 fbee 	bl	8017480 <puts>
	    }

	}


}
 8016ca4:	e002      	b.n	8016cac <TOF_Measurement+0x180>
	    	printf("TOF Measurement Error!!\r\n");
 8016ca6:	4810      	ldr	r0, [pc, #64]	; (8016ce8 <TOF_Measurement+0x1bc>)
 8016ca8:	f000 fbea 	bl	8017480 <puts>
}
 8016cac:	bf00      	nop
 8016cae:	3778      	adds	r7, #120	; 0x78
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cb6:	bf00      	nop
 8016cb8:	20000054 	.word	0x20000054
 8016cbc:	200002a4 	.word	0x200002a4
 8016cc0:	080188fc 	.word	0x080188fc
 8016cc4:	08018908 	.word	0x08018908
 8016cc8:	08018914 	.word	0x08018914
 8016ccc:	40f00000 	.word	0x40f00000
 8016cd0:	0801892c 	.word	0x0801892c
 8016cd4:	08018968 	.word	0x08018968
 8016cd8:	20000014 	.word	0x20000014
 8016cdc:	2000000c 	.word	0x2000000c
 8016ce0:	0801896c 	.word	0x0801896c
 8016ce4:	080188f8 	.word	0x080188f8
 8016ce8:	08018970 	.word	0x08018970

08016cec <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b088      	sub	sp, #32
 8016cf0:	af02      	add	r7, sp, #8
 8016cf2:	60f8      	str	r0, [r7, #12]
 8016cf4:	60b9      	str	r1, [r7, #8]
 8016cf6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	330a      	adds	r3, #10
 8016cfc:	617b      	str	r3, [r7, #20]
//    int i;
    i2cwriteCount+=count;
 8016cfe:	4b10      	ldr	r3, [pc, #64]	; (8016d40 <_I2CWrite+0x54>)
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	4a0e      	ldr	r2, [pc, #56]	; (8016d40 <_I2CWrite+0x54>)
 8016d08:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016d10:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016d1a:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 8016d1e:	b299      	uxth	r1, r3
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	b29a      	uxth	r2, r3
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	68ba      	ldr	r2, [r7, #8]
 8016d2c:	f7ed f888 	bl	8003e40 <HAL_I2C_Master_Transmit>
 8016d30:	4603      	mov	r3, r0
 8016d32:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8016d34:	693b      	ldr	r3, [r7, #16]
}
 8016d36:	4618      	mov	r0, r3
 8016d38:	3718      	adds	r7, #24
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}
 8016d3e:	bf00      	nop
 8016d40:	20003154 	.word	0x20003154

08016d44 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b088      	sub	sp, #32
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	330a      	adds	r3, #10
 8016d54:	617b      	str	r3, [r7, #20]

    i2creadCount+=count;
 8016d56:	4b11      	ldr	r3, [pc, #68]	; (8016d9c <_I2CRead+0x58>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	4a0f      	ldr	r2, [pc, #60]	; (8016d9c <_I2CRead+0x58>)
 8016d60:	6013      	str	r3, [r2, #0]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016d68:	f8d3 0a4c 	ldr.w	r0, [r3, #2636]	; 0xa4c
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016d72:	f893 3a50 	ldrb.w	r3, [r3, #2640]	; 0xa50
 8016d76:	f043 0301 	orr.w	r3, r3, #1
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	b299      	uxth	r1, r3
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	b29a      	uxth	r2, r3
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	9300      	str	r3, [sp, #0]
 8016d86:	4613      	mov	r3, r2
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	f7ed f957 	bl	800403c <HAL_I2C_Master_Receive>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8016d92:	693b      	ldr	r3, [r7, #16]
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3718      	adds	r7, #24
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}
 8016d9c:	20003150 	.word	0x20003150

08016da0 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b086      	sub	sp, #24
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	60f8      	str	r0, [r7, #12]
 8016da8:	607a      	str	r2, [r7, #4]
 8016daa:	603b      	str	r3, [r7, #0]
 8016dac:	460b      	mov	r3, r1
 8016dae:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016db0:	2300      	movs	r3, #0
 8016db2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	2bff      	cmp	r3, #255	; 0xff
 8016db8:	d902      	bls.n	8016dc0 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8016dba:	f06f 0303 	mvn.w	r3, #3
 8016dbe:	e01d      	b.n	8016dfc <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8016dc0:	897b      	ldrh	r3, [r7, #10]
 8016dc2:	0a1b      	lsrs	r3, r3, #8
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	b2da      	uxtb	r2, r3
 8016dc8:	4b0e      	ldr	r3, [pc, #56]	; (8016e04 <VL53LX_WriteMulti+0x64>)
 8016dca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016dcc:	897b      	ldrh	r3, [r7, #10]
 8016dce:	b2da      	uxtb	r2, r3
 8016dd0:	4b0c      	ldr	r3, [pc, #48]	; (8016e04 <VL53LX_WriteMulti+0x64>)
 8016dd2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8016dd4:	683a      	ldr	r2, [r7, #0]
 8016dd6:	6879      	ldr	r1, [r7, #4]
 8016dd8:	480b      	ldr	r0, [pc, #44]	; (8016e08 <VL53LX_WriteMulti+0x68>)
 8016dda:	f000 fd1a 	bl	8017812 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	3302      	adds	r3, #2
 8016de2:	461a      	mov	r2, r3
 8016de4:	4907      	ldr	r1, [pc, #28]	; (8016e04 <VL53LX_WriteMulti+0x64>)
 8016de6:	68f8      	ldr	r0, [r7, #12]
 8016de8:	f7ff ff80 	bl	8016cec <_I2CWrite>
 8016dec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d001      	beq.n	8016df8 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016df4:	23f3      	movs	r3, #243	; 0xf3
 8016df6:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8016df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3718      	adds	r7, #24
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}
 8016e04:	20003158 	.word	0x20003158
 8016e08:	2000315a 	.word	0x2000315a

08016e0c <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b086      	sub	sp, #24
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	607a      	str	r2, [r7, #4]
 8016e16:	603b      	str	r3, [r7, #0]
 8016e18:	460b      	mov	r3, r1
 8016e1a:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016e20:	897b      	ldrh	r3, [r7, #10]
 8016e22:	0a1b      	lsrs	r3, r3, #8
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	b2da      	uxtb	r2, r3
 8016e28:	4b12      	ldr	r3, [pc, #72]	; (8016e74 <VL53LX_ReadMulti+0x68>)
 8016e2a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016e2c:	897b      	ldrh	r3, [r7, #10]
 8016e2e:	b2da      	uxtb	r2, r3
 8016e30:	4b10      	ldr	r3, [pc, #64]	; (8016e74 <VL53LX_ReadMulti+0x68>)
 8016e32:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016e34:	2202      	movs	r2, #2
 8016e36:	490f      	ldr	r1, [pc, #60]	; (8016e74 <VL53LX_ReadMulti+0x68>)
 8016e38:	68f8      	ldr	r0, [r7, #12]
 8016e3a:	f7ff ff57 	bl	8016cec <_I2CWrite>
 8016e3e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d002      	beq.n	8016e4c <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016e46:	23f3      	movs	r3, #243	; 0xf3
 8016e48:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016e4a:	e00c      	b.n	8016e66 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8016e4c:	683a      	ldr	r2, [r7, #0]
 8016e4e:	6879      	ldr	r1, [r7, #4]
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	f7ff ff77 	bl	8016d44 <_I2CRead>
 8016e56:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d002      	beq.n	8016e64 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016e5e:	23f3      	movs	r3, #243	; 0xf3
 8016e60:	75fb      	strb	r3, [r7, #23]
 8016e62:	e000      	b.n	8016e66 <VL53LX_ReadMulti+0x5a>
    }
done:
 8016e64:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8016e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	20003158 	.word	0x20003158

08016e78 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	460b      	mov	r3, r1
 8016e82:	807b      	strh	r3, [r7, #2]
 8016e84:	4613      	mov	r3, r2
 8016e86:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016e8c:	887b      	ldrh	r3, [r7, #2]
 8016e8e:	0a1b      	lsrs	r3, r3, #8
 8016e90:	b29b      	uxth	r3, r3
 8016e92:	b2da      	uxtb	r2, r3
 8016e94:	4b0c      	ldr	r3, [pc, #48]	; (8016ec8 <VL53LX_WrByte+0x50>)
 8016e96:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016e98:	887b      	ldrh	r3, [r7, #2]
 8016e9a:	b2da      	uxtb	r2, r3
 8016e9c:	4b0a      	ldr	r3, [pc, #40]	; (8016ec8 <VL53LX_WrByte+0x50>)
 8016e9e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8016ea0:	4a09      	ldr	r2, [pc, #36]	; (8016ec8 <VL53LX_WrByte+0x50>)
 8016ea2:	787b      	ldrb	r3, [r7, #1]
 8016ea4:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8016ea6:	2203      	movs	r2, #3
 8016ea8:	4907      	ldr	r1, [pc, #28]	; (8016ec8 <VL53LX_WrByte+0x50>)
 8016eaa:	6878      	ldr	r0, [r7, #4]
 8016eac:	f7ff ff1e 	bl	8016cec <_I2CWrite>
 8016eb0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8016eb2:	68bb      	ldr	r3, [r7, #8]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d001      	beq.n	8016ebc <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016eb8:	23f3      	movs	r3, #243	; 0xf3
 8016eba:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8016ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	20003158 	.word	0x20003158

08016ecc <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b084      	sub	sp, #16
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	807b      	strh	r3, [r7, #2]
 8016ed8:	4613      	mov	r3, r2
 8016eda:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016edc:	2300      	movs	r3, #0
 8016ede:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016ee0:	887b      	ldrh	r3, [r7, #2]
 8016ee2:	0a1b      	lsrs	r3, r3, #8
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	b2da      	uxtb	r2, r3
 8016ee8:	4b10      	ldr	r3, [pc, #64]	; (8016f2c <VL53LX_WrWord+0x60>)
 8016eea:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8016eec:	887b      	ldrh	r3, [r7, #2]
 8016eee:	b2da      	uxtb	r2, r3
 8016ef0:	4b0e      	ldr	r3, [pc, #56]	; (8016f2c <VL53LX_WrWord+0x60>)
 8016ef2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8016ef4:	883b      	ldrh	r3, [r7, #0]
 8016ef6:	0a1b      	lsrs	r3, r3, #8
 8016ef8:	b29b      	uxth	r3, r3
 8016efa:	b2da      	uxtb	r2, r3
 8016efc:	4b0b      	ldr	r3, [pc, #44]	; (8016f2c <VL53LX_WrWord+0x60>)
 8016efe:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8016f00:	883b      	ldrh	r3, [r7, #0]
 8016f02:	b2da      	uxtb	r2, r3
 8016f04:	4b09      	ldr	r3, [pc, #36]	; (8016f2c <VL53LX_WrWord+0x60>)
 8016f06:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8016f08:	2204      	movs	r2, #4
 8016f0a:	4908      	ldr	r1, [pc, #32]	; (8016f2c <VL53LX_WrWord+0x60>)
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7ff feed 	bl	8016cec <_I2CWrite>
 8016f12:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d001      	beq.n	8016f1e <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016f1a:	23f3      	movs	r3, #243	; 0xf3
 8016f1c:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8016f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3710      	adds	r7, #16
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	20003158 	.word	0x20003158

08016f30 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b086      	sub	sp, #24
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	460b      	mov	r3, r1
 8016f3a:	607a      	str	r2, [r7, #4]
 8016f3c:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8016f42:	897b      	ldrh	r3, [r7, #10]
 8016f44:	0a1b      	lsrs	r3, r3, #8
 8016f46:	b29b      	uxth	r3, r3
 8016f48:	b2da      	uxtb	r2, r3
 8016f4a:	4b12      	ldr	r3, [pc, #72]	; (8016f94 <VL53LX_RdByte+0x64>)
 8016f4c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8016f4e:	897b      	ldrh	r3, [r7, #10]
 8016f50:	b2da      	uxtb	r2, r3
 8016f52:	4b10      	ldr	r3, [pc, #64]	; (8016f94 <VL53LX_RdByte+0x64>)
 8016f54:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016f56:	2202      	movs	r2, #2
 8016f58:	490e      	ldr	r1, [pc, #56]	; (8016f94 <VL53LX_RdByte+0x64>)
 8016f5a:	68f8      	ldr	r0, [r7, #12]
 8016f5c:	f7ff fec6 	bl	8016cec <_I2CWrite>
 8016f60:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d002      	beq.n	8016f6e <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016f68:	23f3      	movs	r3, #243	; 0xf3
 8016f6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016f6c:	e00c      	b.n	8016f88 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8016f6e:	2201      	movs	r2, #1
 8016f70:	6879      	ldr	r1, [r7, #4]
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f7ff fee6 	bl	8016d44 <_I2CRead>
 8016f78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d002      	beq.n	8016f86 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016f80:	23f3      	movs	r3, #243	; 0xf3
 8016f82:	75fb      	strb	r3, [r7, #23]
 8016f84:	e000      	b.n	8016f88 <VL53LX_RdByte+0x58>
    }
done:
 8016f86:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8016f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3718      	adds	r7, #24
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	20003158 	.word	0x20003158

08016f98 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	607a      	str	r2, [r7, #4]
 8016fa4:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8016faa:	897b      	ldrh	r3, [r7, #10]
 8016fac:	0a1b      	lsrs	r3, r3, #8
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	b2da      	uxtb	r2, r3
 8016fb2:	4b18      	ldr	r3, [pc, #96]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016fb4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8016fb6:	897b      	ldrh	r3, [r7, #10]
 8016fb8:	b2da      	uxtb	r2, r3
 8016fba:	4b16      	ldr	r3, [pc, #88]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016fbc:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8016fbe:	2202      	movs	r2, #2
 8016fc0:	4914      	ldr	r1, [pc, #80]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016fc2:	68f8      	ldr	r0, [r7, #12]
 8016fc4:	f7ff fe92 	bl	8016cec <_I2CWrite>
 8016fc8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d002      	beq.n	8016fd6 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016fd0:	23f3      	movs	r3, #243	; 0xf3
 8016fd2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016fd4:	e017      	b.n	8017006 <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8016fd6:	2202      	movs	r2, #2
 8016fd8:	490e      	ldr	r1, [pc, #56]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016fda:	68f8      	ldr	r0, [r7, #12]
 8016fdc:	f7ff feb2 	bl	8016d44 <_I2CRead>
 8016fe0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8016fe8:	23f3      	movs	r3, #243	; 0xf3
 8016fea:	75fb      	strb	r3, [r7, #23]
        goto done;
 8016fec:	e00b      	b.n	8017006 <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8016fee:	4b09      	ldr	r3, [pc, #36]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	021b      	lsls	r3, r3, #8
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	4b06      	ldr	r3, [pc, #24]	; (8017014 <VL53LX_RdWord+0x7c>)
 8016ffa:	785b      	ldrb	r3, [r3, #1]
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	4413      	add	r3, r2
 8017000:	b29a      	uxth	r2, r3
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8017006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801700a:	4618      	mov	r0, r3
 801700c:	3718      	adds	r7, #24
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}
 8017012:	bf00      	nop
 8017014:	20003158 	.word	0x20003158

08017018 <VL53LX_GetTickCount>:
}

VL53LX_Error VL53LX_GetTickCount(
	VL53LX_DEV Dev,
	uint32_t *ptick_count_ms)
{
 8017018:	b480      	push	{r7}
 801701a:	b085      	sub	sp, #20
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8017022:	2300      	movs	r3, #0
 8017024:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	2200      	movs	r2, #0
 801702a:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 801702c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017030:	4618      	mov	r0, r3
 8017032:	3714      	adds	r7, #20
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <VL53LX_WaitMs>:
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}


VL53LX_Error VL53LX_WaitMs(VL53LX_Dev_t *pdev, int32_t wait_ms){
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	4618      	mov	r0, r3
 801704a:	f7eb fec7 	bl	8002ddc <HAL_Delay>
    return VL53LX_ERROR_NONE;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3708      	adds	r7, #8
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 8017058:	b580      	push	{r7, lr}
 801705a:	b082      	sub	sp, #8
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	4a06      	ldr	r2, [pc, #24]	; (8017080 <VL53LX_WaitUs+0x28>)
 8017066:	fb82 1203 	smull	r1, r2, r2, r3
 801706a:	1192      	asrs	r2, r2, #6
 801706c:	17db      	asrs	r3, r3, #31
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	4618      	mov	r0, r3
 8017072:	f7eb feb3 	bl	8002ddc <HAL_Delay>
    return VL53LX_ERROR_NONE;
 8017076:	2300      	movs	r3, #0
}
 8017078:	4618      	mov	r0, r3
 801707a:	3708      	adds	r7, #8
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}
 8017080:	10624dd3 	.word	0x10624dd3

08017084 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8017084:	b590      	push	{r4, r7, lr}
 8017086:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801708a:	af00      	add	r7, sp, #0
 801708c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8017090:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8017094:	6020      	str	r0, [r4, #0]
 8017096:	f507 700a 	add.w	r0, r7, #552	; 0x228
 801709a:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 801709e:	6001      	str	r1, [r0, #0]
 80170a0:	4619      	mov	r1, r3
 80170a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80170a6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80170aa:	801a      	strh	r2, [r3, #0]
 80170ac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80170b0:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 80170b4:	460a      	mov	r2, r1
 80170b6:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80170b8:	2300      	movs	r3, #0
 80170ba:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80170be:	2300      	movs	r3, #0
 80170c0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80170c4:	2300      	movs	r3, #0
 80170c6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80170ca:	2300      	movs	r3, #0
 80170cc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80170d0:	2300      	movs	r3, #0
 80170d2:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80170d6:	2300      	movs	r3, #0
 80170d8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80170dc:	f107 0310 	add.w	r3, r7, #16
 80170e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80170e4:	4940      	ldr	r1, [pc, #256]	; (80171e8 <VL53LX_WaitValueMaskEx+0x164>)
 80170e6:	4618      	mov	r0, r3
 80170e8:	f000 fb0c 	bl	8017704 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(pdev, &start_time_ms);
 80170ec:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80170f0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80170f4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80170f8:	4611      	mov	r1, r2
 80170fa:	6818      	ldr	r0, [r3, #0]
 80170fc:	f7ff ff8c 	bl	8017018 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8017100:	e04e      	b.n	80171a0 <VL53LX_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8017102:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017106:	2b00      	cmp	r3, #0
 8017108:	d110      	bne.n	801712c <VL53LX_WaitValueMaskEx+0xa8>
			status = VL53LX_RdByte(
 801710a:	f207 2213 	addw	r2, r7, #531	; 0x213
 801710e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017112:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8017116:	8819      	ldrh	r1, [r3, #0]
 8017118:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801711c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017120:	6818      	ldr	r0, [r3, #0]
 8017122:	f7ff ff05 	bl	8016f30 <VL53LX_RdByte>
 8017126:	4603      	mov	r3, r0
 8017128:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 801712c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8017130:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8017134:	4013      	ands	r3, r2
 8017136:	b2db      	uxtb	r3, r3
 8017138:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801713c:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8017140:	7812      	ldrb	r2, [r2, #0]
 8017142:	429a      	cmp	r2, r3
 8017144:	d102      	bne.n	801714c <VL53LX_WaitValueMaskEx+0xc8>
			found = 1;
 8017146:	2301      	movs	r3, #1
 8017148:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 801714c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8017150:	2b00      	cmp	r3, #0
 8017152:	d114      	bne.n	801717e <VL53LX_WaitValueMaskEx+0xfa>
 8017154:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8017158:	2b00      	cmp	r3, #0
 801715a:	d110      	bne.n	801717e <VL53LX_WaitValueMaskEx+0xfa>
			found == 0 &&
 801715c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8017160:	2b00      	cmp	r3, #0
 8017162:	d00c      	beq.n	801717e <VL53LX_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8017164:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8017168:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801716c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017170:	4611      	mov	r1, r2
 8017172:	6818      	ldr	r0, [r3, #0]
 8017174:	f7ff ff62 	bl	801703c <VL53LX_WaitMs>
 8017178:	4603      	mov	r3, r0
 801717a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(pdev, &current_time_ms);
 801717e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8017182:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017186:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801718a:	4611      	mov	r1, r2
 801718c:	6818      	ldr	r0, [r3, #0]
 801718e:	f7ff ff43 	bl	8017018 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8017192:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8017196:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801719a:	1ad3      	subs	r3, r2, r3
 801719c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		   (polling_time_ms < timeout_ms) &&
 80171a0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d10c      	bne.n	80171c2 <VL53LX_WaitValueMaskEx+0x13e>
	while ((status == VL53LX_ERROR_NONE) &&
 80171a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80171ac:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80171b0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d203      	bcs.n	80171c2 <VL53LX_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 80171ba:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d09f      	beq.n	8017102 <VL53LX_WaitValueMaskEx+0x7e>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80171c2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d106      	bne.n	80171d8 <VL53LX_WaitValueMaskEx+0x154>
 80171ca:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d102      	bne.n	80171d8 <VL53LX_WaitValueMaskEx+0x154>
		status = VL53LX_ERROR_TIME_OUT;
 80171d2:	23f9      	movs	r3, #249	; 0xf9
 80171d4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80171d8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80171dc:	4618      	mov	r0, r3
 80171de:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd90      	pop	{r4, r7, pc}
 80171e6:	bf00      	nop
 80171e8:	080189d4 	.word	0x080189d4

080171ec <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b08c      	sub	sp, #48	; 0x30
 80171f0:	af06      	add	r7, sp, #24
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
 80171f8:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80171fa:	2300      	movs	r3, #0
 80171fc:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 80171fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017204:	9303      	str	r3, [sp, #12]
 8017206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017208:	9302      	str	r3, [sp, #8]
 801720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801720c:	9301      	str	r3, [sp, #4]
 801720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	6a3b      	ldr	r3, [r7, #32]
 8017214:	683a      	ldr	r2, [r7, #0]
 8017216:	6879      	ldr	r1, [r7, #4]
 8017218:	68b8      	ldr	r0, [r7, #8]
 801721a:	f7fc ff11 	bl	8014040 <VL53LX_hist_process_data>
 801721e:	4603      	mov	r3, r0
 8017220:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8017222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017226:	4618      	mov	r0, r3
 8017228:	3718      	adds	r7, #24
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
	...

08017230 <std>:
 8017230:	2300      	movs	r3, #0
 8017232:	b510      	push	{r4, lr}
 8017234:	4604      	mov	r4, r0
 8017236:	e9c0 3300 	strd	r3, r3, [r0]
 801723a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801723e:	6083      	str	r3, [r0, #8]
 8017240:	8181      	strh	r1, [r0, #12]
 8017242:	6643      	str	r3, [r0, #100]	; 0x64
 8017244:	81c2      	strh	r2, [r0, #14]
 8017246:	6183      	str	r3, [r0, #24]
 8017248:	4619      	mov	r1, r3
 801724a:	2208      	movs	r2, #8
 801724c:	305c      	adds	r0, #92	; 0x5c
 801724e:	f000 fa51 	bl	80176f4 <memset>
 8017252:	4b0d      	ldr	r3, [pc, #52]	; (8017288 <std+0x58>)
 8017254:	6263      	str	r3, [r4, #36]	; 0x24
 8017256:	4b0d      	ldr	r3, [pc, #52]	; (801728c <std+0x5c>)
 8017258:	62a3      	str	r3, [r4, #40]	; 0x28
 801725a:	4b0d      	ldr	r3, [pc, #52]	; (8017290 <std+0x60>)
 801725c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801725e:	4b0d      	ldr	r3, [pc, #52]	; (8017294 <std+0x64>)
 8017260:	6323      	str	r3, [r4, #48]	; 0x30
 8017262:	4b0d      	ldr	r3, [pc, #52]	; (8017298 <std+0x68>)
 8017264:	6224      	str	r4, [r4, #32]
 8017266:	429c      	cmp	r4, r3
 8017268:	d006      	beq.n	8017278 <std+0x48>
 801726a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801726e:	4294      	cmp	r4, r2
 8017270:	d002      	beq.n	8017278 <std+0x48>
 8017272:	33d0      	adds	r3, #208	; 0xd0
 8017274:	429c      	cmp	r4, r3
 8017276:	d105      	bne.n	8017284 <std+0x54>
 8017278:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801727c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017280:	f000 bac4 	b.w	801780c <__retarget_lock_init_recursive>
 8017284:	bd10      	pop	{r4, pc}
 8017286:	bf00      	nop
 8017288:	080174d1 	.word	0x080174d1
 801728c:	080174f3 	.word	0x080174f3
 8017290:	0801752b 	.word	0x0801752b
 8017294:	0801754f 	.word	0x0801754f
 8017298:	20003258 	.word	0x20003258

0801729c <stdio_exit_handler>:
 801729c:	4a02      	ldr	r2, [pc, #8]	; (80172a8 <stdio_exit_handler+0xc>)
 801729e:	4903      	ldr	r1, [pc, #12]	; (80172ac <stdio_exit_handler+0x10>)
 80172a0:	4803      	ldr	r0, [pc, #12]	; (80172b0 <stdio_exit_handler+0x14>)
 80172a2:	f000 b869 	b.w	8017378 <_fwalk_sglue>
 80172a6:	bf00      	nop
 80172a8:	20000058 	.word	0x20000058
 80172ac:	08018385 	.word	0x08018385
 80172b0:	20000064 	.word	0x20000064

080172b4 <cleanup_stdio>:
 80172b4:	6841      	ldr	r1, [r0, #4]
 80172b6:	4b0c      	ldr	r3, [pc, #48]	; (80172e8 <cleanup_stdio+0x34>)
 80172b8:	4299      	cmp	r1, r3
 80172ba:	b510      	push	{r4, lr}
 80172bc:	4604      	mov	r4, r0
 80172be:	d001      	beq.n	80172c4 <cleanup_stdio+0x10>
 80172c0:	f001 f860 	bl	8018384 <_fflush_r>
 80172c4:	68a1      	ldr	r1, [r4, #8]
 80172c6:	4b09      	ldr	r3, [pc, #36]	; (80172ec <cleanup_stdio+0x38>)
 80172c8:	4299      	cmp	r1, r3
 80172ca:	d002      	beq.n	80172d2 <cleanup_stdio+0x1e>
 80172cc:	4620      	mov	r0, r4
 80172ce:	f001 f859 	bl	8018384 <_fflush_r>
 80172d2:	68e1      	ldr	r1, [r4, #12]
 80172d4:	4b06      	ldr	r3, [pc, #24]	; (80172f0 <cleanup_stdio+0x3c>)
 80172d6:	4299      	cmp	r1, r3
 80172d8:	d004      	beq.n	80172e4 <cleanup_stdio+0x30>
 80172da:	4620      	mov	r0, r4
 80172dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172e0:	f001 b850 	b.w	8018384 <_fflush_r>
 80172e4:	bd10      	pop	{r4, pc}
 80172e6:	bf00      	nop
 80172e8:	20003258 	.word	0x20003258
 80172ec:	200032c0 	.word	0x200032c0
 80172f0:	20003328 	.word	0x20003328

080172f4 <global_stdio_init.part.0>:
 80172f4:	b510      	push	{r4, lr}
 80172f6:	4b0b      	ldr	r3, [pc, #44]	; (8017324 <global_stdio_init.part.0+0x30>)
 80172f8:	4c0b      	ldr	r4, [pc, #44]	; (8017328 <global_stdio_init.part.0+0x34>)
 80172fa:	4a0c      	ldr	r2, [pc, #48]	; (801732c <global_stdio_init.part.0+0x38>)
 80172fc:	601a      	str	r2, [r3, #0]
 80172fe:	4620      	mov	r0, r4
 8017300:	2200      	movs	r2, #0
 8017302:	2104      	movs	r1, #4
 8017304:	f7ff ff94 	bl	8017230 <std>
 8017308:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801730c:	2201      	movs	r2, #1
 801730e:	2109      	movs	r1, #9
 8017310:	f7ff ff8e 	bl	8017230 <std>
 8017314:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017318:	2202      	movs	r2, #2
 801731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801731e:	2112      	movs	r1, #18
 8017320:	f7ff bf86 	b.w	8017230 <std>
 8017324:	20003390 	.word	0x20003390
 8017328:	20003258 	.word	0x20003258
 801732c:	0801729d 	.word	0x0801729d

08017330 <__sfp_lock_acquire>:
 8017330:	4801      	ldr	r0, [pc, #4]	; (8017338 <__sfp_lock_acquire+0x8>)
 8017332:	f000 ba6c 	b.w	801780e <__retarget_lock_acquire_recursive>
 8017336:	bf00      	nop
 8017338:	20003399 	.word	0x20003399

0801733c <__sfp_lock_release>:
 801733c:	4801      	ldr	r0, [pc, #4]	; (8017344 <__sfp_lock_release+0x8>)
 801733e:	f000 ba67 	b.w	8017810 <__retarget_lock_release_recursive>
 8017342:	bf00      	nop
 8017344:	20003399 	.word	0x20003399

08017348 <__sinit>:
 8017348:	b510      	push	{r4, lr}
 801734a:	4604      	mov	r4, r0
 801734c:	f7ff fff0 	bl	8017330 <__sfp_lock_acquire>
 8017350:	6a23      	ldr	r3, [r4, #32]
 8017352:	b11b      	cbz	r3, 801735c <__sinit+0x14>
 8017354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017358:	f7ff bff0 	b.w	801733c <__sfp_lock_release>
 801735c:	4b04      	ldr	r3, [pc, #16]	; (8017370 <__sinit+0x28>)
 801735e:	6223      	str	r3, [r4, #32]
 8017360:	4b04      	ldr	r3, [pc, #16]	; (8017374 <__sinit+0x2c>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d1f5      	bne.n	8017354 <__sinit+0xc>
 8017368:	f7ff ffc4 	bl	80172f4 <global_stdio_init.part.0>
 801736c:	e7f2      	b.n	8017354 <__sinit+0xc>
 801736e:	bf00      	nop
 8017370:	080172b5 	.word	0x080172b5
 8017374:	20003390 	.word	0x20003390

08017378 <_fwalk_sglue>:
 8017378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801737c:	4607      	mov	r7, r0
 801737e:	4688      	mov	r8, r1
 8017380:	4614      	mov	r4, r2
 8017382:	2600      	movs	r6, #0
 8017384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017388:	f1b9 0901 	subs.w	r9, r9, #1
 801738c:	d505      	bpl.n	801739a <_fwalk_sglue+0x22>
 801738e:	6824      	ldr	r4, [r4, #0]
 8017390:	2c00      	cmp	r4, #0
 8017392:	d1f7      	bne.n	8017384 <_fwalk_sglue+0xc>
 8017394:	4630      	mov	r0, r6
 8017396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801739a:	89ab      	ldrh	r3, [r5, #12]
 801739c:	2b01      	cmp	r3, #1
 801739e:	d907      	bls.n	80173b0 <_fwalk_sglue+0x38>
 80173a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173a4:	3301      	adds	r3, #1
 80173a6:	d003      	beq.n	80173b0 <_fwalk_sglue+0x38>
 80173a8:	4629      	mov	r1, r5
 80173aa:	4638      	mov	r0, r7
 80173ac:	47c0      	blx	r8
 80173ae:	4306      	orrs	r6, r0
 80173b0:	3568      	adds	r5, #104	; 0x68
 80173b2:	e7e9      	b.n	8017388 <_fwalk_sglue+0x10>

080173b4 <iprintf>:
 80173b4:	b40f      	push	{r0, r1, r2, r3}
 80173b6:	b507      	push	{r0, r1, r2, lr}
 80173b8:	4906      	ldr	r1, [pc, #24]	; (80173d4 <iprintf+0x20>)
 80173ba:	ab04      	add	r3, sp, #16
 80173bc:	6808      	ldr	r0, [r1, #0]
 80173be:	f853 2b04 	ldr.w	r2, [r3], #4
 80173c2:	6881      	ldr	r1, [r0, #8]
 80173c4:	9301      	str	r3, [sp, #4]
 80173c6:	f000 fcad 	bl	8017d24 <_vfiprintf_r>
 80173ca:	b003      	add	sp, #12
 80173cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80173d0:	b004      	add	sp, #16
 80173d2:	4770      	bx	lr
 80173d4:	200000b0 	.word	0x200000b0

080173d8 <_puts_r>:
 80173d8:	6a03      	ldr	r3, [r0, #32]
 80173da:	b570      	push	{r4, r5, r6, lr}
 80173dc:	6884      	ldr	r4, [r0, #8]
 80173de:	4605      	mov	r5, r0
 80173e0:	460e      	mov	r6, r1
 80173e2:	b90b      	cbnz	r3, 80173e8 <_puts_r+0x10>
 80173e4:	f7ff ffb0 	bl	8017348 <__sinit>
 80173e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173ea:	07db      	lsls	r3, r3, #31
 80173ec:	d405      	bmi.n	80173fa <_puts_r+0x22>
 80173ee:	89a3      	ldrh	r3, [r4, #12]
 80173f0:	0598      	lsls	r0, r3, #22
 80173f2:	d402      	bmi.n	80173fa <_puts_r+0x22>
 80173f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173f6:	f000 fa0a 	bl	801780e <__retarget_lock_acquire_recursive>
 80173fa:	89a3      	ldrh	r3, [r4, #12]
 80173fc:	0719      	lsls	r1, r3, #28
 80173fe:	d513      	bpl.n	8017428 <_puts_r+0x50>
 8017400:	6923      	ldr	r3, [r4, #16]
 8017402:	b18b      	cbz	r3, 8017428 <_puts_r+0x50>
 8017404:	3e01      	subs	r6, #1
 8017406:	68a3      	ldr	r3, [r4, #8]
 8017408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801740c:	3b01      	subs	r3, #1
 801740e:	60a3      	str	r3, [r4, #8]
 8017410:	b9e9      	cbnz	r1, 801744e <_puts_r+0x76>
 8017412:	2b00      	cmp	r3, #0
 8017414:	da2e      	bge.n	8017474 <_puts_r+0x9c>
 8017416:	4622      	mov	r2, r4
 8017418:	210a      	movs	r1, #10
 801741a:	4628      	mov	r0, r5
 801741c:	f000 f8d4 	bl	80175c8 <__swbuf_r>
 8017420:	3001      	adds	r0, #1
 8017422:	d007      	beq.n	8017434 <_puts_r+0x5c>
 8017424:	250a      	movs	r5, #10
 8017426:	e007      	b.n	8017438 <_puts_r+0x60>
 8017428:	4621      	mov	r1, r4
 801742a:	4628      	mov	r0, r5
 801742c:	f000 f90a 	bl	8017644 <__swsetup_r>
 8017430:	2800      	cmp	r0, #0
 8017432:	d0e7      	beq.n	8017404 <_puts_r+0x2c>
 8017434:	f04f 35ff 	mov.w	r5, #4294967295
 8017438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801743a:	07da      	lsls	r2, r3, #31
 801743c:	d405      	bmi.n	801744a <_puts_r+0x72>
 801743e:	89a3      	ldrh	r3, [r4, #12]
 8017440:	059b      	lsls	r3, r3, #22
 8017442:	d402      	bmi.n	801744a <_puts_r+0x72>
 8017444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017446:	f000 f9e3 	bl	8017810 <__retarget_lock_release_recursive>
 801744a:	4628      	mov	r0, r5
 801744c:	bd70      	pop	{r4, r5, r6, pc}
 801744e:	2b00      	cmp	r3, #0
 8017450:	da04      	bge.n	801745c <_puts_r+0x84>
 8017452:	69a2      	ldr	r2, [r4, #24]
 8017454:	429a      	cmp	r2, r3
 8017456:	dc06      	bgt.n	8017466 <_puts_r+0x8e>
 8017458:	290a      	cmp	r1, #10
 801745a:	d004      	beq.n	8017466 <_puts_r+0x8e>
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	1c5a      	adds	r2, r3, #1
 8017460:	6022      	str	r2, [r4, #0]
 8017462:	7019      	strb	r1, [r3, #0]
 8017464:	e7cf      	b.n	8017406 <_puts_r+0x2e>
 8017466:	4622      	mov	r2, r4
 8017468:	4628      	mov	r0, r5
 801746a:	f000 f8ad 	bl	80175c8 <__swbuf_r>
 801746e:	3001      	adds	r0, #1
 8017470:	d1c9      	bne.n	8017406 <_puts_r+0x2e>
 8017472:	e7df      	b.n	8017434 <_puts_r+0x5c>
 8017474:	6823      	ldr	r3, [r4, #0]
 8017476:	250a      	movs	r5, #10
 8017478:	1c5a      	adds	r2, r3, #1
 801747a:	6022      	str	r2, [r4, #0]
 801747c:	701d      	strb	r5, [r3, #0]
 801747e:	e7db      	b.n	8017438 <_puts_r+0x60>

08017480 <puts>:
 8017480:	4b02      	ldr	r3, [pc, #8]	; (801748c <puts+0xc>)
 8017482:	4601      	mov	r1, r0
 8017484:	6818      	ldr	r0, [r3, #0]
 8017486:	f7ff bfa7 	b.w	80173d8 <_puts_r>
 801748a:	bf00      	nop
 801748c:	200000b0 	.word	0x200000b0

08017490 <siprintf>:
 8017490:	b40e      	push	{r1, r2, r3}
 8017492:	b500      	push	{lr}
 8017494:	b09c      	sub	sp, #112	; 0x70
 8017496:	ab1d      	add	r3, sp, #116	; 0x74
 8017498:	9002      	str	r0, [sp, #8]
 801749a:	9006      	str	r0, [sp, #24]
 801749c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174a0:	4809      	ldr	r0, [pc, #36]	; (80174c8 <siprintf+0x38>)
 80174a2:	9107      	str	r1, [sp, #28]
 80174a4:	9104      	str	r1, [sp, #16]
 80174a6:	4909      	ldr	r1, [pc, #36]	; (80174cc <siprintf+0x3c>)
 80174a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80174ac:	9105      	str	r1, [sp, #20]
 80174ae:	6800      	ldr	r0, [r0, #0]
 80174b0:	9301      	str	r3, [sp, #4]
 80174b2:	a902      	add	r1, sp, #8
 80174b4:	f000 fb0e 	bl	8017ad4 <_svfiprintf_r>
 80174b8:	9b02      	ldr	r3, [sp, #8]
 80174ba:	2200      	movs	r2, #0
 80174bc:	701a      	strb	r2, [r3, #0]
 80174be:	b01c      	add	sp, #112	; 0x70
 80174c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80174c4:	b003      	add	sp, #12
 80174c6:	4770      	bx	lr
 80174c8:	200000b0 	.word	0x200000b0
 80174cc:	ffff0208 	.word	0xffff0208

080174d0 <__sread>:
 80174d0:	b510      	push	{r4, lr}
 80174d2:	460c      	mov	r4, r1
 80174d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174d8:	f000 f94a 	bl	8017770 <_read_r>
 80174dc:	2800      	cmp	r0, #0
 80174de:	bfab      	itete	ge
 80174e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80174e2:	89a3      	ldrhlt	r3, [r4, #12]
 80174e4:	181b      	addge	r3, r3, r0
 80174e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80174ea:	bfac      	ite	ge
 80174ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80174ee:	81a3      	strhlt	r3, [r4, #12]
 80174f0:	bd10      	pop	{r4, pc}

080174f2 <__swrite>:
 80174f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f6:	461f      	mov	r7, r3
 80174f8:	898b      	ldrh	r3, [r1, #12]
 80174fa:	05db      	lsls	r3, r3, #23
 80174fc:	4605      	mov	r5, r0
 80174fe:	460c      	mov	r4, r1
 8017500:	4616      	mov	r6, r2
 8017502:	d505      	bpl.n	8017510 <__swrite+0x1e>
 8017504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017508:	2302      	movs	r3, #2
 801750a:	2200      	movs	r2, #0
 801750c:	f000 f91e 	bl	801774c <_lseek_r>
 8017510:	89a3      	ldrh	r3, [r4, #12]
 8017512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801751a:	81a3      	strh	r3, [r4, #12]
 801751c:	4632      	mov	r2, r6
 801751e:	463b      	mov	r3, r7
 8017520:	4628      	mov	r0, r5
 8017522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017526:	f000 b935 	b.w	8017794 <_write_r>

0801752a <__sseek>:
 801752a:	b510      	push	{r4, lr}
 801752c:	460c      	mov	r4, r1
 801752e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017532:	f000 f90b 	bl	801774c <_lseek_r>
 8017536:	1c43      	adds	r3, r0, #1
 8017538:	89a3      	ldrh	r3, [r4, #12]
 801753a:	bf15      	itete	ne
 801753c:	6560      	strne	r0, [r4, #84]	; 0x54
 801753e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017546:	81a3      	strheq	r3, [r4, #12]
 8017548:	bf18      	it	ne
 801754a:	81a3      	strhne	r3, [r4, #12]
 801754c:	bd10      	pop	{r4, pc}

0801754e <__sclose>:
 801754e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017552:	f000 b8eb 	b.w	801772c <_close_r>

08017556 <_vsniprintf_r>:
 8017556:	b530      	push	{r4, r5, lr}
 8017558:	4614      	mov	r4, r2
 801755a:	2c00      	cmp	r4, #0
 801755c:	b09b      	sub	sp, #108	; 0x6c
 801755e:	4605      	mov	r5, r0
 8017560:	461a      	mov	r2, r3
 8017562:	da05      	bge.n	8017570 <_vsniprintf_r+0x1a>
 8017564:	238b      	movs	r3, #139	; 0x8b
 8017566:	6003      	str	r3, [r0, #0]
 8017568:	f04f 30ff 	mov.w	r0, #4294967295
 801756c:	b01b      	add	sp, #108	; 0x6c
 801756e:	bd30      	pop	{r4, r5, pc}
 8017570:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017574:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017578:	bf14      	ite	ne
 801757a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801757e:	4623      	moveq	r3, r4
 8017580:	9302      	str	r3, [sp, #8]
 8017582:	9305      	str	r3, [sp, #20]
 8017584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017588:	9100      	str	r1, [sp, #0]
 801758a:	9104      	str	r1, [sp, #16]
 801758c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017590:	4669      	mov	r1, sp
 8017592:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017594:	f000 fa9e 	bl	8017ad4 <_svfiprintf_r>
 8017598:	1c43      	adds	r3, r0, #1
 801759a:	bfbc      	itt	lt
 801759c:	238b      	movlt	r3, #139	; 0x8b
 801759e:	602b      	strlt	r3, [r5, #0]
 80175a0:	2c00      	cmp	r4, #0
 80175a2:	d0e3      	beq.n	801756c <_vsniprintf_r+0x16>
 80175a4:	9b00      	ldr	r3, [sp, #0]
 80175a6:	2200      	movs	r2, #0
 80175a8:	701a      	strb	r2, [r3, #0]
 80175aa:	e7df      	b.n	801756c <_vsniprintf_r+0x16>

080175ac <vsniprintf>:
 80175ac:	b507      	push	{r0, r1, r2, lr}
 80175ae:	9300      	str	r3, [sp, #0]
 80175b0:	4613      	mov	r3, r2
 80175b2:	460a      	mov	r2, r1
 80175b4:	4601      	mov	r1, r0
 80175b6:	4803      	ldr	r0, [pc, #12]	; (80175c4 <vsniprintf+0x18>)
 80175b8:	6800      	ldr	r0, [r0, #0]
 80175ba:	f7ff ffcc 	bl	8017556 <_vsniprintf_r>
 80175be:	b003      	add	sp, #12
 80175c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80175c4:	200000b0 	.word	0x200000b0

080175c8 <__swbuf_r>:
 80175c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ca:	460e      	mov	r6, r1
 80175cc:	4614      	mov	r4, r2
 80175ce:	4605      	mov	r5, r0
 80175d0:	b118      	cbz	r0, 80175da <__swbuf_r+0x12>
 80175d2:	6a03      	ldr	r3, [r0, #32]
 80175d4:	b90b      	cbnz	r3, 80175da <__swbuf_r+0x12>
 80175d6:	f7ff feb7 	bl	8017348 <__sinit>
 80175da:	69a3      	ldr	r3, [r4, #24]
 80175dc:	60a3      	str	r3, [r4, #8]
 80175de:	89a3      	ldrh	r3, [r4, #12]
 80175e0:	071a      	lsls	r2, r3, #28
 80175e2:	d525      	bpl.n	8017630 <__swbuf_r+0x68>
 80175e4:	6923      	ldr	r3, [r4, #16]
 80175e6:	b31b      	cbz	r3, 8017630 <__swbuf_r+0x68>
 80175e8:	6823      	ldr	r3, [r4, #0]
 80175ea:	6922      	ldr	r2, [r4, #16]
 80175ec:	1a98      	subs	r0, r3, r2
 80175ee:	6963      	ldr	r3, [r4, #20]
 80175f0:	b2f6      	uxtb	r6, r6
 80175f2:	4283      	cmp	r3, r0
 80175f4:	4637      	mov	r7, r6
 80175f6:	dc04      	bgt.n	8017602 <__swbuf_r+0x3a>
 80175f8:	4621      	mov	r1, r4
 80175fa:	4628      	mov	r0, r5
 80175fc:	f000 fec2 	bl	8018384 <_fflush_r>
 8017600:	b9e0      	cbnz	r0, 801763c <__swbuf_r+0x74>
 8017602:	68a3      	ldr	r3, [r4, #8]
 8017604:	3b01      	subs	r3, #1
 8017606:	60a3      	str	r3, [r4, #8]
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	1c5a      	adds	r2, r3, #1
 801760c:	6022      	str	r2, [r4, #0]
 801760e:	701e      	strb	r6, [r3, #0]
 8017610:	6962      	ldr	r2, [r4, #20]
 8017612:	1c43      	adds	r3, r0, #1
 8017614:	429a      	cmp	r2, r3
 8017616:	d004      	beq.n	8017622 <__swbuf_r+0x5a>
 8017618:	89a3      	ldrh	r3, [r4, #12]
 801761a:	07db      	lsls	r3, r3, #31
 801761c:	d506      	bpl.n	801762c <__swbuf_r+0x64>
 801761e:	2e0a      	cmp	r6, #10
 8017620:	d104      	bne.n	801762c <__swbuf_r+0x64>
 8017622:	4621      	mov	r1, r4
 8017624:	4628      	mov	r0, r5
 8017626:	f000 fead 	bl	8018384 <_fflush_r>
 801762a:	b938      	cbnz	r0, 801763c <__swbuf_r+0x74>
 801762c:	4638      	mov	r0, r7
 801762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017630:	4621      	mov	r1, r4
 8017632:	4628      	mov	r0, r5
 8017634:	f000 f806 	bl	8017644 <__swsetup_r>
 8017638:	2800      	cmp	r0, #0
 801763a:	d0d5      	beq.n	80175e8 <__swbuf_r+0x20>
 801763c:	f04f 37ff 	mov.w	r7, #4294967295
 8017640:	e7f4      	b.n	801762c <__swbuf_r+0x64>
	...

08017644 <__swsetup_r>:
 8017644:	b538      	push	{r3, r4, r5, lr}
 8017646:	4b2a      	ldr	r3, [pc, #168]	; (80176f0 <__swsetup_r+0xac>)
 8017648:	4605      	mov	r5, r0
 801764a:	6818      	ldr	r0, [r3, #0]
 801764c:	460c      	mov	r4, r1
 801764e:	b118      	cbz	r0, 8017658 <__swsetup_r+0x14>
 8017650:	6a03      	ldr	r3, [r0, #32]
 8017652:	b90b      	cbnz	r3, 8017658 <__swsetup_r+0x14>
 8017654:	f7ff fe78 	bl	8017348 <__sinit>
 8017658:	89a3      	ldrh	r3, [r4, #12]
 801765a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801765e:	0718      	lsls	r0, r3, #28
 8017660:	d422      	bmi.n	80176a8 <__swsetup_r+0x64>
 8017662:	06d9      	lsls	r1, r3, #27
 8017664:	d407      	bmi.n	8017676 <__swsetup_r+0x32>
 8017666:	2309      	movs	r3, #9
 8017668:	602b      	str	r3, [r5, #0]
 801766a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801766e:	81a3      	strh	r3, [r4, #12]
 8017670:	f04f 30ff 	mov.w	r0, #4294967295
 8017674:	e034      	b.n	80176e0 <__swsetup_r+0x9c>
 8017676:	0758      	lsls	r0, r3, #29
 8017678:	d512      	bpl.n	80176a0 <__swsetup_r+0x5c>
 801767a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801767c:	b141      	cbz	r1, 8017690 <__swsetup_r+0x4c>
 801767e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017682:	4299      	cmp	r1, r3
 8017684:	d002      	beq.n	801768c <__swsetup_r+0x48>
 8017686:	4628      	mov	r0, r5
 8017688:	f000 f8d2 	bl	8017830 <_free_r>
 801768c:	2300      	movs	r3, #0
 801768e:	6363      	str	r3, [r4, #52]	; 0x34
 8017690:	89a3      	ldrh	r3, [r4, #12]
 8017692:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017696:	81a3      	strh	r3, [r4, #12]
 8017698:	2300      	movs	r3, #0
 801769a:	6063      	str	r3, [r4, #4]
 801769c:	6923      	ldr	r3, [r4, #16]
 801769e:	6023      	str	r3, [r4, #0]
 80176a0:	89a3      	ldrh	r3, [r4, #12]
 80176a2:	f043 0308 	orr.w	r3, r3, #8
 80176a6:	81a3      	strh	r3, [r4, #12]
 80176a8:	6923      	ldr	r3, [r4, #16]
 80176aa:	b94b      	cbnz	r3, 80176c0 <__swsetup_r+0x7c>
 80176ac:	89a3      	ldrh	r3, [r4, #12]
 80176ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80176b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80176b6:	d003      	beq.n	80176c0 <__swsetup_r+0x7c>
 80176b8:	4621      	mov	r1, r4
 80176ba:	4628      	mov	r0, r5
 80176bc:	f000 feb0 	bl	8018420 <__smakebuf_r>
 80176c0:	89a0      	ldrh	r0, [r4, #12]
 80176c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176c6:	f010 0301 	ands.w	r3, r0, #1
 80176ca:	d00a      	beq.n	80176e2 <__swsetup_r+0x9e>
 80176cc:	2300      	movs	r3, #0
 80176ce:	60a3      	str	r3, [r4, #8]
 80176d0:	6963      	ldr	r3, [r4, #20]
 80176d2:	425b      	negs	r3, r3
 80176d4:	61a3      	str	r3, [r4, #24]
 80176d6:	6923      	ldr	r3, [r4, #16]
 80176d8:	b943      	cbnz	r3, 80176ec <__swsetup_r+0xa8>
 80176da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80176de:	d1c4      	bne.n	801766a <__swsetup_r+0x26>
 80176e0:	bd38      	pop	{r3, r4, r5, pc}
 80176e2:	0781      	lsls	r1, r0, #30
 80176e4:	bf58      	it	pl
 80176e6:	6963      	ldrpl	r3, [r4, #20]
 80176e8:	60a3      	str	r3, [r4, #8]
 80176ea:	e7f4      	b.n	80176d6 <__swsetup_r+0x92>
 80176ec:	2000      	movs	r0, #0
 80176ee:	e7f7      	b.n	80176e0 <__swsetup_r+0x9c>
 80176f0:	200000b0 	.word	0x200000b0

080176f4 <memset>:
 80176f4:	4402      	add	r2, r0
 80176f6:	4603      	mov	r3, r0
 80176f8:	4293      	cmp	r3, r2
 80176fa:	d100      	bne.n	80176fe <memset+0xa>
 80176fc:	4770      	bx	lr
 80176fe:	f803 1b01 	strb.w	r1, [r3], #1
 8017702:	e7f9      	b.n	80176f8 <memset+0x4>

08017704 <strncpy>:
 8017704:	b510      	push	{r4, lr}
 8017706:	3901      	subs	r1, #1
 8017708:	4603      	mov	r3, r0
 801770a:	b132      	cbz	r2, 801771a <strncpy+0x16>
 801770c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017710:	f803 4b01 	strb.w	r4, [r3], #1
 8017714:	3a01      	subs	r2, #1
 8017716:	2c00      	cmp	r4, #0
 8017718:	d1f7      	bne.n	801770a <strncpy+0x6>
 801771a:	441a      	add	r2, r3
 801771c:	2100      	movs	r1, #0
 801771e:	4293      	cmp	r3, r2
 8017720:	d100      	bne.n	8017724 <strncpy+0x20>
 8017722:	bd10      	pop	{r4, pc}
 8017724:	f803 1b01 	strb.w	r1, [r3], #1
 8017728:	e7f9      	b.n	801771e <strncpy+0x1a>
	...

0801772c <_close_r>:
 801772c:	b538      	push	{r3, r4, r5, lr}
 801772e:	4d06      	ldr	r5, [pc, #24]	; (8017748 <_close_r+0x1c>)
 8017730:	2300      	movs	r3, #0
 8017732:	4604      	mov	r4, r0
 8017734:	4608      	mov	r0, r1
 8017736:	602b      	str	r3, [r5, #0]
 8017738:	f7ea fae7 	bl	8001d0a <_close>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d102      	bne.n	8017746 <_close_r+0x1a>
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	b103      	cbz	r3, 8017746 <_close_r+0x1a>
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	20003394 	.word	0x20003394

0801774c <_lseek_r>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4d07      	ldr	r5, [pc, #28]	; (801776c <_lseek_r+0x20>)
 8017750:	4604      	mov	r4, r0
 8017752:	4608      	mov	r0, r1
 8017754:	4611      	mov	r1, r2
 8017756:	2200      	movs	r2, #0
 8017758:	602a      	str	r2, [r5, #0]
 801775a:	461a      	mov	r2, r3
 801775c:	f7ea fafc 	bl	8001d58 <_lseek>
 8017760:	1c43      	adds	r3, r0, #1
 8017762:	d102      	bne.n	801776a <_lseek_r+0x1e>
 8017764:	682b      	ldr	r3, [r5, #0]
 8017766:	b103      	cbz	r3, 801776a <_lseek_r+0x1e>
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	bd38      	pop	{r3, r4, r5, pc}
 801776c:	20003394 	.word	0x20003394

08017770 <_read_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d07      	ldr	r5, [pc, #28]	; (8017790 <_read_r+0x20>)
 8017774:	4604      	mov	r4, r0
 8017776:	4608      	mov	r0, r1
 8017778:	4611      	mov	r1, r2
 801777a:	2200      	movs	r2, #0
 801777c:	602a      	str	r2, [r5, #0]
 801777e:	461a      	mov	r2, r3
 8017780:	f7ea fa8a 	bl	8001c98 <_read>
 8017784:	1c43      	adds	r3, r0, #1
 8017786:	d102      	bne.n	801778e <_read_r+0x1e>
 8017788:	682b      	ldr	r3, [r5, #0]
 801778a:	b103      	cbz	r3, 801778e <_read_r+0x1e>
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	bd38      	pop	{r3, r4, r5, pc}
 8017790:	20003394 	.word	0x20003394

08017794 <_write_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	4d07      	ldr	r5, [pc, #28]	; (80177b4 <_write_r+0x20>)
 8017798:	4604      	mov	r4, r0
 801779a:	4608      	mov	r0, r1
 801779c:	4611      	mov	r1, r2
 801779e:	2200      	movs	r2, #0
 80177a0:	602a      	str	r2, [r5, #0]
 80177a2:	461a      	mov	r2, r3
 80177a4:	f7ea fa95 	bl	8001cd2 <_write>
 80177a8:	1c43      	adds	r3, r0, #1
 80177aa:	d102      	bne.n	80177b2 <_write_r+0x1e>
 80177ac:	682b      	ldr	r3, [r5, #0]
 80177ae:	b103      	cbz	r3, 80177b2 <_write_r+0x1e>
 80177b0:	6023      	str	r3, [r4, #0]
 80177b2:	bd38      	pop	{r3, r4, r5, pc}
 80177b4:	20003394 	.word	0x20003394

080177b8 <__errno>:
 80177b8:	4b01      	ldr	r3, [pc, #4]	; (80177c0 <__errno+0x8>)
 80177ba:	6818      	ldr	r0, [r3, #0]
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	200000b0 	.word	0x200000b0

080177c4 <__libc_init_array>:
 80177c4:	b570      	push	{r4, r5, r6, lr}
 80177c6:	4d0d      	ldr	r5, [pc, #52]	; (80177fc <__libc_init_array+0x38>)
 80177c8:	4c0d      	ldr	r4, [pc, #52]	; (8017800 <__libc_init_array+0x3c>)
 80177ca:	1b64      	subs	r4, r4, r5
 80177cc:	10a4      	asrs	r4, r4, #2
 80177ce:	2600      	movs	r6, #0
 80177d0:	42a6      	cmp	r6, r4
 80177d2:	d109      	bne.n	80177e8 <__libc_init_array+0x24>
 80177d4:	4d0b      	ldr	r5, [pc, #44]	; (8017804 <__libc_init_array+0x40>)
 80177d6:	4c0c      	ldr	r4, [pc, #48]	; (8017808 <__libc_init_array+0x44>)
 80177d8:	f000 fee2 	bl	80185a0 <_init>
 80177dc:	1b64      	subs	r4, r4, r5
 80177de:	10a4      	asrs	r4, r4, #2
 80177e0:	2600      	movs	r6, #0
 80177e2:	42a6      	cmp	r6, r4
 80177e4:	d105      	bne.n	80177f2 <__libc_init_array+0x2e>
 80177e6:	bd70      	pop	{r4, r5, r6, pc}
 80177e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177ec:	4798      	blx	r3
 80177ee:	3601      	adds	r6, #1
 80177f0:	e7ee      	b.n	80177d0 <__libc_init_array+0xc>
 80177f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177f6:	4798      	blx	r3
 80177f8:	3601      	adds	r6, #1
 80177fa:	e7f2      	b.n	80177e2 <__libc_init_array+0x1e>
 80177fc:	0801b660 	.word	0x0801b660
 8017800:	0801b660 	.word	0x0801b660
 8017804:	0801b660 	.word	0x0801b660
 8017808:	0801b664 	.word	0x0801b664

0801780c <__retarget_lock_init_recursive>:
 801780c:	4770      	bx	lr

0801780e <__retarget_lock_acquire_recursive>:
 801780e:	4770      	bx	lr

08017810 <__retarget_lock_release_recursive>:
 8017810:	4770      	bx	lr

08017812 <memcpy>:
 8017812:	440a      	add	r2, r1
 8017814:	4291      	cmp	r1, r2
 8017816:	f100 33ff 	add.w	r3, r0, #4294967295
 801781a:	d100      	bne.n	801781e <memcpy+0xc>
 801781c:	4770      	bx	lr
 801781e:	b510      	push	{r4, lr}
 8017820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017828:	4291      	cmp	r1, r2
 801782a:	d1f9      	bne.n	8017820 <memcpy+0xe>
 801782c:	bd10      	pop	{r4, pc}
	...

08017830 <_free_r>:
 8017830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017832:	2900      	cmp	r1, #0
 8017834:	d044      	beq.n	80178c0 <_free_r+0x90>
 8017836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801783a:	9001      	str	r0, [sp, #4]
 801783c:	2b00      	cmp	r3, #0
 801783e:	f1a1 0404 	sub.w	r4, r1, #4
 8017842:	bfb8      	it	lt
 8017844:	18e4      	addlt	r4, r4, r3
 8017846:	f000 f8df 	bl	8017a08 <__malloc_lock>
 801784a:	4a1e      	ldr	r2, [pc, #120]	; (80178c4 <_free_r+0x94>)
 801784c:	9801      	ldr	r0, [sp, #4]
 801784e:	6813      	ldr	r3, [r2, #0]
 8017850:	b933      	cbnz	r3, 8017860 <_free_r+0x30>
 8017852:	6063      	str	r3, [r4, #4]
 8017854:	6014      	str	r4, [r2, #0]
 8017856:	b003      	add	sp, #12
 8017858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801785c:	f000 b8da 	b.w	8017a14 <__malloc_unlock>
 8017860:	42a3      	cmp	r3, r4
 8017862:	d908      	bls.n	8017876 <_free_r+0x46>
 8017864:	6825      	ldr	r5, [r4, #0]
 8017866:	1961      	adds	r1, r4, r5
 8017868:	428b      	cmp	r3, r1
 801786a:	bf01      	itttt	eq
 801786c:	6819      	ldreq	r1, [r3, #0]
 801786e:	685b      	ldreq	r3, [r3, #4]
 8017870:	1949      	addeq	r1, r1, r5
 8017872:	6021      	streq	r1, [r4, #0]
 8017874:	e7ed      	b.n	8017852 <_free_r+0x22>
 8017876:	461a      	mov	r2, r3
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	b10b      	cbz	r3, 8017880 <_free_r+0x50>
 801787c:	42a3      	cmp	r3, r4
 801787e:	d9fa      	bls.n	8017876 <_free_r+0x46>
 8017880:	6811      	ldr	r1, [r2, #0]
 8017882:	1855      	adds	r5, r2, r1
 8017884:	42a5      	cmp	r5, r4
 8017886:	d10b      	bne.n	80178a0 <_free_r+0x70>
 8017888:	6824      	ldr	r4, [r4, #0]
 801788a:	4421      	add	r1, r4
 801788c:	1854      	adds	r4, r2, r1
 801788e:	42a3      	cmp	r3, r4
 8017890:	6011      	str	r1, [r2, #0]
 8017892:	d1e0      	bne.n	8017856 <_free_r+0x26>
 8017894:	681c      	ldr	r4, [r3, #0]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	6053      	str	r3, [r2, #4]
 801789a:	440c      	add	r4, r1
 801789c:	6014      	str	r4, [r2, #0]
 801789e:	e7da      	b.n	8017856 <_free_r+0x26>
 80178a0:	d902      	bls.n	80178a8 <_free_r+0x78>
 80178a2:	230c      	movs	r3, #12
 80178a4:	6003      	str	r3, [r0, #0]
 80178a6:	e7d6      	b.n	8017856 <_free_r+0x26>
 80178a8:	6825      	ldr	r5, [r4, #0]
 80178aa:	1961      	adds	r1, r4, r5
 80178ac:	428b      	cmp	r3, r1
 80178ae:	bf04      	itt	eq
 80178b0:	6819      	ldreq	r1, [r3, #0]
 80178b2:	685b      	ldreq	r3, [r3, #4]
 80178b4:	6063      	str	r3, [r4, #4]
 80178b6:	bf04      	itt	eq
 80178b8:	1949      	addeq	r1, r1, r5
 80178ba:	6021      	streq	r1, [r4, #0]
 80178bc:	6054      	str	r4, [r2, #4]
 80178be:	e7ca      	b.n	8017856 <_free_r+0x26>
 80178c0:	b003      	add	sp, #12
 80178c2:	bd30      	pop	{r4, r5, pc}
 80178c4:	2000339c 	.word	0x2000339c

080178c8 <sbrk_aligned>:
 80178c8:	b570      	push	{r4, r5, r6, lr}
 80178ca:	4e0e      	ldr	r6, [pc, #56]	; (8017904 <sbrk_aligned+0x3c>)
 80178cc:	460c      	mov	r4, r1
 80178ce:	6831      	ldr	r1, [r6, #0]
 80178d0:	4605      	mov	r5, r0
 80178d2:	b911      	cbnz	r1, 80178da <sbrk_aligned+0x12>
 80178d4:	f000 fe1c 	bl	8018510 <_sbrk_r>
 80178d8:	6030      	str	r0, [r6, #0]
 80178da:	4621      	mov	r1, r4
 80178dc:	4628      	mov	r0, r5
 80178de:	f000 fe17 	bl	8018510 <_sbrk_r>
 80178e2:	1c43      	adds	r3, r0, #1
 80178e4:	d00a      	beq.n	80178fc <sbrk_aligned+0x34>
 80178e6:	1cc4      	adds	r4, r0, #3
 80178e8:	f024 0403 	bic.w	r4, r4, #3
 80178ec:	42a0      	cmp	r0, r4
 80178ee:	d007      	beq.n	8017900 <sbrk_aligned+0x38>
 80178f0:	1a21      	subs	r1, r4, r0
 80178f2:	4628      	mov	r0, r5
 80178f4:	f000 fe0c 	bl	8018510 <_sbrk_r>
 80178f8:	3001      	adds	r0, #1
 80178fa:	d101      	bne.n	8017900 <sbrk_aligned+0x38>
 80178fc:	f04f 34ff 	mov.w	r4, #4294967295
 8017900:	4620      	mov	r0, r4
 8017902:	bd70      	pop	{r4, r5, r6, pc}
 8017904:	200033a0 	.word	0x200033a0

08017908 <_malloc_r>:
 8017908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801790c:	1ccd      	adds	r5, r1, #3
 801790e:	f025 0503 	bic.w	r5, r5, #3
 8017912:	3508      	adds	r5, #8
 8017914:	2d0c      	cmp	r5, #12
 8017916:	bf38      	it	cc
 8017918:	250c      	movcc	r5, #12
 801791a:	2d00      	cmp	r5, #0
 801791c:	4607      	mov	r7, r0
 801791e:	db01      	blt.n	8017924 <_malloc_r+0x1c>
 8017920:	42a9      	cmp	r1, r5
 8017922:	d905      	bls.n	8017930 <_malloc_r+0x28>
 8017924:	230c      	movs	r3, #12
 8017926:	603b      	str	r3, [r7, #0]
 8017928:	2600      	movs	r6, #0
 801792a:	4630      	mov	r0, r6
 801792c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a04 <_malloc_r+0xfc>
 8017934:	f000 f868 	bl	8017a08 <__malloc_lock>
 8017938:	f8d8 3000 	ldr.w	r3, [r8]
 801793c:	461c      	mov	r4, r3
 801793e:	bb5c      	cbnz	r4, 8017998 <_malloc_r+0x90>
 8017940:	4629      	mov	r1, r5
 8017942:	4638      	mov	r0, r7
 8017944:	f7ff ffc0 	bl	80178c8 <sbrk_aligned>
 8017948:	1c43      	adds	r3, r0, #1
 801794a:	4604      	mov	r4, r0
 801794c:	d155      	bne.n	80179fa <_malloc_r+0xf2>
 801794e:	f8d8 4000 	ldr.w	r4, [r8]
 8017952:	4626      	mov	r6, r4
 8017954:	2e00      	cmp	r6, #0
 8017956:	d145      	bne.n	80179e4 <_malloc_r+0xdc>
 8017958:	2c00      	cmp	r4, #0
 801795a:	d048      	beq.n	80179ee <_malloc_r+0xe6>
 801795c:	6823      	ldr	r3, [r4, #0]
 801795e:	4631      	mov	r1, r6
 8017960:	4638      	mov	r0, r7
 8017962:	eb04 0903 	add.w	r9, r4, r3
 8017966:	f000 fdd3 	bl	8018510 <_sbrk_r>
 801796a:	4581      	cmp	r9, r0
 801796c:	d13f      	bne.n	80179ee <_malloc_r+0xe6>
 801796e:	6821      	ldr	r1, [r4, #0]
 8017970:	1a6d      	subs	r5, r5, r1
 8017972:	4629      	mov	r1, r5
 8017974:	4638      	mov	r0, r7
 8017976:	f7ff ffa7 	bl	80178c8 <sbrk_aligned>
 801797a:	3001      	adds	r0, #1
 801797c:	d037      	beq.n	80179ee <_malloc_r+0xe6>
 801797e:	6823      	ldr	r3, [r4, #0]
 8017980:	442b      	add	r3, r5
 8017982:	6023      	str	r3, [r4, #0]
 8017984:	f8d8 3000 	ldr.w	r3, [r8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d038      	beq.n	80179fe <_malloc_r+0xf6>
 801798c:	685a      	ldr	r2, [r3, #4]
 801798e:	42a2      	cmp	r2, r4
 8017990:	d12b      	bne.n	80179ea <_malloc_r+0xe2>
 8017992:	2200      	movs	r2, #0
 8017994:	605a      	str	r2, [r3, #4]
 8017996:	e00f      	b.n	80179b8 <_malloc_r+0xb0>
 8017998:	6822      	ldr	r2, [r4, #0]
 801799a:	1b52      	subs	r2, r2, r5
 801799c:	d41f      	bmi.n	80179de <_malloc_r+0xd6>
 801799e:	2a0b      	cmp	r2, #11
 80179a0:	d917      	bls.n	80179d2 <_malloc_r+0xca>
 80179a2:	1961      	adds	r1, r4, r5
 80179a4:	42a3      	cmp	r3, r4
 80179a6:	6025      	str	r5, [r4, #0]
 80179a8:	bf18      	it	ne
 80179aa:	6059      	strne	r1, [r3, #4]
 80179ac:	6863      	ldr	r3, [r4, #4]
 80179ae:	bf08      	it	eq
 80179b0:	f8c8 1000 	streq.w	r1, [r8]
 80179b4:	5162      	str	r2, [r4, r5]
 80179b6:	604b      	str	r3, [r1, #4]
 80179b8:	4638      	mov	r0, r7
 80179ba:	f104 060b 	add.w	r6, r4, #11
 80179be:	f000 f829 	bl	8017a14 <__malloc_unlock>
 80179c2:	f026 0607 	bic.w	r6, r6, #7
 80179c6:	1d23      	adds	r3, r4, #4
 80179c8:	1af2      	subs	r2, r6, r3
 80179ca:	d0ae      	beq.n	801792a <_malloc_r+0x22>
 80179cc:	1b9b      	subs	r3, r3, r6
 80179ce:	50a3      	str	r3, [r4, r2]
 80179d0:	e7ab      	b.n	801792a <_malloc_r+0x22>
 80179d2:	42a3      	cmp	r3, r4
 80179d4:	6862      	ldr	r2, [r4, #4]
 80179d6:	d1dd      	bne.n	8017994 <_malloc_r+0x8c>
 80179d8:	f8c8 2000 	str.w	r2, [r8]
 80179dc:	e7ec      	b.n	80179b8 <_malloc_r+0xb0>
 80179de:	4623      	mov	r3, r4
 80179e0:	6864      	ldr	r4, [r4, #4]
 80179e2:	e7ac      	b.n	801793e <_malloc_r+0x36>
 80179e4:	4634      	mov	r4, r6
 80179e6:	6876      	ldr	r6, [r6, #4]
 80179e8:	e7b4      	b.n	8017954 <_malloc_r+0x4c>
 80179ea:	4613      	mov	r3, r2
 80179ec:	e7cc      	b.n	8017988 <_malloc_r+0x80>
 80179ee:	230c      	movs	r3, #12
 80179f0:	603b      	str	r3, [r7, #0]
 80179f2:	4638      	mov	r0, r7
 80179f4:	f000 f80e 	bl	8017a14 <__malloc_unlock>
 80179f8:	e797      	b.n	801792a <_malloc_r+0x22>
 80179fa:	6025      	str	r5, [r4, #0]
 80179fc:	e7dc      	b.n	80179b8 <_malloc_r+0xb0>
 80179fe:	605b      	str	r3, [r3, #4]
 8017a00:	deff      	udf	#255	; 0xff
 8017a02:	bf00      	nop
 8017a04:	2000339c 	.word	0x2000339c

08017a08 <__malloc_lock>:
 8017a08:	4801      	ldr	r0, [pc, #4]	; (8017a10 <__malloc_lock+0x8>)
 8017a0a:	f7ff bf00 	b.w	801780e <__retarget_lock_acquire_recursive>
 8017a0e:	bf00      	nop
 8017a10:	20003398 	.word	0x20003398

08017a14 <__malloc_unlock>:
 8017a14:	4801      	ldr	r0, [pc, #4]	; (8017a1c <__malloc_unlock+0x8>)
 8017a16:	f7ff befb 	b.w	8017810 <__retarget_lock_release_recursive>
 8017a1a:	bf00      	nop
 8017a1c:	20003398 	.word	0x20003398

08017a20 <__ssputs_r>:
 8017a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a24:	688e      	ldr	r6, [r1, #8]
 8017a26:	461f      	mov	r7, r3
 8017a28:	42be      	cmp	r6, r7
 8017a2a:	680b      	ldr	r3, [r1, #0]
 8017a2c:	4682      	mov	sl, r0
 8017a2e:	460c      	mov	r4, r1
 8017a30:	4690      	mov	r8, r2
 8017a32:	d82c      	bhi.n	8017a8e <__ssputs_r+0x6e>
 8017a34:	898a      	ldrh	r2, [r1, #12]
 8017a36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a3a:	d026      	beq.n	8017a8a <__ssputs_r+0x6a>
 8017a3c:	6965      	ldr	r5, [r4, #20]
 8017a3e:	6909      	ldr	r1, [r1, #16]
 8017a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a44:	eba3 0901 	sub.w	r9, r3, r1
 8017a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a4c:	1c7b      	adds	r3, r7, #1
 8017a4e:	444b      	add	r3, r9
 8017a50:	106d      	asrs	r5, r5, #1
 8017a52:	429d      	cmp	r5, r3
 8017a54:	bf38      	it	cc
 8017a56:	461d      	movcc	r5, r3
 8017a58:	0553      	lsls	r3, r2, #21
 8017a5a:	d527      	bpl.n	8017aac <__ssputs_r+0x8c>
 8017a5c:	4629      	mov	r1, r5
 8017a5e:	f7ff ff53 	bl	8017908 <_malloc_r>
 8017a62:	4606      	mov	r6, r0
 8017a64:	b360      	cbz	r0, 8017ac0 <__ssputs_r+0xa0>
 8017a66:	6921      	ldr	r1, [r4, #16]
 8017a68:	464a      	mov	r2, r9
 8017a6a:	f7ff fed2 	bl	8017812 <memcpy>
 8017a6e:	89a3      	ldrh	r3, [r4, #12]
 8017a70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a78:	81a3      	strh	r3, [r4, #12]
 8017a7a:	6126      	str	r6, [r4, #16]
 8017a7c:	6165      	str	r5, [r4, #20]
 8017a7e:	444e      	add	r6, r9
 8017a80:	eba5 0509 	sub.w	r5, r5, r9
 8017a84:	6026      	str	r6, [r4, #0]
 8017a86:	60a5      	str	r5, [r4, #8]
 8017a88:	463e      	mov	r6, r7
 8017a8a:	42be      	cmp	r6, r7
 8017a8c:	d900      	bls.n	8017a90 <__ssputs_r+0x70>
 8017a8e:	463e      	mov	r6, r7
 8017a90:	6820      	ldr	r0, [r4, #0]
 8017a92:	4632      	mov	r2, r6
 8017a94:	4641      	mov	r1, r8
 8017a96:	f000 fcff 	bl	8018498 <memmove>
 8017a9a:	68a3      	ldr	r3, [r4, #8]
 8017a9c:	1b9b      	subs	r3, r3, r6
 8017a9e:	60a3      	str	r3, [r4, #8]
 8017aa0:	6823      	ldr	r3, [r4, #0]
 8017aa2:	4433      	add	r3, r6
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aac:	462a      	mov	r2, r5
 8017aae:	f000 fd3f 	bl	8018530 <_realloc_r>
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	2800      	cmp	r0, #0
 8017ab6:	d1e0      	bne.n	8017a7a <__ssputs_r+0x5a>
 8017ab8:	6921      	ldr	r1, [r4, #16]
 8017aba:	4650      	mov	r0, sl
 8017abc:	f7ff feb8 	bl	8017830 <_free_r>
 8017ac0:	230c      	movs	r3, #12
 8017ac2:	f8ca 3000 	str.w	r3, [sl]
 8017ac6:	89a3      	ldrh	r3, [r4, #12]
 8017ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017acc:	81a3      	strh	r3, [r4, #12]
 8017ace:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad2:	e7e9      	b.n	8017aa8 <__ssputs_r+0x88>

08017ad4 <_svfiprintf_r>:
 8017ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad8:	4698      	mov	r8, r3
 8017ada:	898b      	ldrh	r3, [r1, #12]
 8017adc:	061b      	lsls	r3, r3, #24
 8017ade:	b09d      	sub	sp, #116	; 0x74
 8017ae0:	4607      	mov	r7, r0
 8017ae2:	460d      	mov	r5, r1
 8017ae4:	4614      	mov	r4, r2
 8017ae6:	d50e      	bpl.n	8017b06 <_svfiprintf_r+0x32>
 8017ae8:	690b      	ldr	r3, [r1, #16]
 8017aea:	b963      	cbnz	r3, 8017b06 <_svfiprintf_r+0x32>
 8017aec:	2140      	movs	r1, #64	; 0x40
 8017aee:	f7ff ff0b 	bl	8017908 <_malloc_r>
 8017af2:	6028      	str	r0, [r5, #0]
 8017af4:	6128      	str	r0, [r5, #16]
 8017af6:	b920      	cbnz	r0, 8017b02 <_svfiprintf_r+0x2e>
 8017af8:	230c      	movs	r3, #12
 8017afa:	603b      	str	r3, [r7, #0]
 8017afc:	f04f 30ff 	mov.w	r0, #4294967295
 8017b00:	e0d0      	b.n	8017ca4 <_svfiprintf_r+0x1d0>
 8017b02:	2340      	movs	r3, #64	; 0x40
 8017b04:	616b      	str	r3, [r5, #20]
 8017b06:	2300      	movs	r3, #0
 8017b08:	9309      	str	r3, [sp, #36]	; 0x24
 8017b0a:	2320      	movs	r3, #32
 8017b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b14:	2330      	movs	r3, #48	; 0x30
 8017b16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017cbc <_svfiprintf_r+0x1e8>
 8017b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b1e:	f04f 0901 	mov.w	r9, #1
 8017b22:	4623      	mov	r3, r4
 8017b24:	469a      	mov	sl, r3
 8017b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b2a:	b10a      	cbz	r2, 8017b30 <_svfiprintf_r+0x5c>
 8017b2c:	2a25      	cmp	r2, #37	; 0x25
 8017b2e:	d1f9      	bne.n	8017b24 <_svfiprintf_r+0x50>
 8017b30:	ebba 0b04 	subs.w	fp, sl, r4
 8017b34:	d00b      	beq.n	8017b4e <_svfiprintf_r+0x7a>
 8017b36:	465b      	mov	r3, fp
 8017b38:	4622      	mov	r2, r4
 8017b3a:	4629      	mov	r1, r5
 8017b3c:	4638      	mov	r0, r7
 8017b3e:	f7ff ff6f 	bl	8017a20 <__ssputs_r>
 8017b42:	3001      	adds	r0, #1
 8017b44:	f000 80a9 	beq.w	8017c9a <_svfiprintf_r+0x1c6>
 8017b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b4a:	445a      	add	r2, fp
 8017b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	f000 80a1 	beq.w	8017c9a <_svfiprintf_r+0x1c6>
 8017b58:	2300      	movs	r3, #0
 8017b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b62:	f10a 0a01 	add.w	sl, sl, #1
 8017b66:	9304      	str	r3, [sp, #16]
 8017b68:	9307      	str	r3, [sp, #28]
 8017b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8017b70:	4654      	mov	r4, sl
 8017b72:	2205      	movs	r2, #5
 8017b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b78:	4850      	ldr	r0, [pc, #320]	; (8017cbc <_svfiprintf_r+0x1e8>)
 8017b7a:	f7e8 fb39 	bl	80001f0 <memchr>
 8017b7e:	9a04      	ldr	r2, [sp, #16]
 8017b80:	b9d8      	cbnz	r0, 8017bba <_svfiprintf_r+0xe6>
 8017b82:	06d0      	lsls	r0, r2, #27
 8017b84:	bf44      	itt	mi
 8017b86:	2320      	movmi	r3, #32
 8017b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b8c:	0711      	lsls	r1, r2, #28
 8017b8e:	bf44      	itt	mi
 8017b90:	232b      	movmi	r3, #43	; 0x2b
 8017b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b96:	f89a 3000 	ldrb.w	r3, [sl]
 8017b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b9c:	d015      	beq.n	8017bca <_svfiprintf_r+0xf6>
 8017b9e:	9a07      	ldr	r2, [sp, #28]
 8017ba0:	4654      	mov	r4, sl
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	f04f 0c0a 	mov.w	ip, #10
 8017ba8:	4621      	mov	r1, r4
 8017baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bae:	3b30      	subs	r3, #48	; 0x30
 8017bb0:	2b09      	cmp	r3, #9
 8017bb2:	d94d      	bls.n	8017c50 <_svfiprintf_r+0x17c>
 8017bb4:	b1b0      	cbz	r0, 8017be4 <_svfiprintf_r+0x110>
 8017bb6:	9207      	str	r2, [sp, #28]
 8017bb8:	e014      	b.n	8017be4 <_svfiprintf_r+0x110>
 8017bba:	eba0 0308 	sub.w	r3, r0, r8
 8017bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	9304      	str	r3, [sp, #16]
 8017bc6:	46a2      	mov	sl, r4
 8017bc8:	e7d2      	b.n	8017b70 <_svfiprintf_r+0x9c>
 8017bca:	9b03      	ldr	r3, [sp, #12]
 8017bcc:	1d19      	adds	r1, r3, #4
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	9103      	str	r1, [sp, #12]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	bfbb      	ittet	lt
 8017bd6:	425b      	neglt	r3, r3
 8017bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8017bdc:	9307      	strge	r3, [sp, #28]
 8017bde:	9307      	strlt	r3, [sp, #28]
 8017be0:	bfb8      	it	lt
 8017be2:	9204      	strlt	r2, [sp, #16]
 8017be4:	7823      	ldrb	r3, [r4, #0]
 8017be6:	2b2e      	cmp	r3, #46	; 0x2e
 8017be8:	d10c      	bne.n	8017c04 <_svfiprintf_r+0x130>
 8017bea:	7863      	ldrb	r3, [r4, #1]
 8017bec:	2b2a      	cmp	r3, #42	; 0x2a
 8017bee:	d134      	bne.n	8017c5a <_svfiprintf_r+0x186>
 8017bf0:	9b03      	ldr	r3, [sp, #12]
 8017bf2:	1d1a      	adds	r2, r3, #4
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	9203      	str	r2, [sp, #12]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	bfb8      	it	lt
 8017bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c00:	3402      	adds	r4, #2
 8017c02:	9305      	str	r3, [sp, #20]
 8017c04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017ccc <_svfiprintf_r+0x1f8>
 8017c08:	7821      	ldrb	r1, [r4, #0]
 8017c0a:	2203      	movs	r2, #3
 8017c0c:	4650      	mov	r0, sl
 8017c0e:	f7e8 faef 	bl	80001f0 <memchr>
 8017c12:	b138      	cbz	r0, 8017c24 <_svfiprintf_r+0x150>
 8017c14:	9b04      	ldr	r3, [sp, #16]
 8017c16:	eba0 000a 	sub.w	r0, r0, sl
 8017c1a:	2240      	movs	r2, #64	; 0x40
 8017c1c:	4082      	lsls	r2, r0
 8017c1e:	4313      	orrs	r3, r2
 8017c20:	3401      	adds	r4, #1
 8017c22:	9304      	str	r3, [sp, #16]
 8017c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c28:	4825      	ldr	r0, [pc, #148]	; (8017cc0 <_svfiprintf_r+0x1ec>)
 8017c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c2e:	2206      	movs	r2, #6
 8017c30:	f7e8 fade 	bl	80001f0 <memchr>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	d038      	beq.n	8017caa <_svfiprintf_r+0x1d6>
 8017c38:	4b22      	ldr	r3, [pc, #136]	; (8017cc4 <_svfiprintf_r+0x1f0>)
 8017c3a:	bb1b      	cbnz	r3, 8017c84 <_svfiprintf_r+0x1b0>
 8017c3c:	9b03      	ldr	r3, [sp, #12]
 8017c3e:	3307      	adds	r3, #7
 8017c40:	f023 0307 	bic.w	r3, r3, #7
 8017c44:	3308      	adds	r3, #8
 8017c46:	9303      	str	r3, [sp, #12]
 8017c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c4a:	4433      	add	r3, r6
 8017c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c4e:	e768      	b.n	8017b22 <_svfiprintf_r+0x4e>
 8017c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c54:	460c      	mov	r4, r1
 8017c56:	2001      	movs	r0, #1
 8017c58:	e7a6      	b.n	8017ba8 <_svfiprintf_r+0xd4>
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	3401      	adds	r4, #1
 8017c5e:	9305      	str	r3, [sp, #20]
 8017c60:	4619      	mov	r1, r3
 8017c62:	f04f 0c0a 	mov.w	ip, #10
 8017c66:	4620      	mov	r0, r4
 8017c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c6c:	3a30      	subs	r2, #48	; 0x30
 8017c6e:	2a09      	cmp	r2, #9
 8017c70:	d903      	bls.n	8017c7a <_svfiprintf_r+0x1a6>
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d0c6      	beq.n	8017c04 <_svfiprintf_r+0x130>
 8017c76:	9105      	str	r1, [sp, #20]
 8017c78:	e7c4      	b.n	8017c04 <_svfiprintf_r+0x130>
 8017c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c7e:	4604      	mov	r4, r0
 8017c80:	2301      	movs	r3, #1
 8017c82:	e7f0      	b.n	8017c66 <_svfiprintf_r+0x192>
 8017c84:	ab03      	add	r3, sp, #12
 8017c86:	9300      	str	r3, [sp, #0]
 8017c88:	462a      	mov	r2, r5
 8017c8a:	4b0f      	ldr	r3, [pc, #60]	; (8017cc8 <_svfiprintf_r+0x1f4>)
 8017c8c:	a904      	add	r1, sp, #16
 8017c8e:	4638      	mov	r0, r7
 8017c90:	f3af 8000 	nop.w
 8017c94:	1c42      	adds	r2, r0, #1
 8017c96:	4606      	mov	r6, r0
 8017c98:	d1d6      	bne.n	8017c48 <_svfiprintf_r+0x174>
 8017c9a:	89ab      	ldrh	r3, [r5, #12]
 8017c9c:	065b      	lsls	r3, r3, #25
 8017c9e:	f53f af2d 	bmi.w	8017afc <_svfiprintf_r+0x28>
 8017ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ca4:	b01d      	add	sp, #116	; 0x74
 8017ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017caa:	ab03      	add	r3, sp, #12
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	462a      	mov	r2, r5
 8017cb0:	4b05      	ldr	r3, [pc, #20]	; (8017cc8 <_svfiprintf_r+0x1f4>)
 8017cb2:	a904      	add	r1, sp, #16
 8017cb4:	4638      	mov	r0, r7
 8017cb6:	f000 f9bd 	bl	8018034 <_printf_i>
 8017cba:	e7eb      	b.n	8017c94 <_svfiprintf_r+0x1c0>
 8017cbc:	0801b624 	.word	0x0801b624
 8017cc0:	0801b62e 	.word	0x0801b62e
 8017cc4:	00000000 	.word	0x00000000
 8017cc8:	08017a21 	.word	0x08017a21
 8017ccc:	0801b62a 	.word	0x0801b62a

08017cd0 <__sfputc_r>:
 8017cd0:	6893      	ldr	r3, [r2, #8]
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	b410      	push	{r4}
 8017cd8:	6093      	str	r3, [r2, #8]
 8017cda:	da08      	bge.n	8017cee <__sfputc_r+0x1e>
 8017cdc:	6994      	ldr	r4, [r2, #24]
 8017cde:	42a3      	cmp	r3, r4
 8017ce0:	db01      	blt.n	8017ce6 <__sfputc_r+0x16>
 8017ce2:	290a      	cmp	r1, #10
 8017ce4:	d103      	bne.n	8017cee <__sfputc_r+0x1e>
 8017ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cea:	f7ff bc6d 	b.w	80175c8 <__swbuf_r>
 8017cee:	6813      	ldr	r3, [r2, #0]
 8017cf0:	1c58      	adds	r0, r3, #1
 8017cf2:	6010      	str	r0, [r2, #0]
 8017cf4:	7019      	strb	r1, [r3, #0]
 8017cf6:	4608      	mov	r0, r1
 8017cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cfc:	4770      	bx	lr

08017cfe <__sfputs_r>:
 8017cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d00:	4606      	mov	r6, r0
 8017d02:	460f      	mov	r7, r1
 8017d04:	4614      	mov	r4, r2
 8017d06:	18d5      	adds	r5, r2, r3
 8017d08:	42ac      	cmp	r4, r5
 8017d0a:	d101      	bne.n	8017d10 <__sfputs_r+0x12>
 8017d0c:	2000      	movs	r0, #0
 8017d0e:	e007      	b.n	8017d20 <__sfputs_r+0x22>
 8017d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d14:	463a      	mov	r2, r7
 8017d16:	4630      	mov	r0, r6
 8017d18:	f7ff ffda 	bl	8017cd0 <__sfputc_r>
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d1f3      	bne.n	8017d08 <__sfputs_r+0xa>
 8017d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d24 <_vfiprintf_r>:
 8017d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d28:	460d      	mov	r5, r1
 8017d2a:	b09d      	sub	sp, #116	; 0x74
 8017d2c:	4614      	mov	r4, r2
 8017d2e:	4698      	mov	r8, r3
 8017d30:	4606      	mov	r6, r0
 8017d32:	b118      	cbz	r0, 8017d3c <_vfiprintf_r+0x18>
 8017d34:	6a03      	ldr	r3, [r0, #32]
 8017d36:	b90b      	cbnz	r3, 8017d3c <_vfiprintf_r+0x18>
 8017d38:	f7ff fb06 	bl	8017348 <__sinit>
 8017d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d3e:	07d9      	lsls	r1, r3, #31
 8017d40:	d405      	bmi.n	8017d4e <_vfiprintf_r+0x2a>
 8017d42:	89ab      	ldrh	r3, [r5, #12]
 8017d44:	059a      	lsls	r2, r3, #22
 8017d46:	d402      	bmi.n	8017d4e <_vfiprintf_r+0x2a>
 8017d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d4a:	f7ff fd60 	bl	801780e <__retarget_lock_acquire_recursive>
 8017d4e:	89ab      	ldrh	r3, [r5, #12]
 8017d50:	071b      	lsls	r3, r3, #28
 8017d52:	d501      	bpl.n	8017d58 <_vfiprintf_r+0x34>
 8017d54:	692b      	ldr	r3, [r5, #16]
 8017d56:	b99b      	cbnz	r3, 8017d80 <_vfiprintf_r+0x5c>
 8017d58:	4629      	mov	r1, r5
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f7ff fc72 	bl	8017644 <__swsetup_r>
 8017d60:	b170      	cbz	r0, 8017d80 <_vfiprintf_r+0x5c>
 8017d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d64:	07dc      	lsls	r4, r3, #31
 8017d66:	d504      	bpl.n	8017d72 <_vfiprintf_r+0x4e>
 8017d68:	f04f 30ff 	mov.w	r0, #4294967295
 8017d6c:	b01d      	add	sp, #116	; 0x74
 8017d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d72:	89ab      	ldrh	r3, [r5, #12]
 8017d74:	0598      	lsls	r0, r3, #22
 8017d76:	d4f7      	bmi.n	8017d68 <_vfiprintf_r+0x44>
 8017d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d7a:	f7ff fd49 	bl	8017810 <__retarget_lock_release_recursive>
 8017d7e:	e7f3      	b.n	8017d68 <_vfiprintf_r+0x44>
 8017d80:	2300      	movs	r3, #0
 8017d82:	9309      	str	r3, [sp, #36]	; 0x24
 8017d84:	2320      	movs	r3, #32
 8017d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d8e:	2330      	movs	r3, #48	; 0x30
 8017d90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017f44 <_vfiprintf_r+0x220>
 8017d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d98:	f04f 0901 	mov.w	r9, #1
 8017d9c:	4623      	mov	r3, r4
 8017d9e:	469a      	mov	sl, r3
 8017da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017da4:	b10a      	cbz	r2, 8017daa <_vfiprintf_r+0x86>
 8017da6:	2a25      	cmp	r2, #37	; 0x25
 8017da8:	d1f9      	bne.n	8017d9e <_vfiprintf_r+0x7a>
 8017daa:	ebba 0b04 	subs.w	fp, sl, r4
 8017dae:	d00b      	beq.n	8017dc8 <_vfiprintf_r+0xa4>
 8017db0:	465b      	mov	r3, fp
 8017db2:	4622      	mov	r2, r4
 8017db4:	4629      	mov	r1, r5
 8017db6:	4630      	mov	r0, r6
 8017db8:	f7ff ffa1 	bl	8017cfe <__sfputs_r>
 8017dbc:	3001      	adds	r0, #1
 8017dbe:	f000 80a9 	beq.w	8017f14 <_vfiprintf_r+0x1f0>
 8017dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dc4:	445a      	add	r2, fp
 8017dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8017dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	f000 80a1 	beq.w	8017f14 <_vfiprintf_r+0x1f0>
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8017dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ddc:	f10a 0a01 	add.w	sl, sl, #1
 8017de0:	9304      	str	r3, [sp, #16]
 8017de2:	9307      	str	r3, [sp, #28]
 8017de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017de8:	931a      	str	r3, [sp, #104]	; 0x68
 8017dea:	4654      	mov	r4, sl
 8017dec:	2205      	movs	r2, #5
 8017dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017df2:	4854      	ldr	r0, [pc, #336]	; (8017f44 <_vfiprintf_r+0x220>)
 8017df4:	f7e8 f9fc 	bl	80001f0 <memchr>
 8017df8:	9a04      	ldr	r2, [sp, #16]
 8017dfa:	b9d8      	cbnz	r0, 8017e34 <_vfiprintf_r+0x110>
 8017dfc:	06d1      	lsls	r1, r2, #27
 8017dfe:	bf44      	itt	mi
 8017e00:	2320      	movmi	r3, #32
 8017e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e06:	0713      	lsls	r3, r2, #28
 8017e08:	bf44      	itt	mi
 8017e0a:	232b      	movmi	r3, #43	; 0x2b
 8017e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e10:	f89a 3000 	ldrb.w	r3, [sl]
 8017e14:	2b2a      	cmp	r3, #42	; 0x2a
 8017e16:	d015      	beq.n	8017e44 <_vfiprintf_r+0x120>
 8017e18:	9a07      	ldr	r2, [sp, #28]
 8017e1a:	4654      	mov	r4, sl
 8017e1c:	2000      	movs	r0, #0
 8017e1e:	f04f 0c0a 	mov.w	ip, #10
 8017e22:	4621      	mov	r1, r4
 8017e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e28:	3b30      	subs	r3, #48	; 0x30
 8017e2a:	2b09      	cmp	r3, #9
 8017e2c:	d94d      	bls.n	8017eca <_vfiprintf_r+0x1a6>
 8017e2e:	b1b0      	cbz	r0, 8017e5e <_vfiprintf_r+0x13a>
 8017e30:	9207      	str	r2, [sp, #28]
 8017e32:	e014      	b.n	8017e5e <_vfiprintf_r+0x13a>
 8017e34:	eba0 0308 	sub.w	r3, r0, r8
 8017e38:	fa09 f303 	lsl.w	r3, r9, r3
 8017e3c:	4313      	orrs	r3, r2
 8017e3e:	9304      	str	r3, [sp, #16]
 8017e40:	46a2      	mov	sl, r4
 8017e42:	e7d2      	b.n	8017dea <_vfiprintf_r+0xc6>
 8017e44:	9b03      	ldr	r3, [sp, #12]
 8017e46:	1d19      	adds	r1, r3, #4
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	9103      	str	r1, [sp, #12]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	bfbb      	ittet	lt
 8017e50:	425b      	neglt	r3, r3
 8017e52:	f042 0202 	orrlt.w	r2, r2, #2
 8017e56:	9307      	strge	r3, [sp, #28]
 8017e58:	9307      	strlt	r3, [sp, #28]
 8017e5a:	bfb8      	it	lt
 8017e5c:	9204      	strlt	r2, [sp, #16]
 8017e5e:	7823      	ldrb	r3, [r4, #0]
 8017e60:	2b2e      	cmp	r3, #46	; 0x2e
 8017e62:	d10c      	bne.n	8017e7e <_vfiprintf_r+0x15a>
 8017e64:	7863      	ldrb	r3, [r4, #1]
 8017e66:	2b2a      	cmp	r3, #42	; 0x2a
 8017e68:	d134      	bne.n	8017ed4 <_vfiprintf_r+0x1b0>
 8017e6a:	9b03      	ldr	r3, [sp, #12]
 8017e6c:	1d1a      	adds	r2, r3, #4
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	9203      	str	r2, [sp, #12]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	bfb8      	it	lt
 8017e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e7a:	3402      	adds	r4, #2
 8017e7c:	9305      	str	r3, [sp, #20]
 8017e7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017f54 <_vfiprintf_r+0x230>
 8017e82:	7821      	ldrb	r1, [r4, #0]
 8017e84:	2203      	movs	r2, #3
 8017e86:	4650      	mov	r0, sl
 8017e88:	f7e8 f9b2 	bl	80001f0 <memchr>
 8017e8c:	b138      	cbz	r0, 8017e9e <_vfiprintf_r+0x17a>
 8017e8e:	9b04      	ldr	r3, [sp, #16]
 8017e90:	eba0 000a 	sub.w	r0, r0, sl
 8017e94:	2240      	movs	r2, #64	; 0x40
 8017e96:	4082      	lsls	r2, r0
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	3401      	adds	r4, #1
 8017e9c:	9304      	str	r3, [sp, #16]
 8017e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ea2:	4829      	ldr	r0, [pc, #164]	; (8017f48 <_vfiprintf_r+0x224>)
 8017ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ea8:	2206      	movs	r2, #6
 8017eaa:	f7e8 f9a1 	bl	80001f0 <memchr>
 8017eae:	2800      	cmp	r0, #0
 8017eb0:	d03f      	beq.n	8017f32 <_vfiprintf_r+0x20e>
 8017eb2:	4b26      	ldr	r3, [pc, #152]	; (8017f4c <_vfiprintf_r+0x228>)
 8017eb4:	bb1b      	cbnz	r3, 8017efe <_vfiprintf_r+0x1da>
 8017eb6:	9b03      	ldr	r3, [sp, #12]
 8017eb8:	3307      	adds	r3, #7
 8017eba:	f023 0307 	bic.w	r3, r3, #7
 8017ebe:	3308      	adds	r3, #8
 8017ec0:	9303      	str	r3, [sp, #12]
 8017ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec4:	443b      	add	r3, r7
 8017ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec8:	e768      	b.n	8017d9c <_vfiprintf_r+0x78>
 8017eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ece:	460c      	mov	r4, r1
 8017ed0:	2001      	movs	r0, #1
 8017ed2:	e7a6      	b.n	8017e22 <_vfiprintf_r+0xfe>
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	3401      	adds	r4, #1
 8017ed8:	9305      	str	r3, [sp, #20]
 8017eda:	4619      	mov	r1, r3
 8017edc:	f04f 0c0a 	mov.w	ip, #10
 8017ee0:	4620      	mov	r0, r4
 8017ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ee6:	3a30      	subs	r2, #48	; 0x30
 8017ee8:	2a09      	cmp	r2, #9
 8017eea:	d903      	bls.n	8017ef4 <_vfiprintf_r+0x1d0>
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d0c6      	beq.n	8017e7e <_vfiprintf_r+0x15a>
 8017ef0:	9105      	str	r1, [sp, #20]
 8017ef2:	e7c4      	b.n	8017e7e <_vfiprintf_r+0x15a>
 8017ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ef8:	4604      	mov	r4, r0
 8017efa:	2301      	movs	r3, #1
 8017efc:	e7f0      	b.n	8017ee0 <_vfiprintf_r+0x1bc>
 8017efe:	ab03      	add	r3, sp, #12
 8017f00:	9300      	str	r3, [sp, #0]
 8017f02:	462a      	mov	r2, r5
 8017f04:	4b12      	ldr	r3, [pc, #72]	; (8017f50 <_vfiprintf_r+0x22c>)
 8017f06:	a904      	add	r1, sp, #16
 8017f08:	4630      	mov	r0, r6
 8017f0a:	f3af 8000 	nop.w
 8017f0e:	4607      	mov	r7, r0
 8017f10:	1c78      	adds	r0, r7, #1
 8017f12:	d1d6      	bne.n	8017ec2 <_vfiprintf_r+0x19e>
 8017f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f16:	07d9      	lsls	r1, r3, #31
 8017f18:	d405      	bmi.n	8017f26 <_vfiprintf_r+0x202>
 8017f1a:	89ab      	ldrh	r3, [r5, #12]
 8017f1c:	059a      	lsls	r2, r3, #22
 8017f1e:	d402      	bmi.n	8017f26 <_vfiprintf_r+0x202>
 8017f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f22:	f7ff fc75 	bl	8017810 <__retarget_lock_release_recursive>
 8017f26:	89ab      	ldrh	r3, [r5, #12]
 8017f28:	065b      	lsls	r3, r3, #25
 8017f2a:	f53f af1d 	bmi.w	8017d68 <_vfiprintf_r+0x44>
 8017f2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f30:	e71c      	b.n	8017d6c <_vfiprintf_r+0x48>
 8017f32:	ab03      	add	r3, sp, #12
 8017f34:	9300      	str	r3, [sp, #0]
 8017f36:	462a      	mov	r2, r5
 8017f38:	4b05      	ldr	r3, [pc, #20]	; (8017f50 <_vfiprintf_r+0x22c>)
 8017f3a:	a904      	add	r1, sp, #16
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	f000 f879 	bl	8018034 <_printf_i>
 8017f42:	e7e4      	b.n	8017f0e <_vfiprintf_r+0x1ea>
 8017f44:	0801b624 	.word	0x0801b624
 8017f48:	0801b62e 	.word	0x0801b62e
 8017f4c:	00000000 	.word	0x00000000
 8017f50:	08017cff 	.word	0x08017cff
 8017f54:	0801b62a 	.word	0x0801b62a

08017f58 <_printf_common>:
 8017f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f5c:	4616      	mov	r6, r2
 8017f5e:	4699      	mov	r9, r3
 8017f60:	688a      	ldr	r2, [r1, #8]
 8017f62:	690b      	ldr	r3, [r1, #16]
 8017f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	bfb8      	it	lt
 8017f6c:	4613      	movlt	r3, r2
 8017f6e:	6033      	str	r3, [r6, #0]
 8017f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f74:	4607      	mov	r7, r0
 8017f76:	460c      	mov	r4, r1
 8017f78:	b10a      	cbz	r2, 8017f7e <_printf_common+0x26>
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	6033      	str	r3, [r6, #0]
 8017f7e:	6823      	ldr	r3, [r4, #0]
 8017f80:	0699      	lsls	r1, r3, #26
 8017f82:	bf42      	ittt	mi
 8017f84:	6833      	ldrmi	r3, [r6, #0]
 8017f86:	3302      	addmi	r3, #2
 8017f88:	6033      	strmi	r3, [r6, #0]
 8017f8a:	6825      	ldr	r5, [r4, #0]
 8017f8c:	f015 0506 	ands.w	r5, r5, #6
 8017f90:	d106      	bne.n	8017fa0 <_printf_common+0x48>
 8017f92:	f104 0a19 	add.w	sl, r4, #25
 8017f96:	68e3      	ldr	r3, [r4, #12]
 8017f98:	6832      	ldr	r2, [r6, #0]
 8017f9a:	1a9b      	subs	r3, r3, r2
 8017f9c:	42ab      	cmp	r3, r5
 8017f9e:	dc26      	bgt.n	8017fee <_printf_common+0x96>
 8017fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017fa4:	1e13      	subs	r3, r2, #0
 8017fa6:	6822      	ldr	r2, [r4, #0]
 8017fa8:	bf18      	it	ne
 8017faa:	2301      	movne	r3, #1
 8017fac:	0692      	lsls	r2, r2, #26
 8017fae:	d42b      	bmi.n	8018008 <_printf_common+0xb0>
 8017fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017fb4:	4649      	mov	r1, r9
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	47c0      	blx	r8
 8017fba:	3001      	adds	r0, #1
 8017fbc:	d01e      	beq.n	8017ffc <_printf_common+0xa4>
 8017fbe:	6823      	ldr	r3, [r4, #0]
 8017fc0:	6922      	ldr	r2, [r4, #16]
 8017fc2:	f003 0306 	and.w	r3, r3, #6
 8017fc6:	2b04      	cmp	r3, #4
 8017fc8:	bf02      	ittt	eq
 8017fca:	68e5      	ldreq	r5, [r4, #12]
 8017fcc:	6833      	ldreq	r3, [r6, #0]
 8017fce:	1aed      	subeq	r5, r5, r3
 8017fd0:	68a3      	ldr	r3, [r4, #8]
 8017fd2:	bf0c      	ite	eq
 8017fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fd8:	2500      	movne	r5, #0
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	bfc4      	itt	gt
 8017fde:	1a9b      	subgt	r3, r3, r2
 8017fe0:	18ed      	addgt	r5, r5, r3
 8017fe2:	2600      	movs	r6, #0
 8017fe4:	341a      	adds	r4, #26
 8017fe6:	42b5      	cmp	r5, r6
 8017fe8:	d11a      	bne.n	8018020 <_printf_common+0xc8>
 8017fea:	2000      	movs	r0, #0
 8017fec:	e008      	b.n	8018000 <_printf_common+0xa8>
 8017fee:	2301      	movs	r3, #1
 8017ff0:	4652      	mov	r2, sl
 8017ff2:	4649      	mov	r1, r9
 8017ff4:	4638      	mov	r0, r7
 8017ff6:	47c0      	blx	r8
 8017ff8:	3001      	adds	r0, #1
 8017ffa:	d103      	bne.n	8018004 <_printf_common+0xac>
 8017ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8018000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018004:	3501      	adds	r5, #1
 8018006:	e7c6      	b.n	8017f96 <_printf_common+0x3e>
 8018008:	18e1      	adds	r1, r4, r3
 801800a:	1c5a      	adds	r2, r3, #1
 801800c:	2030      	movs	r0, #48	; 0x30
 801800e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018012:	4422      	add	r2, r4
 8018014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801801c:	3302      	adds	r3, #2
 801801e:	e7c7      	b.n	8017fb0 <_printf_common+0x58>
 8018020:	2301      	movs	r3, #1
 8018022:	4622      	mov	r2, r4
 8018024:	4649      	mov	r1, r9
 8018026:	4638      	mov	r0, r7
 8018028:	47c0      	blx	r8
 801802a:	3001      	adds	r0, #1
 801802c:	d0e6      	beq.n	8017ffc <_printf_common+0xa4>
 801802e:	3601      	adds	r6, #1
 8018030:	e7d9      	b.n	8017fe6 <_printf_common+0x8e>
	...

08018034 <_printf_i>:
 8018034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018038:	7e0f      	ldrb	r7, [r1, #24]
 801803a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801803c:	2f78      	cmp	r7, #120	; 0x78
 801803e:	4691      	mov	r9, r2
 8018040:	4680      	mov	r8, r0
 8018042:	460c      	mov	r4, r1
 8018044:	469a      	mov	sl, r3
 8018046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801804a:	d807      	bhi.n	801805c <_printf_i+0x28>
 801804c:	2f62      	cmp	r7, #98	; 0x62
 801804e:	d80a      	bhi.n	8018066 <_printf_i+0x32>
 8018050:	2f00      	cmp	r7, #0
 8018052:	f000 80d4 	beq.w	80181fe <_printf_i+0x1ca>
 8018056:	2f58      	cmp	r7, #88	; 0x58
 8018058:	f000 80c0 	beq.w	80181dc <_printf_i+0x1a8>
 801805c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018064:	e03a      	b.n	80180dc <_printf_i+0xa8>
 8018066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801806a:	2b15      	cmp	r3, #21
 801806c:	d8f6      	bhi.n	801805c <_printf_i+0x28>
 801806e:	a101      	add	r1, pc, #4	; (adr r1, 8018074 <_printf_i+0x40>)
 8018070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018074:	080180cd 	.word	0x080180cd
 8018078:	080180e1 	.word	0x080180e1
 801807c:	0801805d 	.word	0x0801805d
 8018080:	0801805d 	.word	0x0801805d
 8018084:	0801805d 	.word	0x0801805d
 8018088:	0801805d 	.word	0x0801805d
 801808c:	080180e1 	.word	0x080180e1
 8018090:	0801805d 	.word	0x0801805d
 8018094:	0801805d 	.word	0x0801805d
 8018098:	0801805d 	.word	0x0801805d
 801809c:	0801805d 	.word	0x0801805d
 80180a0:	080181e5 	.word	0x080181e5
 80180a4:	0801810d 	.word	0x0801810d
 80180a8:	0801819f 	.word	0x0801819f
 80180ac:	0801805d 	.word	0x0801805d
 80180b0:	0801805d 	.word	0x0801805d
 80180b4:	08018207 	.word	0x08018207
 80180b8:	0801805d 	.word	0x0801805d
 80180bc:	0801810d 	.word	0x0801810d
 80180c0:	0801805d 	.word	0x0801805d
 80180c4:	0801805d 	.word	0x0801805d
 80180c8:	080181a7 	.word	0x080181a7
 80180cc:	682b      	ldr	r3, [r5, #0]
 80180ce:	1d1a      	adds	r2, r3, #4
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	602a      	str	r2, [r5, #0]
 80180d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180dc:	2301      	movs	r3, #1
 80180de:	e09f      	b.n	8018220 <_printf_i+0x1ec>
 80180e0:	6820      	ldr	r0, [r4, #0]
 80180e2:	682b      	ldr	r3, [r5, #0]
 80180e4:	0607      	lsls	r7, r0, #24
 80180e6:	f103 0104 	add.w	r1, r3, #4
 80180ea:	6029      	str	r1, [r5, #0]
 80180ec:	d501      	bpl.n	80180f2 <_printf_i+0xbe>
 80180ee:	681e      	ldr	r6, [r3, #0]
 80180f0:	e003      	b.n	80180fa <_printf_i+0xc6>
 80180f2:	0646      	lsls	r6, r0, #25
 80180f4:	d5fb      	bpl.n	80180ee <_printf_i+0xba>
 80180f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80180fa:	2e00      	cmp	r6, #0
 80180fc:	da03      	bge.n	8018106 <_printf_i+0xd2>
 80180fe:	232d      	movs	r3, #45	; 0x2d
 8018100:	4276      	negs	r6, r6
 8018102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018106:	485a      	ldr	r0, [pc, #360]	; (8018270 <_printf_i+0x23c>)
 8018108:	230a      	movs	r3, #10
 801810a:	e012      	b.n	8018132 <_printf_i+0xfe>
 801810c:	682b      	ldr	r3, [r5, #0]
 801810e:	6820      	ldr	r0, [r4, #0]
 8018110:	1d19      	adds	r1, r3, #4
 8018112:	6029      	str	r1, [r5, #0]
 8018114:	0605      	lsls	r5, r0, #24
 8018116:	d501      	bpl.n	801811c <_printf_i+0xe8>
 8018118:	681e      	ldr	r6, [r3, #0]
 801811a:	e002      	b.n	8018122 <_printf_i+0xee>
 801811c:	0641      	lsls	r1, r0, #25
 801811e:	d5fb      	bpl.n	8018118 <_printf_i+0xe4>
 8018120:	881e      	ldrh	r6, [r3, #0]
 8018122:	4853      	ldr	r0, [pc, #332]	; (8018270 <_printf_i+0x23c>)
 8018124:	2f6f      	cmp	r7, #111	; 0x6f
 8018126:	bf0c      	ite	eq
 8018128:	2308      	moveq	r3, #8
 801812a:	230a      	movne	r3, #10
 801812c:	2100      	movs	r1, #0
 801812e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018132:	6865      	ldr	r5, [r4, #4]
 8018134:	60a5      	str	r5, [r4, #8]
 8018136:	2d00      	cmp	r5, #0
 8018138:	bfa2      	ittt	ge
 801813a:	6821      	ldrge	r1, [r4, #0]
 801813c:	f021 0104 	bicge.w	r1, r1, #4
 8018140:	6021      	strge	r1, [r4, #0]
 8018142:	b90e      	cbnz	r6, 8018148 <_printf_i+0x114>
 8018144:	2d00      	cmp	r5, #0
 8018146:	d04b      	beq.n	80181e0 <_printf_i+0x1ac>
 8018148:	4615      	mov	r5, r2
 801814a:	fbb6 f1f3 	udiv	r1, r6, r3
 801814e:	fb03 6711 	mls	r7, r3, r1, r6
 8018152:	5dc7      	ldrb	r7, [r0, r7]
 8018154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018158:	4637      	mov	r7, r6
 801815a:	42bb      	cmp	r3, r7
 801815c:	460e      	mov	r6, r1
 801815e:	d9f4      	bls.n	801814a <_printf_i+0x116>
 8018160:	2b08      	cmp	r3, #8
 8018162:	d10b      	bne.n	801817c <_printf_i+0x148>
 8018164:	6823      	ldr	r3, [r4, #0]
 8018166:	07de      	lsls	r6, r3, #31
 8018168:	d508      	bpl.n	801817c <_printf_i+0x148>
 801816a:	6923      	ldr	r3, [r4, #16]
 801816c:	6861      	ldr	r1, [r4, #4]
 801816e:	4299      	cmp	r1, r3
 8018170:	bfde      	ittt	le
 8018172:	2330      	movle	r3, #48	; 0x30
 8018174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018178:	f105 35ff 	addle.w	r5, r5, #4294967295
 801817c:	1b52      	subs	r2, r2, r5
 801817e:	6122      	str	r2, [r4, #16]
 8018180:	f8cd a000 	str.w	sl, [sp]
 8018184:	464b      	mov	r3, r9
 8018186:	aa03      	add	r2, sp, #12
 8018188:	4621      	mov	r1, r4
 801818a:	4640      	mov	r0, r8
 801818c:	f7ff fee4 	bl	8017f58 <_printf_common>
 8018190:	3001      	adds	r0, #1
 8018192:	d14a      	bne.n	801822a <_printf_i+0x1f6>
 8018194:	f04f 30ff 	mov.w	r0, #4294967295
 8018198:	b004      	add	sp, #16
 801819a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801819e:	6823      	ldr	r3, [r4, #0]
 80181a0:	f043 0320 	orr.w	r3, r3, #32
 80181a4:	6023      	str	r3, [r4, #0]
 80181a6:	4833      	ldr	r0, [pc, #204]	; (8018274 <_printf_i+0x240>)
 80181a8:	2778      	movs	r7, #120	; 0x78
 80181aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	6829      	ldr	r1, [r5, #0]
 80181b2:	061f      	lsls	r7, r3, #24
 80181b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80181b8:	d402      	bmi.n	80181c0 <_printf_i+0x18c>
 80181ba:	065f      	lsls	r7, r3, #25
 80181bc:	bf48      	it	mi
 80181be:	b2b6      	uxthmi	r6, r6
 80181c0:	07df      	lsls	r7, r3, #31
 80181c2:	bf48      	it	mi
 80181c4:	f043 0320 	orrmi.w	r3, r3, #32
 80181c8:	6029      	str	r1, [r5, #0]
 80181ca:	bf48      	it	mi
 80181cc:	6023      	strmi	r3, [r4, #0]
 80181ce:	b91e      	cbnz	r6, 80181d8 <_printf_i+0x1a4>
 80181d0:	6823      	ldr	r3, [r4, #0]
 80181d2:	f023 0320 	bic.w	r3, r3, #32
 80181d6:	6023      	str	r3, [r4, #0]
 80181d8:	2310      	movs	r3, #16
 80181da:	e7a7      	b.n	801812c <_printf_i+0xf8>
 80181dc:	4824      	ldr	r0, [pc, #144]	; (8018270 <_printf_i+0x23c>)
 80181de:	e7e4      	b.n	80181aa <_printf_i+0x176>
 80181e0:	4615      	mov	r5, r2
 80181e2:	e7bd      	b.n	8018160 <_printf_i+0x12c>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	6826      	ldr	r6, [r4, #0]
 80181e8:	6961      	ldr	r1, [r4, #20]
 80181ea:	1d18      	adds	r0, r3, #4
 80181ec:	6028      	str	r0, [r5, #0]
 80181ee:	0635      	lsls	r5, r6, #24
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	d501      	bpl.n	80181f8 <_printf_i+0x1c4>
 80181f4:	6019      	str	r1, [r3, #0]
 80181f6:	e002      	b.n	80181fe <_printf_i+0x1ca>
 80181f8:	0670      	lsls	r0, r6, #25
 80181fa:	d5fb      	bpl.n	80181f4 <_printf_i+0x1c0>
 80181fc:	8019      	strh	r1, [r3, #0]
 80181fe:	2300      	movs	r3, #0
 8018200:	6123      	str	r3, [r4, #16]
 8018202:	4615      	mov	r5, r2
 8018204:	e7bc      	b.n	8018180 <_printf_i+0x14c>
 8018206:	682b      	ldr	r3, [r5, #0]
 8018208:	1d1a      	adds	r2, r3, #4
 801820a:	602a      	str	r2, [r5, #0]
 801820c:	681d      	ldr	r5, [r3, #0]
 801820e:	6862      	ldr	r2, [r4, #4]
 8018210:	2100      	movs	r1, #0
 8018212:	4628      	mov	r0, r5
 8018214:	f7e7 ffec 	bl	80001f0 <memchr>
 8018218:	b108      	cbz	r0, 801821e <_printf_i+0x1ea>
 801821a:	1b40      	subs	r0, r0, r5
 801821c:	6060      	str	r0, [r4, #4]
 801821e:	6863      	ldr	r3, [r4, #4]
 8018220:	6123      	str	r3, [r4, #16]
 8018222:	2300      	movs	r3, #0
 8018224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018228:	e7aa      	b.n	8018180 <_printf_i+0x14c>
 801822a:	6923      	ldr	r3, [r4, #16]
 801822c:	462a      	mov	r2, r5
 801822e:	4649      	mov	r1, r9
 8018230:	4640      	mov	r0, r8
 8018232:	47d0      	blx	sl
 8018234:	3001      	adds	r0, #1
 8018236:	d0ad      	beq.n	8018194 <_printf_i+0x160>
 8018238:	6823      	ldr	r3, [r4, #0]
 801823a:	079b      	lsls	r3, r3, #30
 801823c:	d413      	bmi.n	8018266 <_printf_i+0x232>
 801823e:	68e0      	ldr	r0, [r4, #12]
 8018240:	9b03      	ldr	r3, [sp, #12]
 8018242:	4298      	cmp	r0, r3
 8018244:	bfb8      	it	lt
 8018246:	4618      	movlt	r0, r3
 8018248:	e7a6      	b.n	8018198 <_printf_i+0x164>
 801824a:	2301      	movs	r3, #1
 801824c:	4632      	mov	r2, r6
 801824e:	4649      	mov	r1, r9
 8018250:	4640      	mov	r0, r8
 8018252:	47d0      	blx	sl
 8018254:	3001      	adds	r0, #1
 8018256:	d09d      	beq.n	8018194 <_printf_i+0x160>
 8018258:	3501      	adds	r5, #1
 801825a:	68e3      	ldr	r3, [r4, #12]
 801825c:	9903      	ldr	r1, [sp, #12]
 801825e:	1a5b      	subs	r3, r3, r1
 8018260:	42ab      	cmp	r3, r5
 8018262:	dcf2      	bgt.n	801824a <_printf_i+0x216>
 8018264:	e7eb      	b.n	801823e <_printf_i+0x20a>
 8018266:	2500      	movs	r5, #0
 8018268:	f104 0619 	add.w	r6, r4, #25
 801826c:	e7f5      	b.n	801825a <_printf_i+0x226>
 801826e:	bf00      	nop
 8018270:	0801b635 	.word	0x0801b635
 8018274:	0801b646 	.word	0x0801b646

08018278 <__sflush_r>:
 8018278:	898a      	ldrh	r2, [r1, #12]
 801827a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801827e:	4605      	mov	r5, r0
 8018280:	0710      	lsls	r0, r2, #28
 8018282:	460c      	mov	r4, r1
 8018284:	d458      	bmi.n	8018338 <__sflush_r+0xc0>
 8018286:	684b      	ldr	r3, [r1, #4]
 8018288:	2b00      	cmp	r3, #0
 801828a:	dc05      	bgt.n	8018298 <__sflush_r+0x20>
 801828c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801828e:	2b00      	cmp	r3, #0
 8018290:	dc02      	bgt.n	8018298 <__sflush_r+0x20>
 8018292:	2000      	movs	r0, #0
 8018294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801829a:	2e00      	cmp	r6, #0
 801829c:	d0f9      	beq.n	8018292 <__sflush_r+0x1a>
 801829e:	2300      	movs	r3, #0
 80182a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80182a4:	682f      	ldr	r7, [r5, #0]
 80182a6:	6a21      	ldr	r1, [r4, #32]
 80182a8:	602b      	str	r3, [r5, #0]
 80182aa:	d032      	beq.n	8018312 <__sflush_r+0x9a>
 80182ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80182ae:	89a3      	ldrh	r3, [r4, #12]
 80182b0:	075a      	lsls	r2, r3, #29
 80182b2:	d505      	bpl.n	80182c0 <__sflush_r+0x48>
 80182b4:	6863      	ldr	r3, [r4, #4]
 80182b6:	1ac0      	subs	r0, r0, r3
 80182b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80182ba:	b10b      	cbz	r3, 80182c0 <__sflush_r+0x48>
 80182bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80182be:	1ac0      	subs	r0, r0, r3
 80182c0:	2300      	movs	r3, #0
 80182c2:	4602      	mov	r2, r0
 80182c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80182c6:	6a21      	ldr	r1, [r4, #32]
 80182c8:	4628      	mov	r0, r5
 80182ca:	47b0      	blx	r6
 80182cc:	1c43      	adds	r3, r0, #1
 80182ce:	89a3      	ldrh	r3, [r4, #12]
 80182d0:	d106      	bne.n	80182e0 <__sflush_r+0x68>
 80182d2:	6829      	ldr	r1, [r5, #0]
 80182d4:	291d      	cmp	r1, #29
 80182d6:	d82b      	bhi.n	8018330 <__sflush_r+0xb8>
 80182d8:	4a29      	ldr	r2, [pc, #164]	; (8018380 <__sflush_r+0x108>)
 80182da:	410a      	asrs	r2, r1
 80182dc:	07d6      	lsls	r6, r2, #31
 80182de:	d427      	bmi.n	8018330 <__sflush_r+0xb8>
 80182e0:	2200      	movs	r2, #0
 80182e2:	6062      	str	r2, [r4, #4]
 80182e4:	04d9      	lsls	r1, r3, #19
 80182e6:	6922      	ldr	r2, [r4, #16]
 80182e8:	6022      	str	r2, [r4, #0]
 80182ea:	d504      	bpl.n	80182f6 <__sflush_r+0x7e>
 80182ec:	1c42      	adds	r2, r0, #1
 80182ee:	d101      	bne.n	80182f4 <__sflush_r+0x7c>
 80182f0:	682b      	ldr	r3, [r5, #0]
 80182f2:	b903      	cbnz	r3, 80182f6 <__sflush_r+0x7e>
 80182f4:	6560      	str	r0, [r4, #84]	; 0x54
 80182f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182f8:	602f      	str	r7, [r5, #0]
 80182fa:	2900      	cmp	r1, #0
 80182fc:	d0c9      	beq.n	8018292 <__sflush_r+0x1a>
 80182fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018302:	4299      	cmp	r1, r3
 8018304:	d002      	beq.n	801830c <__sflush_r+0x94>
 8018306:	4628      	mov	r0, r5
 8018308:	f7ff fa92 	bl	8017830 <_free_r>
 801830c:	2000      	movs	r0, #0
 801830e:	6360      	str	r0, [r4, #52]	; 0x34
 8018310:	e7c0      	b.n	8018294 <__sflush_r+0x1c>
 8018312:	2301      	movs	r3, #1
 8018314:	4628      	mov	r0, r5
 8018316:	47b0      	blx	r6
 8018318:	1c41      	adds	r1, r0, #1
 801831a:	d1c8      	bne.n	80182ae <__sflush_r+0x36>
 801831c:	682b      	ldr	r3, [r5, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d0c5      	beq.n	80182ae <__sflush_r+0x36>
 8018322:	2b1d      	cmp	r3, #29
 8018324:	d001      	beq.n	801832a <__sflush_r+0xb2>
 8018326:	2b16      	cmp	r3, #22
 8018328:	d101      	bne.n	801832e <__sflush_r+0xb6>
 801832a:	602f      	str	r7, [r5, #0]
 801832c:	e7b1      	b.n	8018292 <__sflush_r+0x1a>
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018334:	81a3      	strh	r3, [r4, #12]
 8018336:	e7ad      	b.n	8018294 <__sflush_r+0x1c>
 8018338:	690f      	ldr	r7, [r1, #16]
 801833a:	2f00      	cmp	r7, #0
 801833c:	d0a9      	beq.n	8018292 <__sflush_r+0x1a>
 801833e:	0793      	lsls	r3, r2, #30
 8018340:	680e      	ldr	r6, [r1, #0]
 8018342:	bf08      	it	eq
 8018344:	694b      	ldreq	r3, [r1, #20]
 8018346:	600f      	str	r7, [r1, #0]
 8018348:	bf18      	it	ne
 801834a:	2300      	movne	r3, #0
 801834c:	eba6 0807 	sub.w	r8, r6, r7
 8018350:	608b      	str	r3, [r1, #8]
 8018352:	f1b8 0f00 	cmp.w	r8, #0
 8018356:	dd9c      	ble.n	8018292 <__sflush_r+0x1a>
 8018358:	6a21      	ldr	r1, [r4, #32]
 801835a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801835c:	4643      	mov	r3, r8
 801835e:	463a      	mov	r2, r7
 8018360:	4628      	mov	r0, r5
 8018362:	47b0      	blx	r6
 8018364:	2800      	cmp	r0, #0
 8018366:	dc06      	bgt.n	8018376 <__sflush_r+0xfe>
 8018368:	89a3      	ldrh	r3, [r4, #12]
 801836a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801836e:	81a3      	strh	r3, [r4, #12]
 8018370:	f04f 30ff 	mov.w	r0, #4294967295
 8018374:	e78e      	b.n	8018294 <__sflush_r+0x1c>
 8018376:	4407      	add	r7, r0
 8018378:	eba8 0800 	sub.w	r8, r8, r0
 801837c:	e7e9      	b.n	8018352 <__sflush_r+0xda>
 801837e:	bf00      	nop
 8018380:	dfbffffe 	.word	0xdfbffffe

08018384 <_fflush_r>:
 8018384:	b538      	push	{r3, r4, r5, lr}
 8018386:	690b      	ldr	r3, [r1, #16]
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	b913      	cbnz	r3, 8018394 <_fflush_r+0x10>
 801838e:	2500      	movs	r5, #0
 8018390:	4628      	mov	r0, r5
 8018392:	bd38      	pop	{r3, r4, r5, pc}
 8018394:	b118      	cbz	r0, 801839e <_fflush_r+0x1a>
 8018396:	6a03      	ldr	r3, [r0, #32]
 8018398:	b90b      	cbnz	r3, 801839e <_fflush_r+0x1a>
 801839a:	f7fe ffd5 	bl	8017348 <__sinit>
 801839e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d0f3      	beq.n	801838e <_fflush_r+0xa>
 80183a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80183a8:	07d0      	lsls	r0, r2, #31
 80183aa:	d404      	bmi.n	80183b6 <_fflush_r+0x32>
 80183ac:	0599      	lsls	r1, r3, #22
 80183ae:	d402      	bmi.n	80183b6 <_fflush_r+0x32>
 80183b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80183b2:	f7ff fa2c 	bl	801780e <__retarget_lock_acquire_recursive>
 80183b6:	4628      	mov	r0, r5
 80183b8:	4621      	mov	r1, r4
 80183ba:	f7ff ff5d 	bl	8018278 <__sflush_r>
 80183be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80183c0:	07da      	lsls	r2, r3, #31
 80183c2:	4605      	mov	r5, r0
 80183c4:	d4e4      	bmi.n	8018390 <_fflush_r+0xc>
 80183c6:	89a3      	ldrh	r3, [r4, #12]
 80183c8:	059b      	lsls	r3, r3, #22
 80183ca:	d4e1      	bmi.n	8018390 <_fflush_r+0xc>
 80183cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80183ce:	f7ff fa1f 	bl	8017810 <__retarget_lock_release_recursive>
 80183d2:	e7dd      	b.n	8018390 <_fflush_r+0xc>

080183d4 <__swhatbuf_r>:
 80183d4:	b570      	push	{r4, r5, r6, lr}
 80183d6:	460c      	mov	r4, r1
 80183d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183dc:	2900      	cmp	r1, #0
 80183de:	b096      	sub	sp, #88	; 0x58
 80183e0:	4615      	mov	r5, r2
 80183e2:	461e      	mov	r6, r3
 80183e4:	da0d      	bge.n	8018402 <__swhatbuf_r+0x2e>
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80183ec:	f04f 0100 	mov.w	r1, #0
 80183f0:	bf0c      	ite	eq
 80183f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80183f6:	2340      	movne	r3, #64	; 0x40
 80183f8:	2000      	movs	r0, #0
 80183fa:	6031      	str	r1, [r6, #0]
 80183fc:	602b      	str	r3, [r5, #0]
 80183fe:	b016      	add	sp, #88	; 0x58
 8018400:	bd70      	pop	{r4, r5, r6, pc}
 8018402:	466a      	mov	r2, sp
 8018404:	f000 f862 	bl	80184cc <_fstat_r>
 8018408:	2800      	cmp	r0, #0
 801840a:	dbec      	blt.n	80183e6 <__swhatbuf_r+0x12>
 801840c:	9901      	ldr	r1, [sp, #4]
 801840e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018412:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018416:	4259      	negs	r1, r3
 8018418:	4159      	adcs	r1, r3
 801841a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801841e:	e7eb      	b.n	80183f8 <__swhatbuf_r+0x24>

08018420 <__smakebuf_r>:
 8018420:	898b      	ldrh	r3, [r1, #12]
 8018422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018424:	079d      	lsls	r5, r3, #30
 8018426:	4606      	mov	r6, r0
 8018428:	460c      	mov	r4, r1
 801842a:	d507      	bpl.n	801843c <__smakebuf_r+0x1c>
 801842c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018430:	6023      	str	r3, [r4, #0]
 8018432:	6123      	str	r3, [r4, #16]
 8018434:	2301      	movs	r3, #1
 8018436:	6163      	str	r3, [r4, #20]
 8018438:	b002      	add	sp, #8
 801843a:	bd70      	pop	{r4, r5, r6, pc}
 801843c:	ab01      	add	r3, sp, #4
 801843e:	466a      	mov	r2, sp
 8018440:	f7ff ffc8 	bl	80183d4 <__swhatbuf_r>
 8018444:	9900      	ldr	r1, [sp, #0]
 8018446:	4605      	mov	r5, r0
 8018448:	4630      	mov	r0, r6
 801844a:	f7ff fa5d 	bl	8017908 <_malloc_r>
 801844e:	b948      	cbnz	r0, 8018464 <__smakebuf_r+0x44>
 8018450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018454:	059a      	lsls	r2, r3, #22
 8018456:	d4ef      	bmi.n	8018438 <__smakebuf_r+0x18>
 8018458:	f023 0303 	bic.w	r3, r3, #3
 801845c:	f043 0302 	orr.w	r3, r3, #2
 8018460:	81a3      	strh	r3, [r4, #12]
 8018462:	e7e3      	b.n	801842c <__smakebuf_r+0xc>
 8018464:	89a3      	ldrh	r3, [r4, #12]
 8018466:	6020      	str	r0, [r4, #0]
 8018468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801846c:	81a3      	strh	r3, [r4, #12]
 801846e:	9b00      	ldr	r3, [sp, #0]
 8018470:	6163      	str	r3, [r4, #20]
 8018472:	9b01      	ldr	r3, [sp, #4]
 8018474:	6120      	str	r0, [r4, #16]
 8018476:	b15b      	cbz	r3, 8018490 <__smakebuf_r+0x70>
 8018478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801847c:	4630      	mov	r0, r6
 801847e:	f000 f837 	bl	80184f0 <_isatty_r>
 8018482:	b128      	cbz	r0, 8018490 <__smakebuf_r+0x70>
 8018484:	89a3      	ldrh	r3, [r4, #12]
 8018486:	f023 0303 	bic.w	r3, r3, #3
 801848a:	f043 0301 	orr.w	r3, r3, #1
 801848e:	81a3      	strh	r3, [r4, #12]
 8018490:	89a3      	ldrh	r3, [r4, #12]
 8018492:	431d      	orrs	r5, r3
 8018494:	81a5      	strh	r5, [r4, #12]
 8018496:	e7cf      	b.n	8018438 <__smakebuf_r+0x18>

08018498 <memmove>:
 8018498:	4288      	cmp	r0, r1
 801849a:	b510      	push	{r4, lr}
 801849c:	eb01 0402 	add.w	r4, r1, r2
 80184a0:	d902      	bls.n	80184a8 <memmove+0x10>
 80184a2:	4284      	cmp	r4, r0
 80184a4:	4623      	mov	r3, r4
 80184a6:	d807      	bhi.n	80184b8 <memmove+0x20>
 80184a8:	1e43      	subs	r3, r0, #1
 80184aa:	42a1      	cmp	r1, r4
 80184ac:	d008      	beq.n	80184c0 <memmove+0x28>
 80184ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80184b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80184b6:	e7f8      	b.n	80184aa <memmove+0x12>
 80184b8:	4402      	add	r2, r0
 80184ba:	4601      	mov	r1, r0
 80184bc:	428a      	cmp	r2, r1
 80184be:	d100      	bne.n	80184c2 <memmove+0x2a>
 80184c0:	bd10      	pop	{r4, pc}
 80184c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80184c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80184ca:	e7f7      	b.n	80184bc <memmove+0x24>

080184cc <_fstat_r>:
 80184cc:	b538      	push	{r3, r4, r5, lr}
 80184ce:	4d07      	ldr	r5, [pc, #28]	; (80184ec <_fstat_r+0x20>)
 80184d0:	2300      	movs	r3, #0
 80184d2:	4604      	mov	r4, r0
 80184d4:	4608      	mov	r0, r1
 80184d6:	4611      	mov	r1, r2
 80184d8:	602b      	str	r3, [r5, #0]
 80184da:	f7e9 fc22 	bl	8001d22 <_fstat>
 80184de:	1c43      	adds	r3, r0, #1
 80184e0:	d102      	bne.n	80184e8 <_fstat_r+0x1c>
 80184e2:	682b      	ldr	r3, [r5, #0]
 80184e4:	b103      	cbz	r3, 80184e8 <_fstat_r+0x1c>
 80184e6:	6023      	str	r3, [r4, #0]
 80184e8:	bd38      	pop	{r3, r4, r5, pc}
 80184ea:	bf00      	nop
 80184ec:	20003394 	.word	0x20003394

080184f0 <_isatty_r>:
 80184f0:	b538      	push	{r3, r4, r5, lr}
 80184f2:	4d06      	ldr	r5, [pc, #24]	; (801850c <_isatty_r+0x1c>)
 80184f4:	2300      	movs	r3, #0
 80184f6:	4604      	mov	r4, r0
 80184f8:	4608      	mov	r0, r1
 80184fa:	602b      	str	r3, [r5, #0]
 80184fc:	f7e9 fc21 	bl	8001d42 <_isatty>
 8018500:	1c43      	adds	r3, r0, #1
 8018502:	d102      	bne.n	801850a <_isatty_r+0x1a>
 8018504:	682b      	ldr	r3, [r5, #0]
 8018506:	b103      	cbz	r3, 801850a <_isatty_r+0x1a>
 8018508:	6023      	str	r3, [r4, #0]
 801850a:	bd38      	pop	{r3, r4, r5, pc}
 801850c:	20003394 	.word	0x20003394

08018510 <_sbrk_r>:
 8018510:	b538      	push	{r3, r4, r5, lr}
 8018512:	4d06      	ldr	r5, [pc, #24]	; (801852c <_sbrk_r+0x1c>)
 8018514:	2300      	movs	r3, #0
 8018516:	4604      	mov	r4, r0
 8018518:	4608      	mov	r0, r1
 801851a:	602b      	str	r3, [r5, #0]
 801851c:	f7e9 fc2a 	bl	8001d74 <_sbrk>
 8018520:	1c43      	adds	r3, r0, #1
 8018522:	d102      	bne.n	801852a <_sbrk_r+0x1a>
 8018524:	682b      	ldr	r3, [r5, #0]
 8018526:	b103      	cbz	r3, 801852a <_sbrk_r+0x1a>
 8018528:	6023      	str	r3, [r4, #0]
 801852a:	bd38      	pop	{r3, r4, r5, pc}
 801852c:	20003394 	.word	0x20003394

08018530 <_realloc_r>:
 8018530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018534:	4680      	mov	r8, r0
 8018536:	4614      	mov	r4, r2
 8018538:	460e      	mov	r6, r1
 801853a:	b921      	cbnz	r1, 8018546 <_realloc_r+0x16>
 801853c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018540:	4611      	mov	r1, r2
 8018542:	f7ff b9e1 	b.w	8017908 <_malloc_r>
 8018546:	b92a      	cbnz	r2, 8018554 <_realloc_r+0x24>
 8018548:	f7ff f972 	bl	8017830 <_free_r>
 801854c:	4625      	mov	r5, r4
 801854e:	4628      	mov	r0, r5
 8018550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018554:	f000 f81b 	bl	801858e <_malloc_usable_size_r>
 8018558:	4284      	cmp	r4, r0
 801855a:	4607      	mov	r7, r0
 801855c:	d802      	bhi.n	8018564 <_realloc_r+0x34>
 801855e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018562:	d812      	bhi.n	801858a <_realloc_r+0x5a>
 8018564:	4621      	mov	r1, r4
 8018566:	4640      	mov	r0, r8
 8018568:	f7ff f9ce 	bl	8017908 <_malloc_r>
 801856c:	4605      	mov	r5, r0
 801856e:	2800      	cmp	r0, #0
 8018570:	d0ed      	beq.n	801854e <_realloc_r+0x1e>
 8018572:	42bc      	cmp	r4, r7
 8018574:	4622      	mov	r2, r4
 8018576:	4631      	mov	r1, r6
 8018578:	bf28      	it	cs
 801857a:	463a      	movcs	r2, r7
 801857c:	f7ff f949 	bl	8017812 <memcpy>
 8018580:	4631      	mov	r1, r6
 8018582:	4640      	mov	r0, r8
 8018584:	f7ff f954 	bl	8017830 <_free_r>
 8018588:	e7e1      	b.n	801854e <_realloc_r+0x1e>
 801858a:	4635      	mov	r5, r6
 801858c:	e7df      	b.n	801854e <_realloc_r+0x1e>

0801858e <_malloc_usable_size_r>:
 801858e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018592:	1f18      	subs	r0, r3, #4
 8018594:	2b00      	cmp	r3, #0
 8018596:	bfbc      	itt	lt
 8018598:	580b      	ldrlt	r3, [r1, r0]
 801859a:	18c0      	addlt	r0, r0, r3
 801859c:	4770      	bx	lr
	...

080185a0 <_init>:
 80185a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185a2:	bf00      	nop
 80185a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185a6:	bc08      	pop	{r3}
 80185a8:	469e      	mov	lr, r3
 80185aa:	4770      	bx	lr

080185ac <_fini>:
 80185ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185ae:	bf00      	nop
 80185b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185b2:	bc08      	pop	{r3}
 80185b4:	469e      	mov	lr, r3
 80185b6:	4770      	bx	lr
